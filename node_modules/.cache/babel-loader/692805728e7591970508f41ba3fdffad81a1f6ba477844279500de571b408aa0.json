{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../Compiler\")} Compiler */\nclass AddManagedPathsPlugin {\n  /**\n   * @param {Iterable<string | RegExp>} managedPaths list of managed paths\n   * @param {Iterable<string | RegExp>} immutablePaths list of immutable paths\n   * @param {Iterable<string | RegExp>} unmanagedPaths list of unmanaged paths\n   */\n  constructor(managedPaths, immutablePaths, unmanagedPaths) {\n    this.managedPaths = new Set(managedPaths);\n    this.immutablePaths = new Set(immutablePaths);\n    this.unmanagedPaths = new Set(unmanagedPaths);\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    for (const managedPath of this.managedPaths) {\n      compiler.managedPaths.add(managedPath);\n    }\n    for (const immutablePath of this.immutablePaths) {\n      compiler.immutablePaths.add(immutablePath);\n    }\n    for (const unmanagedPath of this.unmanagedPaths) {\n      compiler.unmanagedPaths.add(unmanagedPath);\n    }\n  }\n}\nmodule.exports = AddManagedPathsPlugin;","map":{"version":3,"names":["AddManagedPathsPlugin","constructor","managedPaths","immutablePaths","unmanagedPaths","Set","apply","compiler","managedPath","add","immutablePath","unmanagedPath","module","exports"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/cache/AddManagedPathsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass AddManagedPathsPlugin {\n\t/**\n\t * @param {Iterable<string | RegExp>} managedPaths list of managed paths\n\t * @param {Iterable<string | RegExp>} immutablePaths list of immutable paths\n\t * @param {Iterable<string | RegExp>} unmanagedPaths list of unmanaged paths\n\t */\n\tconstructor(managedPaths, immutablePaths, unmanagedPaths) {\n\t\tthis.managedPaths = new Set(managedPaths);\n\t\tthis.immutablePaths = new Set(immutablePaths);\n\t\tthis.unmanagedPaths = new Set(unmanagedPaths);\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tfor (const managedPath of this.managedPaths) {\n\t\t\tcompiler.managedPaths.add(managedPath);\n\t\t}\n\t\tfor (const immutablePath of this.immutablePaths) {\n\t\t\tcompiler.immutablePaths.add(immutablePath);\n\t\t}\n\t\tfor (const unmanagedPath of this.unmanagedPaths) {\n\t\t\tcompiler.unmanagedPaths.add(unmanagedPath);\n\t\t}\n\t}\n}\n\nmodule.exports = AddManagedPathsPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AAEA,MAAMA,qBAAqB,CAAC;EAC3B;AACD;AACA;AACA;AACA;EACCC,WAAWA,CAACC,YAAY,EAAEC,cAAc,EAAEC,cAAc,EAAE;IACzD,IAAI,CAACF,YAAY,GAAG,IAAIG,GAAG,CAACH,YAAY,CAAC;IACzC,IAAI,CAACC,cAAc,GAAG,IAAIE,GAAG,CAACF,cAAc,CAAC;IAC7C,IAAI,CAACC,cAAc,GAAG,IAAIC,GAAG,CAACD,cAAc,CAAC;EAC9C;;EAEA;AACD;AACA;AACA;AACA;EACCE,KAAKA,CAACC,QAAQ,EAAE;IACf,KAAK,MAAMC,WAAW,IAAI,IAAI,CAACN,YAAY,EAAE;MAC5CK,QAAQ,CAACL,YAAY,CAACO,GAAG,CAACD,WAAW,CAAC;IACvC;IACA,KAAK,MAAME,aAAa,IAAI,IAAI,CAACP,cAAc,EAAE;MAChDI,QAAQ,CAACJ,cAAc,CAACM,GAAG,CAACC,aAAa,CAAC;IAC3C;IACA,KAAK,MAAMC,aAAa,IAAI,IAAI,CAACP,cAAc,EAAE;MAChDG,QAAQ,CAACH,cAAc,CAACK,GAAG,CAACE,aAAa,CAAC;IAC3C;EACD;AACD;AAEAC,MAAM,CAACC,OAAO,GAAGb,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}