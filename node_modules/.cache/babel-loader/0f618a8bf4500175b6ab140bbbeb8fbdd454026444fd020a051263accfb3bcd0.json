{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst eslintScope = require(\"eslint-scope\");\nconst Referencer = require(\"eslint-scope/lib/referencer\");\nconst {\n  CachedSource,\n  ConcatSource,\n  ReplaceSource\n} = require(\"webpack-sources\");\nconst ConcatenationScope = require(\"../ConcatenationScope\");\nconst {\n  UsageState\n} = require(\"../ExportsInfo\");\nconst Module = require(\"../Module\");\nconst {\n  JAVASCRIPT_MODULE_TYPE_ESM\n} = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst HarmonyImportDependency = require(\"../dependencies/HarmonyImportDependency\");\nconst JavascriptParser = require(\"../javascript/JavascriptParser\");\nconst {\n  equals\n} = require(\"../util/ArrayHelpers\");\nconst LazySet = require(\"../util/LazySet\");\nconst {\n  concatComparators\n} = require(\"../util/comparators\");\nconst createHash = require(\"../util/createHash\");\nconst {\n  makePathsRelative\n} = require(\"../util/identifier\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst propertyAccess = require(\"../util/propertyAccess\");\nconst {\n  propertyName\n} = require(\"../util/propertyName\");\nconst {\n  filterRuntime,\n  intersectRuntime,\n  mergeRuntimeCondition,\n  mergeRuntimeConditionNonFalse,\n  runtimeConditionToString,\n  subtractRuntimeCondition\n} = require(\"../util/runtime\");\n\n/** @typedef {import(\"eslint-scope\").Reference} Reference */\n/** @typedef {import(\"eslint-scope\").Scope} Scope */\n/** @typedef {import(\"eslint-scope\").Variable} Variable */\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").WebpackOptionsNormalized} WebpackOptions */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"../ExportsInfo\").ExportInfo} ExportInfo */\n/** @typedef {import(\"../Module\").BuildInfo} BuildInfo */\n/** @typedef {import(\"../Module\").BuildMeta} BuildMeta */\n/** @typedef {import(\"../Module\").CodeGenerationContext} CodeGenerationContext */\n/** @typedef {import(\"../Module\").CodeGenerationResult} CodeGenerationResult */\n/** @typedef {import(\"../Module\").LibIdentOptions} LibIdentOptions */\n/** @typedef {import(\"../Module\").ReadOnlyRuntimeRequirements} ReadOnlyRuntimeRequirements */\n/** @typedef {import(\"../Module\").SourceTypes} SourceTypes */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n/** @typedef {import(\"../ResolverFactory\").ResolverWithOptions} ResolverWithOptions */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").ChunkRenderContext} ChunkRenderContext */\n/** @typedef {import(\"../javascript/JavascriptParser\").Program} Program */\n/** @typedef {import(\"../javascript/JavascriptParser\").Range} Range */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {typeof import(\"../util/Hash\")} HashConstructor */\n/** @typedef {import(\"../util/fs\").InputFileSystem} InputFileSystem */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\n/**\n * @template T\n * @typedef {import(\"../InitFragment\")<T>} InitFragment\n */\n\n/**\n * @template T\n * @typedef {import(\"../util/comparators\").Comparator<T>} Comparator\n */\n\n// fix eslint-scope to support class properties correctly\n// cspell:word Referencer\nconst ReferencerClass = /** @type {any} */Referencer;\nif (!ReferencerClass.prototype.PropertyDefinition) {\n  ReferencerClass.prototype.PropertyDefinition = ReferencerClass.prototype.Property;\n}\n\n/**\n * @typedef {Object} ReexportInfo\n * @property {Module} module\n * @property {string[]} export\n */\n\n/** @typedef {RawBinding | SymbolBinding} Binding */\n\n/**\n * @typedef {Object} RawBinding\n * @property {ModuleInfo} info\n * @property {string} rawName\n * @property {string=} comment\n * @property {string[]} ids\n * @property {string[]} exportName\n */\n\n/**\n * @typedef {Object} SymbolBinding\n * @property {ConcatenatedModuleInfo} info\n * @property {string} name\n * @property {string=} comment\n * @property {string[]} ids\n * @property {string[]} exportName\n */\n\n/** @typedef {ConcatenatedModuleInfo | ExternalModuleInfo } ModuleInfo */\n/** @typedef {ConcatenatedModuleInfo | ExternalModuleInfo | ReferenceToModuleInfo } ModuleInfoOrReference */\n\n/**\n * @typedef {Object} ConcatenatedModuleInfo\n * @property {\"concatenated\"} type\n * @property {Module} module\n * @property {number} index\n * @property {Program | undefined} ast\n * @property {Source} internalSource\n * @property {ReplaceSource} source\n * @property {InitFragment<ChunkRenderContext>[]=} chunkInitFragments\n * @property {ReadOnlyRuntimeRequirements} runtimeRequirements\n * @property {Scope} globalScope\n * @property {Scope} moduleScope\n * @property {Map<string, string>} internalNames\n * @property {Map<string, string> | undefined} exportMap\n * @property {Map<string, string> | undefined} rawExportMap\n * @property {string=} namespaceExportSymbol\n * @property {string | undefined} namespaceObjectName\n * @property {boolean} interopNamespaceObjectUsed\n * @property {string | undefined} interopNamespaceObjectName\n * @property {boolean} interopNamespaceObject2Used\n * @property {string | undefined} interopNamespaceObject2Name\n * @property {boolean} interopDefaultAccessUsed\n * @property {string | undefined} interopDefaultAccessName\n */\n\n/**\n * @typedef {Object} ExternalModuleInfo\n * @property {\"external\"} type\n * @property {Module} module\n * @property {RuntimeSpec | boolean} runtimeCondition\n * @property {number} index\n * @property {string} name\n * @property {boolean} interopNamespaceObjectUsed\n * @property {string} interopNamespaceObjectName\n * @property {boolean} interopNamespaceObject2Used\n * @property {string} interopNamespaceObject2Name\n * @property {boolean} interopDefaultAccessUsed\n * @property {string} interopDefaultAccessName\n */\n\n/**\n * @typedef {Object} ReferenceToModuleInfo\n * @property {\"reference\"} type\n * @property {RuntimeSpec | boolean} runtimeCondition\n * @property {ConcatenatedModuleInfo | ExternalModuleInfo} target\n */\n\n/** @typedef {Set<string>} UsedNames */\n\nconst RESERVED_NAMES = new Set([\n// internal names (should always be renamed)\nConcatenationScope.DEFAULT_EXPORT, ConcatenationScope.NAMESPACE_OBJECT_EXPORT,\n// keywords\n\"abstract,arguments,async,await,boolean,break,byte,case,catch,char,class,const,continue\", \"debugger,default,delete,do,double,else,enum,eval,export,extends,false,final,finally,float\", \"for,function,goto,if,implements,import,in,instanceof,int,interface,let,long,native,new,null\", \"package,private,protected,public,return,short,static,super,switch,synchronized,this,throw\", \"throws,transient,true,try,typeof,var,void,volatile,while,with,yield\",\n// commonjs/amd\n\"module,__dirname,__filename,exports,require,define\",\n// js globals\n\"Array,Date,eval,function,hasOwnProperty,Infinity,isFinite,isNaN,isPrototypeOf,length,Math\", \"NaN,name,Number,Object,prototype,String,toString,undefined,valueOf\",\n// browser globals\n\"alert,all,anchor,anchors,area,assign,blur,button,checkbox,clearInterval,clearTimeout\", \"clientInformation,close,closed,confirm,constructor,crypto,decodeURI,decodeURIComponent\", \"defaultStatus,document,element,elements,embed,embeds,encodeURI,encodeURIComponent,escape\", \"event,fileUpload,focus,form,forms,frame,innerHeight,innerWidth,layer,layers,link,location\", \"mimeTypes,navigate,navigator,frames,frameRate,hidden,history,image,images,offscreenBuffering\", \"open,opener,option,outerHeight,outerWidth,packages,pageXOffset,pageYOffset,parent,parseFloat\", \"parseInt,password,pkcs11,plugin,prompt,propertyIsEnum,radio,reset,screenX,screenY,scroll\", \"secure,select,self,setInterval,setTimeout,status,submit,taint,text,textarea,top,unescape\", \"untaint,window\",\n// window events\n\"onblur,onclick,onerror,onfocus,onkeydown,onkeypress,onkeyup,onmouseover,onload,onmouseup,onmousedown,onsubmit\"].join(\",\").split(\",\"));\nconst createComparator = (property, comparator) => (a, b) => comparator(a[property], b[property]);\n\n/**\n * @param {number} a a\n * @param {number} b b\n * @returns {0 | 1 | -1} result\n */\nconst compareNumbers = (a, b) => {\n  if (isNaN(a)) {\n    if (!isNaN(b)) {\n      return 1;\n    }\n  } else {\n    if (isNaN(b)) {\n      return -1;\n    }\n    if (a !== b) {\n      return a < b ? -1 : 1;\n    }\n  }\n  return 0;\n};\nconst bySourceOrder = createComparator(\"sourceOrder\", compareNumbers);\nconst byRangeStart = createComparator(\"rangeStart\", compareNumbers);\n\n/**\n * @param {Iterable<string>} iterable iterable object\n * @returns {string} joined iterable object\n */\nconst joinIterableWithComma = iterable => {\n  // This is more performant than Array.from().join(\", \")\n  // as it doesn't create an array\n  let str = \"\";\n  let first = true;\n  for (const item of iterable) {\n    if (first) {\n      first = false;\n    } else {\n      str += \", \";\n    }\n    str += item;\n  }\n  return str;\n};\n\n/**\n * @typedef {Object} ConcatenationEntry\n * @property {\"concatenated\" | \"external\"} type\n * @property {Module} module\n * @property {RuntimeSpec | boolean} runtimeCondition\n */\n\n/**\n * @param {ModuleGraph} moduleGraph the module graph\n * @param {ModuleInfo} info module info\n * @param {string[]} exportName exportName\n * @param {Map<Module, ModuleInfo>} moduleToInfoMap moduleToInfoMap\n * @param {RuntimeSpec} runtime for which runtime\n * @param {RequestShortener} requestShortener the request shortener\n * @param {RuntimeTemplate} runtimeTemplate the runtime template\n * @param {Set<ConcatenatedModuleInfo>} neededNamespaceObjects modules for which a namespace object should be generated\n * @param {boolean} asCall asCall\n * @param {boolean | undefined} strictHarmonyModule strictHarmonyModule\n * @param {boolean | undefined} asiSafe asiSafe\n * @param {Set<ExportInfo>} alreadyVisited alreadyVisited\n * @returns {Binding} the final variable\n */\nconst getFinalBinding = (moduleGraph, info, exportName, moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, asCall, strictHarmonyModule, asiSafe, alreadyVisited = new Set()) => {\n  const exportsType = info.module.getExportsType(moduleGraph, strictHarmonyModule);\n  if (exportName.length === 0) {\n    switch (exportsType) {\n      case \"default-only\":\n        info.interopNamespaceObject2Used = true;\n        return {\n          info,\n          rawName: ( /** @type {string} */info.interopNamespaceObject2Name),\n          ids: exportName,\n          exportName\n        };\n      case \"default-with-named\":\n        info.interopNamespaceObjectUsed = true;\n        return {\n          info,\n          rawName: ( /** @type {string} */info.interopNamespaceObjectName),\n          ids: exportName,\n          exportName\n        };\n      case \"namespace\":\n      case \"dynamic\":\n        break;\n      default:\n        throw new Error(`Unexpected exportsType ${exportsType}`);\n    }\n  } else {\n    switch (exportsType) {\n      case \"namespace\":\n        break;\n      case \"default-with-named\":\n        switch (exportName[0]) {\n          case \"default\":\n            exportName = exportName.slice(1);\n            break;\n          case \"__esModule\":\n            return {\n              info,\n              rawName: \"/* __esModule */true\",\n              ids: exportName.slice(1),\n              exportName\n            };\n        }\n        break;\n      case \"default-only\":\n        {\n          const exportId = exportName[0];\n          if (exportId === \"__esModule\") {\n            return {\n              info,\n              rawName: \"/* __esModule */true\",\n              ids: exportName.slice(1),\n              exportName\n            };\n          }\n          exportName = exportName.slice(1);\n          if (exportId !== \"default\") {\n            return {\n              info,\n              rawName: \"/* non-default import from default-exporting module */undefined\",\n              ids: exportName,\n              exportName\n            };\n          }\n          break;\n        }\n      case \"dynamic\":\n        switch (exportName[0]) {\n          case \"default\":\n            {\n              exportName = exportName.slice(1);\n              info.interopDefaultAccessUsed = true;\n              const defaultExport = asCall ? `${info.interopDefaultAccessName}()` : asiSafe ? `(${info.interopDefaultAccessName}())` : asiSafe === false ? `;(${info.interopDefaultAccessName}())` : `${info.interopDefaultAccessName}.a`;\n              return {\n                info,\n                rawName: defaultExport,\n                ids: exportName,\n                exportName\n              };\n            }\n          case \"__esModule\":\n            return {\n              info,\n              rawName: \"/* __esModule */true\",\n              ids: exportName.slice(1),\n              exportName\n            };\n        }\n        break;\n      default:\n        throw new Error(`Unexpected exportsType ${exportsType}`);\n    }\n  }\n  if (exportName.length === 0) {\n    switch (info.type) {\n      case \"concatenated\":\n        neededNamespaceObjects.add(info);\n        return {\n          info,\n          rawName: ( /** @type {string} */info.namespaceObjectName),\n          ids: exportName,\n          exportName\n        };\n      case \"external\":\n        return {\n          info,\n          rawName: info.name,\n          ids: exportName,\n          exportName\n        };\n    }\n  }\n  const exportsInfo = moduleGraph.getExportsInfo(info.module);\n  const exportInfo = exportsInfo.getExportInfo(exportName[0]);\n  if (alreadyVisited.has(exportInfo)) {\n    return {\n      info,\n      rawName: \"/* circular reexport */ Object(function x() { x() }())\",\n      ids: [],\n      exportName\n    };\n  }\n  alreadyVisited.add(exportInfo);\n  switch (info.type) {\n    case \"concatenated\":\n      {\n        const exportId = exportName[0];\n        if (exportInfo.provided === false) {\n          // It's not provided, but it could be on the prototype\n          neededNamespaceObjects.add(info);\n          return {\n            info,\n            rawName: ( /** @type {string} */info.namespaceObjectName),\n            ids: exportName,\n            exportName\n          };\n        }\n        const directExport = info.exportMap && info.exportMap.get(exportId);\n        if (directExport) {\n          const usedName = /** @type {string[]} */\n          exportsInfo.getUsedName(exportName, runtime);\n          if (!usedName) {\n            return {\n              info,\n              rawName: \"/* unused export */ undefined\",\n              ids: exportName.slice(1),\n              exportName\n            };\n          }\n          return {\n            info,\n            name: directExport,\n            ids: usedName.slice(1),\n            exportName\n          };\n        }\n        const rawExport = info.rawExportMap && info.rawExportMap.get(exportId);\n        if (rawExport) {\n          return {\n            info,\n            rawName: rawExport,\n            ids: exportName.slice(1),\n            exportName\n          };\n        }\n        const reexport = exportInfo.findTarget(moduleGraph, module => moduleToInfoMap.has(module));\n        if (reexport === false) {\n          throw new Error(`Target module of reexport from '${info.module.readableIdentifier(requestShortener)}' is not part of the concatenation (export '${exportId}')\\nModules in the concatenation:\\n${Array.from(moduleToInfoMap, ([m, info]) => ` * ${info.type} ${m.readableIdentifier(requestShortener)}`).join(\"\\n\")}`);\n        }\n        if (reexport) {\n          const refInfo = moduleToInfoMap.get(reexport.module);\n          return getFinalBinding(moduleGraph, /** @type {ModuleInfo} */refInfo, reexport.export ? [...reexport.export, ...exportName.slice(1)] : exportName.slice(1), moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, asCall, /** @type {BuildMeta} */\n          info.module.buildMeta.strictHarmonyModule, asiSafe, alreadyVisited);\n        }\n        if (info.namespaceExportSymbol) {\n          const usedName = /** @type {string[]} */\n          exportsInfo.getUsedName(exportName, runtime);\n          return {\n            info,\n            rawName: ( /** @type {string} */info.namespaceObjectName),\n            ids: usedName,\n            exportName\n          };\n        }\n        throw new Error(`Cannot get final name for export '${exportName.join(\".\")}' of ${info.module.readableIdentifier(requestShortener)}`);\n      }\n    case \"external\":\n      {\n        const used = /** @type {string[]} */\n        exportsInfo.getUsedName(exportName, runtime);\n        if (!used) {\n          return {\n            info,\n            rawName: \"/* unused export */ undefined\",\n            ids: exportName.slice(1),\n            exportName\n          };\n        }\n        const comment = equals(used, exportName) ? \"\" : Template.toNormalComment(`${exportName.join(\".\")}`);\n        return {\n          info,\n          rawName: info.name + comment,\n          ids: used,\n          exportName\n        };\n      }\n  }\n};\n\n/**\n * @param {ModuleGraph} moduleGraph the module graph\n * @param {ModuleInfo} info module info\n * @param {string[]} exportName exportName\n * @param {Map<Module, ModuleInfo>} moduleToInfoMap moduleToInfoMap\n * @param {RuntimeSpec} runtime for which runtime\n * @param {RequestShortener} requestShortener the request shortener\n * @param {RuntimeTemplate} runtimeTemplate the runtime template\n * @param {Set<ConcatenatedModuleInfo>} neededNamespaceObjects modules for which a namespace object should be generated\n * @param {boolean} asCall asCall\n * @param {boolean | undefined} callContext callContext\n * @param {boolean | undefined} strictHarmonyModule strictHarmonyModule\n * @param {boolean | undefined} asiSafe asiSafe\n * @returns {string} the final name\n */\nconst getFinalName = (moduleGraph, info, exportName, moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, asCall, callContext, strictHarmonyModule, asiSafe) => {\n  const binding = getFinalBinding(moduleGraph, info, exportName, moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, asCall, strictHarmonyModule, asiSafe);\n  {\n    const {\n      ids,\n      comment\n    } = binding;\n    let reference;\n    let isPropertyAccess;\n    if (\"rawName\" in binding) {\n      reference = `${binding.rawName}${comment || \"\"}${propertyAccess(ids)}`;\n      isPropertyAccess = ids.length > 0;\n    } else {\n      const {\n        info,\n        name: exportId\n      } = binding;\n      const name = info.internalNames.get(exportId);\n      if (!name) {\n        throw new Error(`The export \"${exportId}\" in \"${info.module.readableIdentifier(requestShortener)}\" has no internal name (existing names: ${Array.from(info.internalNames, ([name, symbol]) => `${name}: ${symbol}`).join(\", \") || \"none\"})`);\n      }\n      reference = `${name}${comment || \"\"}${propertyAccess(ids)}`;\n      isPropertyAccess = ids.length > 1;\n    }\n    if (isPropertyAccess && asCall && callContext === false) {\n      return asiSafe ? `(0,${reference})` : asiSafe === false ? `;(0,${reference})` : `/*#__PURE__*/Object(${reference})`;\n    }\n    return reference;\n  }\n};\n\n/**\n * @param {Scope | null} s scope\n * @param {UsedNames} nameSet name set\n * @param {TODO} scopeSet1 scope set 1\n * @param {TODO} scopeSet2 scope set 2\n */\nconst addScopeSymbols = (s, nameSet, scopeSet1, scopeSet2) => {\n  let scope = s;\n  while (scope) {\n    if (scopeSet1.has(scope)) break;\n    if (scopeSet2.has(scope)) break;\n    scopeSet1.add(scope);\n    for (const variable of scope.variables) {\n      nameSet.add(variable.name);\n    }\n    scope = scope.upper;\n  }\n};\n\n/**\n * @param {Variable} variable variable\n * @returns {Reference[]} references\n */\nconst getAllReferences = variable => {\n  let set = variable.references;\n  // Look for inner scope variables too (like in class Foo { t() { Foo } })\n  const identifiers = new Set(variable.identifiers);\n  for (const scope of variable.scope.childScopes) {\n    for (const innerVar of scope.variables) {\n      if (innerVar.identifiers.some(id => identifiers.has(id))) {\n        set = set.concat(innerVar.references);\n        break;\n      }\n    }\n  }\n  return set;\n};\n\n/**\n * @param {TODO} ast ast\n * @param {TODO} node node\n * @returns {TODO} result\n */\nconst getPathInAst = (ast, node) => {\n  if (ast === node) {\n    return [];\n  }\n  const nr = node.range;\n  const enterNode = n => {\n    if (!n) return undefined;\n    const r = n.range;\n    if (r) {\n      if (r[0] <= nr[0] && r[1] >= nr[1]) {\n        const path = getPathInAst(n, node);\n        if (path) {\n          path.push(n);\n          return path;\n        }\n      }\n    }\n    return undefined;\n  };\n  if (Array.isArray(ast)) {\n    for (let i = 0; i < ast.length; i++) {\n      const enterResult = enterNode(ast[i]);\n      if (enterResult !== undefined) return enterResult;\n    }\n  } else if (ast && typeof ast === \"object\") {\n    const keys = Object.keys(ast);\n    for (let i = 0; i < keys.length; i++) {\n      const value = ast[keys[i]];\n      if (Array.isArray(value)) {\n        const pathResult = getPathInAst(value, node);\n        if (pathResult !== undefined) return pathResult;\n      } else if (value && typeof value === \"object\") {\n        const enterResult = enterNode(value);\n        if (enterResult !== undefined) return enterResult;\n      }\n    }\n  }\n};\nconst TYPES = new Set([\"javascript\"]);\nclass ConcatenatedModule extends Module {\n  /**\n   * @param {Module} rootModule the root module of the concatenation\n   * @param {Set<Module>} modules all modules in the concatenation (including the root module)\n   * @param {RuntimeSpec} runtime the runtime\n   * @param {Object=} associatedObjectForCache object for caching\n   * @param {string | HashConstructor=} hashFunction hash function to use\n   * @returns {ConcatenatedModule} the module\n   */\n  static create(rootModule, modules, runtime, associatedObjectForCache, hashFunction = \"md4\") {\n    const identifier = ConcatenatedModule._createIdentifier(rootModule, modules, associatedObjectForCache, hashFunction);\n    return new ConcatenatedModule({\n      identifier,\n      rootModule,\n      modules,\n      runtime\n    });\n  }\n\n  /**\n   * @param {Object} options options\n   * @param {string} options.identifier the identifier of the module\n   * @param {Module=} options.rootModule the root module of the concatenation\n   * @param {RuntimeSpec} options.runtime the selected runtime\n   * @param {Set<Module>=} options.modules all concatenated modules\n   */\n  constructor({\n    identifier,\n    rootModule,\n    modules,\n    runtime\n  }) {\n    super(JAVASCRIPT_MODULE_TYPE_ESM, null, rootModule && rootModule.layer);\n\n    // Info from Factory\n    /** @type {string} */\n    this._identifier = identifier;\n    /** @type {Module} */\n    this.rootModule = rootModule;\n    /** @type {Set<Module>} */\n    this._modules = modules;\n    this._runtime = runtime;\n    this.factoryMeta = rootModule && rootModule.factoryMeta;\n  }\n\n  /**\n   * Assuming this module is in the cache. Update the (cached) module with\n   * the fresh module from the factory. Usually updates internal references\n   * and properties.\n   * @param {Module} module fresh module\n   * @returns {void}\n   */\n  updateCacheModule(module) {\n    throw new Error(\"Must not be called\");\n  }\n\n  /**\n   * @returns {SourceTypes} types available (do not mutate)\n   */\n  getSourceTypes() {\n    return TYPES;\n  }\n  get modules() {\n    return Array.from(this._modules);\n  }\n\n  /**\n   * @returns {string} a unique identifier of the module\n   */\n  identifier() {\n    return this._identifier;\n  }\n\n  /**\n   * @param {RequestShortener} requestShortener the request shortener\n   * @returns {string} a user readable identifier of the module\n   */\n  readableIdentifier(requestShortener) {\n    return this.rootModule.readableIdentifier(requestShortener) + ` + ${this._modules.size - 1} modules`;\n  }\n\n  /**\n   * @param {LibIdentOptions} options options\n   * @returns {string | null} an identifier for library inclusion\n   */\n  libIdent(options) {\n    return this.rootModule.libIdent(options);\n  }\n\n  /**\n   * @returns {string | null} absolute path which should be used for condition matching (usually the resource path)\n   */\n  nameForCondition() {\n    return this.rootModule.nameForCondition();\n  }\n\n  /**\n   * @param {ModuleGraph} moduleGraph the module graph\n   * @returns {ConnectionState} how this module should be connected to referencing modules when consumed for side-effects only\n   */\n  getSideEffectsConnectionState(moduleGraph) {\n    return this.rootModule.getSideEffectsConnectionState(moduleGraph);\n  }\n\n  /**\n   * @param {WebpackOptions} options webpack options\n   * @param {Compilation} compilation the compilation\n   * @param {ResolverWithOptions} resolver the resolver\n   * @param {InputFileSystem} fs the file system\n   * @param {function(WebpackError=): void} callback callback function\n   * @returns {void}\n   */\n  build(options, compilation, resolver, fs, callback) {\n    const {\n      rootModule\n    } = this;\n    const {\n      moduleArgument,\n      exportsArgument\n    } = /** @type {BuildInfo} */\n    rootModule.buildInfo;\n    this.buildInfo = {\n      strict: true,\n      cacheable: true,\n      moduleArgument,\n      exportsArgument,\n      fileDependencies: new LazySet(),\n      contextDependencies: new LazySet(),\n      missingDependencies: new LazySet(),\n      topLevelDeclarations: new Set(),\n      assets: undefined\n    };\n    this.buildMeta = rootModule.buildMeta;\n    this.clearDependenciesAndBlocks();\n    this.clearWarningsAndErrors();\n    for (const m of this._modules) {\n      // populate cacheable\n      if (!( /** @type {BuildInfo} */m.buildInfo.cacheable)) {\n        this.buildInfo.cacheable = false;\n      }\n\n      // populate dependencies\n      for (const d of m.dependencies.filter(dep => !(dep instanceof HarmonyImportDependency) || !this._modules.has( /** @type {Module} */compilation.moduleGraph.getModule(dep)))) {\n        this.dependencies.push(d);\n      }\n      // populate blocks\n      for (const d of m.blocks) {\n        this.blocks.push(d);\n      }\n\n      // populate warnings\n      const warnings = m.getWarnings();\n      if (warnings !== undefined) {\n        for (const warning of warnings) {\n          this.addWarning(warning);\n        }\n      }\n\n      // populate errors\n      const errors = m.getErrors();\n      if (errors !== undefined) {\n        for (const error of errors) {\n          this.addError(error);\n        }\n      }\n      const {\n        assets,\n        assetsInfo,\n        topLevelDeclarations\n      } = /** @type {BuildInfo} */m.buildInfo;\n\n      // populate topLevelDeclarations\n      if (topLevelDeclarations) {\n        const topLevelDeclarations = this.buildInfo.topLevelDeclarations;\n        if (topLevelDeclarations !== undefined) {\n          for (const decl of topLevelDeclarations) {\n            topLevelDeclarations.add(decl);\n          }\n        }\n      } else {\n        this.buildInfo.topLevelDeclarations = undefined;\n      }\n\n      // populate assets\n      if (assets) {\n        if (this.buildInfo.assets === undefined) {\n          this.buildInfo.assets = Object.create(null);\n        }\n        Object.assign( /** @type {BuildInfo} */this.buildInfo.assets, assets);\n      }\n      if (assetsInfo) {\n        if (this.buildInfo.assetsInfo === undefined) {\n          this.buildInfo.assetsInfo = new Map();\n        }\n        for (const [key, value] of assetsInfo) {\n          this.buildInfo.assetsInfo.set(key, value);\n        }\n      }\n    }\n    callback();\n  }\n\n  /**\n   * @param {string=} type the source type for which the size should be estimated\n   * @returns {number} the estimated size of the module (must be non-zero)\n   */\n  size(type) {\n    // Guess size from embedded modules\n    let size = 0;\n    for (const module of this._modules) {\n      size += module.size(type);\n    }\n    return size;\n  }\n\n  /**\n   * @private\n   * @param {Module} rootModule the root of the concatenation\n   * @param {Set<Module>} modulesSet a set of modules which should be concatenated\n   * @param {RuntimeSpec} runtime for this runtime\n   * @param {ModuleGraph} moduleGraph the module graph\n   * @returns {ConcatenationEntry[]} concatenation list\n   */\n  _createConcatenationList(rootModule, modulesSet, runtime, moduleGraph) {\n    /** @type {ConcatenationEntry[]} */\n    const list = [];\n    /** @type {Map<Module, RuntimeSpec | true>} */\n    const existingEntries = new Map();\n\n    /**\n     * @param {Module} module a module\n     * @returns {Iterable<{ connection: ModuleGraphConnection, runtimeCondition: RuntimeSpec | true }>} imported modules in order\n     */\n    const getConcatenatedImports = module => {\n      let connections = Array.from(moduleGraph.getOutgoingConnections(module));\n      if (module === rootModule) {\n        for (const c of moduleGraph.getOutgoingConnections(this)) connections.push(c);\n      }\n      /**\n       * @type {Array<{ connection: ModuleGraphConnection, sourceOrder: number, rangeStart: number }>}\n       */\n      const references = connections.filter(connection => {\n        if (!(connection.dependency instanceof HarmonyImportDependency)) return false;\n        return connection && connection.resolvedOriginModule === module && connection.module && connection.isTargetActive(runtime);\n      }).map(connection => {\n        const dep = /** @type {HarmonyImportDependency} */\n        connection.dependency;\n        return {\n          connection,\n          sourceOrder: dep.sourceOrder,\n          rangeStart: dep.range && dep.range[0]\n        };\n      });\n      /**\n       * bySourceOrder\n       * @example\n       * import a from \"a\"; // sourceOrder=1\n       * import b from \"b\"; // sourceOrder=2\n       *\n       * byRangeStart\n       * @example\n       * import {a, b} from \"a\"; // sourceOrder=1\n       * a.a(); // first range\n       * b.b(); // second range\n       *\n       * If there is no reexport, we have the same source.\n       * If there is reexport, but module has side effects, this will lead to reexport module only.\n       * If there is side-effects-free reexport, we can get simple deterministic result with range start comparison.\n       */\n      references.sort(concatComparators(bySourceOrder, byRangeStart));\n      /** @type {Map<Module, { connection: ModuleGraphConnection, runtimeCondition: RuntimeSpec | true }>} */\n      const referencesMap = new Map();\n      for (const {\n        connection\n      } of references) {\n        const runtimeCondition = filterRuntime(runtime, r => connection.isTargetActive(r));\n        if (runtimeCondition === false) continue;\n        const module = connection.module;\n        const entry = referencesMap.get(module);\n        if (entry === undefined) {\n          referencesMap.set(module, {\n            connection,\n            runtimeCondition\n          });\n          continue;\n        }\n        entry.runtimeCondition = mergeRuntimeConditionNonFalse(entry.runtimeCondition, runtimeCondition, runtime);\n      }\n      return referencesMap.values();\n    };\n\n    /**\n     * @param {ModuleGraphConnection} connection graph connection\n     * @param {RuntimeSpec | true} runtimeCondition runtime condition\n     * @returns {void}\n     */\n    const enterModule = (connection, runtimeCondition) => {\n      const module = connection.module;\n      if (!module) return;\n      const existingEntry = existingEntries.get(module);\n      if (existingEntry === true) {\n        return;\n      }\n      if (modulesSet.has(module)) {\n        existingEntries.set(module, true);\n        if (runtimeCondition !== true) {\n          throw new Error(`Cannot runtime-conditional concatenate a module (${module.identifier()} in ${this.rootModule.identifier()}, ${runtimeConditionToString(runtimeCondition)}). This should not happen.`);\n        }\n        const imports = getConcatenatedImports(module);\n        for (const {\n          connection,\n          runtimeCondition\n        } of imports) enterModule(connection, runtimeCondition);\n        list.push({\n          type: \"concatenated\",\n          module: connection.module,\n          runtimeCondition\n        });\n      } else {\n        if (existingEntry !== undefined) {\n          const reducedRuntimeCondition = subtractRuntimeCondition(runtimeCondition, existingEntry, runtime);\n          if (reducedRuntimeCondition === false) return;\n          runtimeCondition = reducedRuntimeCondition;\n          existingEntries.set(connection.module, mergeRuntimeConditionNonFalse(existingEntry, runtimeCondition, runtime));\n        } else {\n          existingEntries.set(connection.module, runtimeCondition);\n        }\n        if (list.length > 0) {\n          const lastItem = list[list.length - 1];\n          if (lastItem.type === \"external\" && lastItem.module === connection.module) {\n            lastItem.runtimeCondition = mergeRuntimeCondition(lastItem.runtimeCondition, runtimeCondition, runtime);\n            return;\n          }\n        }\n        list.push({\n          type: \"external\",\n          get module() {\n            // We need to use a getter here, because the module in the dependency\n            // could be replaced by some other process (i. e. also replaced with a\n            // concatenated module)\n            return connection.module;\n          },\n          runtimeCondition\n        });\n      }\n    };\n    existingEntries.set(rootModule, true);\n    const imports = getConcatenatedImports(rootModule);\n    for (const {\n      connection,\n      runtimeCondition\n    } of imports) enterModule(connection, runtimeCondition);\n    list.push({\n      type: \"concatenated\",\n      module: rootModule,\n      runtimeCondition: true\n    });\n    return list;\n  }\n\n  /**\n   * @param {Module} rootModule the root module of the concatenation\n   * @param {Set<Module>} modules all modules in the concatenation (including the root module)\n   * @param {Object=} associatedObjectForCache object for caching\n   * @param {string | HashConstructor=} hashFunction hash function to use\n   * @returns {string} the identifier\n   */\n  static _createIdentifier(rootModule, modules, associatedObjectForCache, hashFunction = \"md4\") {\n    const cachedMakePathsRelative = makePathsRelative.bindContextCache( /** @type {string} */rootModule.context, associatedObjectForCache);\n    let identifiers = [];\n    for (const module of modules) {\n      identifiers.push(cachedMakePathsRelative(module.identifier()));\n    }\n    identifiers.sort();\n    const hash = createHash(hashFunction);\n    hash.update(identifiers.join(\" \"));\n    return rootModule.identifier() + \"|\" + hash.digest(\"hex\");\n  }\n\n  /**\n   * @param {LazySet<string>} fileDependencies set where file dependencies are added to\n   * @param {LazySet<string>} contextDependencies set where context dependencies are added to\n   * @param {LazySet<string>} missingDependencies set where missing dependencies are added to\n   * @param {LazySet<string>} buildDependencies set where build dependencies are added to\n   */\n  addCacheDependencies(fileDependencies, contextDependencies, missingDependencies, buildDependencies) {\n    for (const module of this._modules) {\n      module.addCacheDependencies(fileDependencies, contextDependencies, missingDependencies, buildDependencies);\n    }\n  }\n\n  /**\n   * @param {CodeGenerationContext} context context for code generation\n   * @returns {CodeGenerationResult} result\n   */\n  codeGeneration({\n    dependencyTemplates,\n    runtimeTemplate,\n    moduleGraph,\n    chunkGraph,\n    runtime: generationRuntime,\n    codeGenerationResults\n  }) {\n    /** @type {Set<string>} */\n    const runtimeRequirements = new Set();\n    const runtime = intersectRuntime(generationRuntime, this._runtime);\n    const requestShortener = runtimeTemplate.requestShortener;\n    // Meta info for each module\n    const [modulesWithInfo, moduleToInfoMap] = this._getModulesWithInfo(moduleGraph, runtime);\n\n    // Set with modules that need a generated namespace object\n    /** @type {Set<ConcatenatedModuleInfo>} */\n    const neededNamespaceObjects = new Set();\n\n    // Generate source code and analyse scopes\n    // Prepare a ReplaceSource for the final source\n    for (const info of moduleToInfoMap.values()) {\n      this._analyseModule(moduleToInfoMap, info, dependencyTemplates, runtimeTemplate, moduleGraph, chunkGraph, runtime, codeGenerationResults);\n    }\n\n    // List of all used names to avoid conflicts\n    const allUsedNames = new Set(RESERVED_NAMES);\n    // Updated Top level declarations are created by renaming\n    const topLevelDeclarations = new Set();\n\n    // List of additional names in scope for module references\n    /** @type {Map<string, { usedNames: UsedNames, alreadyCheckedScopes: Set<TODO> }>} */\n    const usedNamesInScopeInfo = new Map();\n    /**\n     * @param {string} module module identifier\n     * @param {string} id export id\n     * @returns {{ usedNames: UsedNames, alreadyCheckedScopes: Set<TODO> }} info\n     */\n    const getUsedNamesInScopeInfo = (module, id) => {\n      const key = `${module}-${id}`;\n      let info = usedNamesInScopeInfo.get(key);\n      if (info === undefined) {\n        info = {\n          usedNames: new Set(),\n          alreadyCheckedScopes: new Set()\n        };\n        usedNamesInScopeInfo.set(key, info);\n      }\n      return info;\n    };\n\n    // Set of already checked scopes\n    const ignoredScopes = new Set();\n\n    // get all global names\n    for (const info of modulesWithInfo) {\n      if (info.type === \"concatenated\") {\n        // ignore symbols from moduleScope\n        if (info.moduleScope) {\n          ignoredScopes.add(info.moduleScope);\n        }\n\n        // The super class expression in class scopes behaves weird\n        // We get ranges of all super class expressions to make\n        // renaming to work correctly\n        const superClassCache = new WeakMap();\n        /**\n         * @param {Scope} scope scope\n         * @returns {TODO} result\n         */\n        const getSuperClassExpressions = scope => {\n          const cacheEntry = superClassCache.get(scope);\n          if (cacheEntry !== undefined) return cacheEntry;\n          const superClassExpressions = [];\n          for (const childScope of scope.childScopes) {\n            if (childScope.type !== \"class\") continue;\n            const block = childScope.block;\n            if ((block.type === \"ClassDeclaration\" || block.type === \"ClassExpression\") && block.superClass) {\n              superClassExpressions.push({\n                range: block.superClass.range,\n                variables: childScope.variables\n              });\n            }\n          }\n          superClassCache.set(scope, superClassExpressions);\n          return superClassExpressions;\n        };\n\n        // add global symbols\n        if (info.globalScope) {\n          for (const reference of info.globalScope.through) {\n            const name = reference.identifier.name;\n            if (ConcatenationScope.isModuleReference(name)) {\n              const match = ConcatenationScope.matchModuleReference(name);\n              if (!match) continue;\n              const referencedInfo = modulesWithInfo[match.index];\n              if (referencedInfo.type === \"reference\") throw new Error(\"Module reference can't point to a reference\");\n              const binding = getFinalBinding(moduleGraph, referencedInfo, match.ids, moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, false, /** @type {BuildMeta} */\n              info.module.buildMeta.strictHarmonyModule, true);\n              if (!binding.ids) continue;\n              const {\n                usedNames,\n                alreadyCheckedScopes\n              } = getUsedNamesInScopeInfo(binding.info.module.identifier(), \"name\" in binding ? binding.name : \"\");\n              for (const expr of getSuperClassExpressions(reference.from)) {\n                if (expr.range[0] <= /** @type {Range} */reference.identifier.range[0] && expr.range[1] >= /** @type {Range} */reference.identifier.range[1]) {\n                  for (const variable of expr.variables) {\n                    usedNames.add(variable.name);\n                  }\n                }\n              }\n              addScopeSymbols(reference.from, usedNames, alreadyCheckedScopes, ignoredScopes);\n            } else {\n              allUsedNames.add(name);\n            }\n          }\n        }\n      }\n    }\n\n    // generate names for symbols\n    for (const info of moduleToInfoMap.values()) {\n      const {\n        usedNames: namespaceObjectUsedNames\n      } = getUsedNamesInScopeInfo(info.module.identifier(), \"\");\n      switch (info.type) {\n        case \"concatenated\":\n          {\n            for (const variable of info.moduleScope.variables) {\n              const name = variable.name;\n              const {\n                usedNames,\n                alreadyCheckedScopes\n              } = getUsedNamesInScopeInfo(info.module.identifier(), name);\n              if (allUsedNames.has(name) || usedNames.has(name)) {\n                const references = getAllReferences(variable);\n                for (const ref of references) {\n                  addScopeSymbols(ref.from, usedNames, alreadyCheckedScopes, ignoredScopes);\n                }\n                const newName = this.findNewName(name, allUsedNames, usedNames, info.module.readableIdentifier(requestShortener));\n                allUsedNames.add(newName);\n                info.internalNames.set(name, newName);\n                topLevelDeclarations.add(newName);\n                const source = info.source;\n                const allIdentifiers = new Set(references.map(r => r.identifier).concat(variable.identifiers));\n                for (const identifier of allIdentifiers) {\n                  const r = /** @type {Range} */identifier.range;\n                  const path = getPathInAst(info.ast, identifier);\n                  if (path && path.length > 1) {\n                    const maybeProperty = path[1].type === \"AssignmentPattern\" && path[1].left === path[0] ? path[2] : path[1];\n                    if (maybeProperty.type === \"Property\" && maybeProperty.shorthand) {\n                      source.insert(r[1], `: ${newName}`);\n                      continue;\n                    }\n                  }\n                  source.replace(r[0], r[1] - 1, newName);\n                }\n              } else {\n                allUsedNames.add(name);\n                info.internalNames.set(name, name);\n                topLevelDeclarations.add(name);\n              }\n            }\n            let namespaceObjectName;\n            if (info.namespaceExportSymbol) {\n              namespaceObjectName = info.internalNames.get(info.namespaceExportSymbol);\n            } else {\n              namespaceObjectName = this.findNewName(\"namespaceObject\", allUsedNames, namespaceObjectUsedNames, info.module.readableIdentifier(requestShortener));\n              allUsedNames.add(namespaceObjectName);\n            }\n            info.namespaceObjectName = /** @type {string} */\n            namespaceObjectName;\n            topLevelDeclarations.add(namespaceObjectName);\n            break;\n          }\n        case \"external\":\n          {\n            const externalName = this.findNewName(\"\", allUsedNames, namespaceObjectUsedNames, info.module.readableIdentifier(requestShortener));\n            allUsedNames.add(externalName);\n            info.name = externalName;\n            topLevelDeclarations.add(externalName);\n            break;\n          }\n      }\n      const buildMeta = /** @type {BuildMeta} */info.module.buildMeta;\n      if (buildMeta.exportsType !== \"namespace\") {\n        const externalNameInterop = this.findNewName(\"namespaceObject\", allUsedNames, namespaceObjectUsedNames, info.module.readableIdentifier(requestShortener));\n        allUsedNames.add(externalNameInterop);\n        info.interopNamespaceObjectName = externalNameInterop;\n        topLevelDeclarations.add(externalNameInterop);\n      }\n      if (buildMeta.exportsType === \"default\" && buildMeta.defaultObject !== \"redirect\") {\n        const externalNameInterop = this.findNewName(\"namespaceObject2\", allUsedNames, namespaceObjectUsedNames, info.module.readableIdentifier(requestShortener));\n        allUsedNames.add(externalNameInterop);\n        info.interopNamespaceObject2Name = externalNameInterop;\n        topLevelDeclarations.add(externalNameInterop);\n      }\n      if (buildMeta.exportsType === \"dynamic\" || !buildMeta.exportsType) {\n        const externalNameInterop = this.findNewName(\"default\", allUsedNames, namespaceObjectUsedNames, info.module.readableIdentifier(requestShortener));\n        allUsedNames.add(externalNameInterop);\n        info.interopDefaultAccessName = externalNameInterop;\n        topLevelDeclarations.add(externalNameInterop);\n      }\n    }\n\n    // Find and replace references to modules\n    for (const info of moduleToInfoMap.values()) {\n      if (info.type === \"concatenated\") {\n        for (const reference of info.globalScope.through) {\n          const name = reference.identifier.name;\n          const match = ConcatenationScope.matchModuleReference(name);\n          if (match) {\n            const referencedInfo = modulesWithInfo[match.index];\n            if (referencedInfo.type === \"reference\") throw new Error(\"Module reference can't point to a reference\");\n            const finalName = getFinalName(moduleGraph, referencedInfo, match.ids, moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, match.call, !match.directImport, /** @type {BuildMeta} */\n            info.module.buildMeta.strictHarmonyModule, match.asiSafe);\n            const r = /** @type {Range} */reference.identifier.range;\n            const source = info.source;\n            // range is extended by 2 chars to cover the appended \"._\"\n            source.replace(r[0], r[1] + 1, finalName);\n          }\n        }\n      }\n    }\n\n    // Map with all root exposed used exports\n    /** @type {Map<string, function(RequestShortener): string>} */\n    const exportsMap = new Map();\n\n    // Set with all root exposed unused exports\n    /** @type {Set<string>} */\n    const unusedExports = new Set();\n    const rootInfo = /** @type {ConcatenatedModuleInfo} */\n    moduleToInfoMap.get(this.rootModule);\n    const strictHarmonyModule = /** @type {BuildMeta} */\n    rootInfo.module.buildMeta.strictHarmonyModule;\n    const exportsInfo = moduleGraph.getExportsInfo(rootInfo.module);\n    for (const exportInfo of exportsInfo.orderedExports) {\n      const name = exportInfo.name;\n      if (exportInfo.provided === false) continue;\n      const used = exportInfo.getUsedName(undefined, runtime);\n      if (!used) {\n        unusedExports.add(name);\n        continue;\n      }\n      exportsMap.set(used, requestShortener => {\n        try {\n          const finalName = getFinalName(moduleGraph, rootInfo, [name], moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, false, false, strictHarmonyModule, true);\n          return `/* ${exportInfo.isReexport() ? \"reexport\" : \"binding\"} */ ${finalName}`;\n        } catch (e) {\n          /** @type {Error} */\n          e.message += `\\nwhile generating the root export '${name}' (used name: '${used}')`;\n          throw e;\n        }\n      });\n    }\n    const result = new ConcatSource();\n\n    // add harmony compatibility flag (must be first because of possible circular dependencies)\n    if (moduleGraph.getExportsInfo(this).otherExportsInfo.getUsed(runtime) !== UsageState.Unused) {\n      result.add(`// ESM COMPAT FLAG\\n`);\n      result.add(runtimeTemplate.defineEsModuleFlagStatement({\n        exportsArgument: this.exportsArgument,\n        runtimeRequirements\n      }));\n    }\n\n    // define exports\n    if (exportsMap.size > 0) {\n      runtimeRequirements.add(RuntimeGlobals.exports);\n      runtimeRequirements.add(RuntimeGlobals.definePropertyGetters);\n      const definitions = [];\n      for (const [key, value] of exportsMap) {\n        definitions.push(`\\n  ${propertyName(key)}: ${runtimeTemplate.returningFunction(value(requestShortener))}`);\n      }\n      result.add(`\\n// EXPORTS\\n`);\n      result.add(`${RuntimeGlobals.definePropertyGetters}(${this.exportsArgument}, {${definitions.join(\",\")}\\n});\\n`);\n    }\n\n    // list unused exports\n    if (unusedExports.size > 0) {\n      result.add(`\\n// UNUSED EXPORTS: ${joinIterableWithComma(unusedExports)}\\n`);\n    }\n\n    // generate namespace objects\n    const namespaceObjectSources = new Map();\n    for (const info of neededNamespaceObjects) {\n      if (info.namespaceExportSymbol) continue;\n      const nsObj = [];\n      const exportsInfo = moduleGraph.getExportsInfo(info.module);\n      for (const exportInfo of exportsInfo.orderedExports) {\n        if (exportInfo.provided === false) continue;\n        const usedName = exportInfo.getUsedName(undefined, runtime);\n        if (usedName) {\n          const finalName = getFinalName(moduleGraph, info, [exportInfo.name], moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, false, undefined, /** @type {BuildMeta} */\n          info.module.buildMeta.strictHarmonyModule, true);\n          nsObj.push(`\\n  ${propertyName(usedName)}: ${runtimeTemplate.returningFunction(finalName)}`);\n        }\n      }\n      const name = info.namespaceObjectName;\n      const defineGetters = nsObj.length > 0 ? `${RuntimeGlobals.definePropertyGetters}(${name}, {${nsObj.join(\",\")}\\n});\\n` : \"\";\n      if (nsObj.length > 0) runtimeRequirements.add(RuntimeGlobals.definePropertyGetters);\n      namespaceObjectSources.set(info, `\n// NAMESPACE OBJECT: ${info.module.readableIdentifier(requestShortener)}\nvar ${name} = {};\n${RuntimeGlobals.makeNamespaceObject}(${name});\n${defineGetters}`);\n      runtimeRequirements.add(RuntimeGlobals.makeNamespaceObject);\n    }\n\n    // define required namespace objects (must be before evaluation modules)\n    for (const info of modulesWithInfo) {\n      if (info.type === \"concatenated\") {\n        const source = namespaceObjectSources.get(info);\n        if (!source) continue;\n        result.add(source);\n      }\n    }\n    const chunkInitFragments = [];\n\n    // evaluate modules in order\n    for (const rawInfo of modulesWithInfo) {\n      let name;\n      let isConditional = false;\n      const info = rawInfo.type === \"reference\" ? rawInfo.target : rawInfo;\n      switch (info.type) {\n        case \"concatenated\":\n          {\n            result.add(`\\n;// CONCATENATED MODULE: ${info.module.readableIdentifier(requestShortener)}\\n`);\n            result.add(info.source);\n            if (info.chunkInitFragments) {\n              for (const f of info.chunkInitFragments) chunkInitFragments.push(f);\n            }\n            if (info.runtimeRequirements) {\n              for (const r of info.runtimeRequirements) {\n                runtimeRequirements.add(r);\n              }\n            }\n            name = info.namespaceObjectName;\n            break;\n          }\n        case \"external\":\n          {\n            result.add(`\\n// EXTERNAL MODULE: ${info.module.readableIdentifier(requestShortener)}\\n`);\n            runtimeRequirements.add(RuntimeGlobals.require);\n            const {\n              runtimeCondition\n            } = /** @type {ExternalModuleInfo | ReferenceToModuleInfo} */rawInfo;\n            const condition = runtimeTemplate.runtimeConditionExpression({\n              chunkGraph,\n              runtimeCondition,\n              runtime,\n              runtimeRequirements\n            });\n            if (condition !== \"true\") {\n              isConditional = true;\n              result.add(`if (${condition}) {\\n`);\n            }\n            result.add(`var ${info.name} = ${RuntimeGlobals.require}(${JSON.stringify(chunkGraph.getModuleId(info.module))});`);\n            name = info.name;\n            break;\n          }\n        default:\n          // @ts-expect-error never is expected here\n          throw new Error(`Unsupported concatenation entry type ${info.type}`);\n      }\n      if (info.interopNamespaceObjectUsed) {\n        runtimeRequirements.add(RuntimeGlobals.createFakeNamespaceObject);\n        result.add(`\\nvar ${info.interopNamespaceObjectName} = /*#__PURE__*/${RuntimeGlobals.createFakeNamespaceObject}(${name}, 2);`);\n      }\n      if (info.interopNamespaceObject2Used) {\n        runtimeRequirements.add(RuntimeGlobals.createFakeNamespaceObject);\n        result.add(`\\nvar ${info.interopNamespaceObject2Name} = /*#__PURE__*/${RuntimeGlobals.createFakeNamespaceObject}(${name});`);\n      }\n      if (info.interopDefaultAccessUsed) {\n        runtimeRequirements.add(RuntimeGlobals.compatGetDefaultExport);\n        result.add(`\\nvar ${info.interopDefaultAccessName} = /*#__PURE__*/${RuntimeGlobals.compatGetDefaultExport}(${name});`);\n      }\n      if (isConditional) {\n        result.add(\"\\n}\");\n      }\n    }\n    const data = new Map();\n    if (chunkInitFragments.length > 0) data.set(\"chunkInitFragments\", chunkInitFragments);\n    data.set(\"topLevelDeclarations\", topLevelDeclarations);\n\n    /** @type {CodeGenerationResult} */\n    const resultEntry = {\n      sources: new Map([[\"javascript\", new CachedSource(result)]]),\n      data,\n      runtimeRequirements\n    };\n    return resultEntry;\n  }\n\n  /**\n   * @param {Map<Module, ModuleInfo>} modulesMap modulesMap\n   * @param {ModuleInfo} info info\n   * @param {DependencyTemplates} dependencyTemplates dependencyTemplates\n   * @param {RuntimeTemplate} runtimeTemplate runtimeTemplate\n   * @param {ModuleGraph} moduleGraph moduleGraph\n   * @param {ChunkGraph} chunkGraph chunkGraph\n   * @param {RuntimeSpec} runtime runtime\n   * @param {CodeGenerationResults} codeGenerationResults codeGenerationResults\n   */\n  _analyseModule(modulesMap, info, dependencyTemplates, runtimeTemplate, moduleGraph, chunkGraph, runtime, codeGenerationResults) {\n    if (info.type === \"concatenated\") {\n      const m = info.module;\n      try {\n        // Create a concatenation scope to track and capture information\n        const concatenationScope = new ConcatenationScope(modulesMap, info);\n\n        // TODO cache codeGeneration results\n        const codeGenResult = m.codeGeneration({\n          dependencyTemplates,\n          runtimeTemplate,\n          moduleGraph,\n          chunkGraph,\n          runtime,\n          concatenationScope,\n          codeGenerationResults,\n          sourceTypes: TYPES\n        });\n        const source = /** @type {Source} */\n        codeGenResult.sources.get(\"javascript\");\n        const data = codeGenResult.data;\n        const chunkInitFragments = data && data.get(\"chunkInitFragments\");\n        const code = source.source().toString();\n        let ast;\n        try {\n          ast = JavascriptParser._parse(code, {\n            sourceType: \"module\"\n          });\n        } catch (err) {\n          if (err.loc && typeof err.loc === \"object\" && typeof err.loc.line === \"number\") {\n            const lineNumber = err.loc.line;\n            const lines = code.split(\"\\n\");\n            err.message += \"\\n| \" + lines.slice(Math.max(0, lineNumber - 3), lineNumber + 2).join(\"\\n| \");\n          }\n          throw err;\n        }\n        const scopeManager = eslintScope.analyze(ast, {\n          ecmaVersion: 6,\n          sourceType: \"module\",\n          optimistic: true,\n          ignoreEval: true,\n          impliedStrict: true\n        });\n        const globalScope = /** @type {Scope} */scopeManager.acquire(ast);\n        const moduleScope = globalScope.childScopes[0];\n        const resultSource = new ReplaceSource(source);\n        info.runtimeRequirements = codeGenResult.runtimeRequirements;\n        info.ast = ast;\n        info.internalSource = source;\n        info.source = resultSource;\n        info.chunkInitFragments = chunkInitFragments;\n        info.globalScope = globalScope;\n        info.moduleScope = moduleScope;\n      } catch (err) {\n        /** @type {Error} */\n        err.message += `\\nwhile analyzing module ${m.identifier()} for concatenation`;\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * @param {ModuleGraph} moduleGraph the module graph\n   * @param {RuntimeSpec} runtime the runtime\n   * @returns {[ModuleInfoOrReference[], Map<Module, ModuleInfo>]} module info items\n   */\n  _getModulesWithInfo(moduleGraph, runtime) {\n    const orderedConcatenationList = this._createConcatenationList(this.rootModule, this._modules, runtime, moduleGraph);\n    /** @type {Map<Module, ModuleInfo>} */\n    const map = new Map();\n    const list = orderedConcatenationList.map((info, index) => {\n      let item = map.get(info.module);\n      if (item === undefined) {\n        switch (info.type) {\n          case \"concatenated\":\n            item = {\n              type: \"concatenated\",\n              module: info.module,\n              index,\n              ast: undefined,\n              internalSource: undefined,\n              runtimeRequirements: undefined,\n              source: undefined,\n              globalScope: undefined,\n              moduleScope: undefined,\n              internalNames: new Map(),\n              exportMap: undefined,\n              rawExportMap: undefined,\n              namespaceExportSymbol: undefined,\n              namespaceObjectName: undefined,\n              interopNamespaceObjectUsed: false,\n              interopNamespaceObjectName: undefined,\n              interopNamespaceObject2Used: false,\n              interopNamespaceObject2Name: undefined,\n              interopDefaultAccessUsed: false,\n              interopDefaultAccessName: undefined\n            };\n            break;\n          case \"external\":\n            item = {\n              type: \"external\",\n              module: info.module,\n              runtimeCondition: info.runtimeCondition,\n              index,\n              name: undefined,\n              interopNamespaceObjectUsed: false,\n              interopNamespaceObjectName: undefined,\n              interopNamespaceObject2Used: false,\n              interopNamespaceObject2Name: undefined,\n              interopDefaultAccessUsed: false,\n              interopDefaultAccessName: undefined\n            };\n            break;\n          default:\n            throw new Error(`Unsupported concatenation entry type ${info.type}`);\n        }\n        map.set( /** @type {ModuleInfo} */item.module, /** @type {ModuleInfo} */item);\n        return item;\n      } else {\n        /** @type {ReferenceToModuleInfo} */\n        const ref = {\n          type: \"reference\",\n          runtimeCondition: info.runtimeCondition,\n          target: item\n        };\n        return ref;\n      }\n    });\n    return [list, map];\n  }\n\n  /**\n   * @param {string} oldName old name\n   * @param {UsedNames} usedNamed1 used named 1\n   * @param {UsedNames} usedNamed2 used named 2\n   * @param {string} extraInfo extra info\n   * @returns {string} found new name\n   */\n  findNewName(oldName, usedNamed1, usedNamed2, extraInfo) {\n    let name = oldName;\n    if (name === ConcatenationScope.DEFAULT_EXPORT) {\n      name = \"\";\n    }\n    if (name === ConcatenationScope.NAMESPACE_OBJECT_EXPORT) {\n      name = \"namespaceObject\";\n    }\n\n    // Remove uncool stuff\n    extraInfo = extraInfo.replace(/\\.+\\/|(\\/index)?\\.([a-zA-Z0-9]{1,4})($|\\s|\\?)|\\s*\\+\\s*\\d+\\s*modules/g, \"\");\n    const splittedInfo = extraInfo.split(\"/\");\n    while (splittedInfo.length) {\n      name = splittedInfo.pop() + (name ? \"_\" + name : \"\");\n      const nameIdent = Template.toIdentifier(name);\n      if (!usedNamed1.has(nameIdent) && (!usedNamed2 || !usedNamed2.has(nameIdent))) return nameIdent;\n    }\n    let i = 0;\n    let nameWithNumber = Template.toIdentifier(`${name}_${i}`);\n    while (usedNamed1.has(nameWithNumber) || usedNamed2 && usedNamed2.has(nameWithNumber)) {\n      i++;\n      nameWithNumber = Template.toIdentifier(`${name}_${i}`);\n    }\n    return nameWithNumber;\n  }\n\n  /**\n   * @param {Hash} hash the hash used to track dependencies\n   * @param {UpdateHashContext} context context\n   * @returns {void}\n   */\n  updateHash(hash, context) {\n    const {\n      chunkGraph,\n      runtime\n    } = context;\n    for (const info of this._createConcatenationList(this.rootModule, this._modules, intersectRuntime(runtime, this._runtime), chunkGraph.moduleGraph)) {\n      switch (info.type) {\n        case \"concatenated\":\n          info.module.updateHash(hash, context);\n          break;\n        case \"external\":\n          hash.update(`${chunkGraph.getModuleId(info.module)}`);\n          // TODO runtimeCondition\n          break;\n      }\n    }\n    super.updateHash(hash, context);\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   * @returns {ConcatenatedModule} ConcatenatedModule\n   */\n  static deserialize(context) {\n    const obj = new ConcatenatedModule({\n      identifier: undefined,\n      rootModule: undefined,\n      modules: undefined,\n      runtime: undefined\n    });\n    obj.deserialize(context);\n    return obj;\n  }\n}\nmakeSerializable(ConcatenatedModule, \"webpack/lib/optimize/ConcatenatedModule\");\nmodule.exports = ConcatenatedModule;","map":{"version":3,"names":["eslintScope","require","Referencer","CachedSource","ConcatSource","ReplaceSource","ConcatenationScope","UsageState","Module","JAVASCRIPT_MODULE_TYPE_ESM","RuntimeGlobals","Template","HarmonyImportDependency","JavascriptParser","equals","LazySet","concatComparators","createHash","makePathsRelative","makeSerializable","propertyAccess","propertyName","filterRuntime","intersectRuntime","mergeRuntimeCondition","mergeRuntimeConditionNonFalse","runtimeConditionToString","subtractRuntimeCondition","ReferencerClass","prototype","PropertyDefinition","Property","RESERVED_NAMES","Set","DEFAULT_EXPORT","NAMESPACE_OBJECT_EXPORT","join","split","createComparator","property","comparator","a","b","compareNumbers","isNaN","bySourceOrder","byRangeStart","joinIterableWithComma","iterable","str","first","item","getFinalBinding","moduleGraph","info","exportName","moduleToInfoMap","runtime","requestShortener","runtimeTemplate","neededNamespaceObjects","asCall","strictHarmonyModule","asiSafe","alreadyVisited","exportsType","module","getExportsType","length","interopNamespaceObject2Used","rawName","interopNamespaceObject2Name","ids","interopNamespaceObjectUsed","interopNamespaceObjectName","Error","slice","exportId","interopDefaultAccessUsed","defaultExport","interopDefaultAccessName","type","add","namespaceObjectName","name","exportsInfo","getExportsInfo","exportInfo","getExportInfo","has","provided","directExport","exportMap","get","usedName","getUsedName","rawExport","rawExportMap","reexport","findTarget","readableIdentifier","Array","from","m","refInfo","export","buildMeta","namespaceExportSymbol","used","comment","toNormalComment","getFinalName","callContext","binding","reference","isPropertyAccess","internalNames","symbol","addScopeSymbols","s","nameSet","scopeSet1","scopeSet2","scope","variable","variables","upper","getAllReferences","set","references","identifiers","childScopes","innerVar","some","id","concat","getPathInAst","ast","node","nr","range","enterNode","n","undefined","r","path","push","isArray","i","enterResult","keys","Object","value","pathResult","TYPES","ConcatenatedModule","create","rootModule","modules","associatedObjectForCache","hashFunction","identifier","_createIdentifier","constructor","layer","_identifier","_modules","_runtime","factoryMeta","updateCacheModule","getSourceTypes","size","libIdent","options","nameForCondition","getSideEffectsConnectionState","build","compilation","resolver","fs","callback","moduleArgument","exportsArgument","buildInfo","strict","cacheable","fileDependencies","contextDependencies","missingDependencies","topLevelDeclarations","assets","clearDependenciesAndBlocks","clearWarningsAndErrors","d","dependencies","filter","dep","getModule","blocks","warnings","getWarnings","warning","addWarning","errors","getErrors","error","addError","assetsInfo","decl","assign","Map","key","_createConcatenationList","modulesSet","list","existingEntries","getConcatenatedImports","connections","getOutgoingConnections","c","connection","dependency","resolvedOriginModule","isTargetActive","map","sourceOrder","rangeStart","sort","referencesMap","runtimeCondition","entry","values","enterModule","existingEntry","imports","reducedRuntimeCondition","lastItem","cachedMakePathsRelative","bindContextCache","context","hash","update","digest","addCacheDependencies","buildDependencies","codeGeneration","dependencyTemplates","chunkGraph","generationRuntime","codeGenerationResults","runtimeRequirements","modulesWithInfo","_getModulesWithInfo","_analyseModule","allUsedNames","usedNamesInScopeInfo","getUsedNamesInScopeInfo","usedNames","alreadyCheckedScopes","ignoredScopes","moduleScope","superClassCache","WeakMap","getSuperClassExpressions","cacheEntry","superClassExpressions","childScope","block","superClass","globalScope","through","isModuleReference","match","matchModuleReference","referencedInfo","index","expr","namespaceObjectUsedNames","ref","newName","findNewName","source","allIdentifiers","maybeProperty","left","shorthand","insert","replace","externalName","externalNameInterop","defaultObject","finalName","call","directImport","exportsMap","unusedExports","rootInfo","orderedExports","isReexport","e","message","result","otherExportsInfo","getUsed","Unused","defineEsModuleFlagStatement","exports","definePropertyGetters","definitions","returningFunction","namespaceObjectSources","nsObj","defineGetters","makeNamespaceObject","chunkInitFragments","rawInfo","isConditional","target","f","condition","runtimeConditionExpression","JSON","stringify","getModuleId","createFakeNamespaceObject","compatGetDefaultExport","data","resultEntry","sources","modulesMap","concatenationScope","codeGenResult","sourceTypes","code","toString","_parse","sourceType","err","loc","line","lineNumber","lines","Math","max","scopeManager","analyze","ecmaVersion","optimistic","ignoreEval","impliedStrict","acquire","resultSource","internalSource","orderedConcatenationList","oldName","usedNamed1","usedNamed2","extraInfo","splittedInfo","pop","nameIdent","toIdentifier","nameWithNumber","updateHash","deserialize","obj"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/optimize/ConcatenatedModule.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst eslintScope = require(\"eslint-scope\");\nconst Referencer = require(\"eslint-scope/lib/referencer\");\nconst {\n\tCachedSource,\n\tConcatSource,\n\tReplaceSource\n} = require(\"webpack-sources\");\nconst ConcatenationScope = require(\"../ConcatenationScope\");\nconst { UsageState } = require(\"../ExportsInfo\");\nconst Module = require(\"../Module\");\nconst { JAVASCRIPT_MODULE_TYPE_ESM } = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst HarmonyImportDependency = require(\"../dependencies/HarmonyImportDependency\");\nconst JavascriptParser = require(\"../javascript/JavascriptParser\");\nconst { equals } = require(\"../util/ArrayHelpers\");\nconst LazySet = require(\"../util/LazySet\");\nconst { concatComparators } = require(\"../util/comparators\");\nconst createHash = require(\"../util/createHash\");\nconst { makePathsRelative } = require(\"../util/identifier\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst propertyAccess = require(\"../util/propertyAccess\");\nconst { propertyName } = require(\"../util/propertyName\");\nconst {\n\tfilterRuntime,\n\tintersectRuntime,\n\tmergeRuntimeCondition,\n\tmergeRuntimeConditionNonFalse,\n\truntimeConditionToString,\n\tsubtractRuntimeCondition\n} = require(\"../util/runtime\");\n\n/** @typedef {import(\"eslint-scope\").Reference} Reference */\n/** @typedef {import(\"eslint-scope\").Scope} Scope */\n/** @typedef {import(\"eslint-scope\").Variable} Variable */\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").WebpackOptionsNormalized} WebpackOptions */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"../ExportsInfo\").ExportInfo} ExportInfo */\n/** @typedef {import(\"../Module\").BuildInfo} BuildInfo */\n/** @typedef {import(\"../Module\").BuildMeta} BuildMeta */\n/** @typedef {import(\"../Module\").CodeGenerationContext} CodeGenerationContext */\n/** @typedef {import(\"../Module\").CodeGenerationResult} CodeGenerationResult */\n/** @typedef {import(\"../Module\").LibIdentOptions} LibIdentOptions */\n/** @typedef {import(\"../Module\").ReadOnlyRuntimeRequirements} ReadOnlyRuntimeRequirements */\n/** @typedef {import(\"../Module\").SourceTypes} SourceTypes */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n/** @typedef {import(\"../ResolverFactory\").ResolverWithOptions} ResolverWithOptions */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").ChunkRenderContext} ChunkRenderContext */\n/** @typedef {import(\"../javascript/JavascriptParser\").Program} Program */\n/** @typedef {import(\"../javascript/JavascriptParser\").Range} Range */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {typeof import(\"../util/Hash\")} HashConstructor */\n/** @typedef {import(\"../util/fs\").InputFileSystem} InputFileSystem */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\n/**\n * @template T\n * @typedef {import(\"../InitFragment\")<T>} InitFragment\n */\n\n/**\n * @template T\n * @typedef {import(\"../util/comparators\").Comparator<T>} Comparator\n */\n\n// fix eslint-scope to support class properties correctly\n// cspell:word Referencer\nconst ReferencerClass = /** @type {any} */ (Referencer);\nif (!ReferencerClass.prototype.PropertyDefinition) {\n\tReferencerClass.prototype.PropertyDefinition =\n\t\tReferencerClass.prototype.Property;\n}\n\n/**\n * @typedef {Object} ReexportInfo\n * @property {Module} module\n * @property {string[]} export\n */\n\n/** @typedef {RawBinding | SymbolBinding} Binding */\n\n/**\n * @typedef {Object} RawBinding\n * @property {ModuleInfo} info\n * @property {string} rawName\n * @property {string=} comment\n * @property {string[]} ids\n * @property {string[]} exportName\n */\n\n/**\n * @typedef {Object} SymbolBinding\n * @property {ConcatenatedModuleInfo} info\n * @property {string} name\n * @property {string=} comment\n * @property {string[]} ids\n * @property {string[]} exportName\n */\n\n/** @typedef {ConcatenatedModuleInfo | ExternalModuleInfo } ModuleInfo */\n/** @typedef {ConcatenatedModuleInfo | ExternalModuleInfo | ReferenceToModuleInfo } ModuleInfoOrReference */\n\n/**\n * @typedef {Object} ConcatenatedModuleInfo\n * @property {\"concatenated\"} type\n * @property {Module} module\n * @property {number} index\n * @property {Program | undefined} ast\n * @property {Source} internalSource\n * @property {ReplaceSource} source\n * @property {InitFragment<ChunkRenderContext>[]=} chunkInitFragments\n * @property {ReadOnlyRuntimeRequirements} runtimeRequirements\n * @property {Scope} globalScope\n * @property {Scope} moduleScope\n * @property {Map<string, string>} internalNames\n * @property {Map<string, string> | undefined} exportMap\n * @property {Map<string, string> | undefined} rawExportMap\n * @property {string=} namespaceExportSymbol\n * @property {string | undefined} namespaceObjectName\n * @property {boolean} interopNamespaceObjectUsed\n * @property {string | undefined} interopNamespaceObjectName\n * @property {boolean} interopNamespaceObject2Used\n * @property {string | undefined} interopNamespaceObject2Name\n * @property {boolean} interopDefaultAccessUsed\n * @property {string | undefined} interopDefaultAccessName\n */\n\n/**\n * @typedef {Object} ExternalModuleInfo\n * @property {\"external\"} type\n * @property {Module} module\n * @property {RuntimeSpec | boolean} runtimeCondition\n * @property {number} index\n * @property {string} name\n * @property {boolean} interopNamespaceObjectUsed\n * @property {string} interopNamespaceObjectName\n * @property {boolean} interopNamespaceObject2Used\n * @property {string} interopNamespaceObject2Name\n * @property {boolean} interopDefaultAccessUsed\n * @property {string} interopDefaultAccessName\n */\n\n/**\n * @typedef {Object} ReferenceToModuleInfo\n * @property {\"reference\"} type\n * @property {RuntimeSpec | boolean} runtimeCondition\n * @property {ConcatenatedModuleInfo | ExternalModuleInfo} target\n */\n\n/** @typedef {Set<string>} UsedNames */\n\nconst RESERVED_NAMES = new Set(\n\t[\n\t\t// internal names (should always be renamed)\n\t\tConcatenationScope.DEFAULT_EXPORT,\n\t\tConcatenationScope.NAMESPACE_OBJECT_EXPORT,\n\n\t\t// keywords\n\t\t\"abstract,arguments,async,await,boolean,break,byte,case,catch,char,class,const,continue\",\n\t\t\"debugger,default,delete,do,double,else,enum,eval,export,extends,false,final,finally,float\",\n\t\t\"for,function,goto,if,implements,import,in,instanceof,int,interface,let,long,native,new,null\",\n\t\t\"package,private,protected,public,return,short,static,super,switch,synchronized,this,throw\",\n\t\t\"throws,transient,true,try,typeof,var,void,volatile,while,with,yield\",\n\n\t\t// commonjs/amd\n\t\t\"module,__dirname,__filename,exports,require,define\",\n\n\t\t// js globals\n\t\t\"Array,Date,eval,function,hasOwnProperty,Infinity,isFinite,isNaN,isPrototypeOf,length,Math\",\n\t\t\"NaN,name,Number,Object,prototype,String,toString,undefined,valueOf\",\n\n\t\t// browser globals\n\t\t\"alert,all,anchor,anchors,area,assign,blur,button,checkbox,clearInterval,clearTimeout\",\n\t\t\"clientInformation,close,closed,confirm,constructor,crypto,decodeURI,decodeURIComponent\",\n\t\t\"defaultStatus,document,element,elements,embed,embeds,encodeURI,encodeURIComponent,escape\",\n\t\t\"event,fileUpload,focus,form,forms,frame,innerHeight,innerWidth,layer,layers,link,location\",\n\t\t\"mimeTypes,navigate,navigator,frames,frameRate,hidden,history,image,images,offscreenBuffering\",\n\t\t\"open,opener,option,outerHeight,outerWidth,packages,pageXOffset,pageYOffset,parent,parseFloat\",\n\t\t\"parseInt,password,pkcs11,plugin,prompt,propertyIsEnum,radio,reset,screenX,screenY,scroll\",\n\t\t\"secure,select,self,setInterval,setTimeout,status,submit,taint,text,textarea,top,unescape\",\n\t\t\"untaint,window\",\n\n\t\t// window events\n\t\t\"onblur,onclick,onerror,onfocus,onkeydown,onkeypress,onkeyup,onmouseover,onload,onmouseup,onmousedown,onsubmit\"\n\t]\n\t\t.join(\",\")\n\t\t.split(\",\")\n);\n\nconst createComparator = (property, comparator) => (a, b) =>\n\tcomparator(a[property], b[property]);\n\n/**\n * @param {number} a a\n * @param {number} b b\n * @returns {0 | 1 | -1} result\n */\nconst compareNumbers = (a, b) => {\n\tif (isNaN(a)) {\n\t\tif (!isNaN(b)) {\n\t\t\treturn 1;\n\t\t}\n\t} else {\n\t\tif (isNaN(b)) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (a !== b) {\n\t\t\treturn a < b ? -1 : 1;\n\t\t}\n\t}\n\treturn 0;\n};\nconst bySourceOrder = createComparator(\"sourceOrder\", compareNumbers);\nconst byRangeStart = createComparator(\"rangeStart\", compareNumbers);\n\n/**\n * @param {Iterable<string>} iterable iterable object\n * @returns {string} joined iterable object\n */\nconst joinIterableWithComma = iterable => {\n\t// This is more performant than Array.from().join(\", \")\n\t// as it doesn't create an array\n\tlet str = \"\";\n\tlet first = true;\n\tfor (const item of iterable) {\n\t\tif (first) {\n\t\t\tfirst = false;\n\t\t} else {\n\t\t\tstr += \", \";\n\t\t}\n\t\tstr += item;\n\t}\n\treturn str;\n};\n\n/**\n * @typedef {Object} ConcatenationEntry\n * @property {\"concatenated\" | \"external\"} type\n * @property {Module} module\n * @property {RuntimeSpec | boolean} runtimeCondition\n */\n\n/**\n * @param {ModuleGraph} moduleGraph the module graph\n * @param {ModuleInfo} info module info\n * @param {string[]} exportName exportName\n * @param {Map<Module, ModuleInfo>} moduleToInfoMap moduleToInfoMap\n * @param {RuntimeSpec} runtime for which runtime\n * @param {RequestShortener} requestShortener the request shortener\n * @param {RuntimeTemplate} runtimeTemplate the runtime template\n * @param {Set<ConcatenatedModuleInfo>} neededNamespaceObjects modules for which a namespace object should be generated\n * @param {boolean} asCall asCall\n * @param {boolean | undefined} strictHarmonyModule strictHarmonyModule\n * @param {boolean | undefined} asiSafe asiSafe\n * @param {Set<ExportInfo>} alreadyVisited alreadyVisited\n * @returns {Binding} the final variable\n */\nconst getFinalBinding = (\n\tmoduleGraph,\n\tinfo,\n\texportName,\n\tmoduleToInfoMap,\n\truntime,\n\trequestShortener,\n\truntimeTemplate,\n\tneededNamespaceObjects,\n\tasCall,\n\tstrictHarmonyModule,\n\tasiSafe,\n\talreadyVisited = new Set()\n) => {\n\tconst exportsType = info.module.getExportsType(\n\t\tmoduleGraph,\n\t\tstrictHarmonyModule\n\t);\n\tif (exportName.length === 0) {\n\t\tswitch (exportsType) {\n\t\t\tcase \"default-only\":\n\t\t\t\tinfo.interopNamespaceObject2Used = true;\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: /** @type {string} */ (info.interopNamespaceObject2Name),\n\t\t\t\t\tids: exportName,\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\tcase \"default-with-named\":\n\t\t\t\tinfo.interopNamespaceObjectUsed = true;\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: /** @type {string} */ (info.interopNamespaceObjectName),\n\t\t\t\t\tids: exportName,\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\tcase \"namespace\":\n\t\t\tcase \"dynamic\":\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected exportsType ${exportsType}`);\n\t\t}\n\t} else {\n\t\tswitch (exportsType) {\n\t\t\tcase \"namespace\":\n\t\t\t\tbreak;\n\t\t\tcase \"default-with-named\":\n\t\t\t\tswitch (exportName[0]) {\n\t\t\t\t\tcase \"default\":\n\t\t\t\t\t\texportName = exportName.slice(1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"__esModule\":\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tinfo,\n\t\t\t\t\t\t\trawName: \"/* __esModule */true\",\n\t\t\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\t\t\texportName\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"default-only\": {\n\t\t\t\tconst exportId = exportName[0];\n\t\t\t\tif (exportId === \"__esModule\") {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tinfo,\n\t\t\t\t\t\trawName: \"/* __esModule */true\",\n\t\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\t\texportName\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\texportName = exportName.slice(1);\n\t\t\t\tif (exportId !== \"default\") {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tinfo,\n\t\t\t\t\t\trawName:\n\t\t\t\t\t\t\t\"/* non-default import from default-exporting module */undefined\",\n\t\t\t\t\t\tids: exportName,\n\t\t\t\t\t\texportName\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"dynamic\":\n\t\t\t\tswitch (exportName[0]) {\n\t\t\t\t\tcase \"default\": {\n\t\t\t\t\t\texportName = exportName.slice(1);\n\t\t\t\t\t\tinfo.interopDefaultAccessUsed = true;\n\t\t\t\t\t\tconst defaultExport = asCall\n\t\t\t\t\t\t\t? `${info.interopDefaultAccessName}()`\n\t\t\t\t\t\t\t: asiSafe\n\t\t\t\t\t\t\t\t? `(${info.interopDefaultAccessName}())`\n\t\t\t\t\t\t\t\t: asiSafe === false\n\t\t\t\t\t\t\t\t\t? `;(${info.interopDefaultAccessName}())`\n\t\t\t\t\t\t\t\t\t: `${info.interopDefaultAccessName}.a`;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tinfo,\n\t\t\t\t\t\t\trawName: defaultExport,\n\t\t\t\t\t\t\tids: exportName,\n\t\t\t\t\t\t\texportName\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tcase \"__esModule\":\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tinfo,\n\t\t\t\t\t\t\trawName: \"/* __esModule */true\",\n\t\t\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\t\t\texportName\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected exportsType ${exportsType}`);\n\t\t}\n\t}\n\tif (exportName.length === 0) {\n\t\tswitch (info.type) {\n\t\t\tcase \"concatenated\":\n\t\t\t\tneededNamespaceObjects.add(info);\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: /** @type {string} */ (info.namespaceObjectName),\n\t\t\t\t\tids: exportName,\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\tcase \"external\":\n\t\t\t\treturn { info, rawName: info.name, ids: exportName, exportName };\n\t\t}\n\t}\n\tconst exportsInfo = moduleGraph.getExportsInfo(info.module);\n\tconst exportInfo = exportsInfo.getExportInfo(exportName[0]);\n\tif (alreadyVisited.has(exportInfo)) {\n\t\treturn {\n\t\t\tinfo,\n\t\t\trawName: \"/* circular reexport */ Object(function x() { x() }())\",\n\t\t\tids: [],\n\t\t\texportName\n\t\t};\n\t}\n\talreadyVisited.add(exportInfo);\n\tswitch (info.type) {\n\t\tcase \"concatenated\": {\n\t\t\tconst exportId = exportName[0];\n\t\t\tif (exportInfo.provided === false) {\n\t\t\t\t// It's not provided, but it could be on the prototype\n\t\t\t\tneededNamespaceObjects.add(info);\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: /** @type {string} */ (info.namespaceObjectName),\n\t\t\t\t\tids: exportName,\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst directExport = info.exportMap && info.exportMap.get(exportId);\n\t\t\tif (directExport) {\n\t\t\t\tconst usedName = /** @type {string[]} */ (\n\t\t\t\t\texportsInfo.getUsedName(exportName, runtime)\n\t\t\t\t);\n\t\t\t\tif (!usedName) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tinfo,\n\t\t\t\t\t\trawName: \"/* unused export */ undefined\",\n\t\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\t\texportName\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\tname: directExport,\n\t\t\t\t\tids: usedName.slice(1),\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst rawExport = info.rawExportMap && info.rawExportMap.get(exportId);\n\t\t\tif (rawExport) {\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: rawExport,\n\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst reexport = exportInfo.findTarget(moduleGraph, module =>\n\t\t\t\tmoduleToInfoMap.has(module)\n\t\t\t);\n\t\t\tif (reexport === false) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Target module of reexport from '${info.module.readableIdentifier(\n\t\t\t\t\t\trequestShortener\n\t\t\t\t\t)}' is not part of the concatenation (export '${exportId}')\\nModules in the concatenation:\\n${Array.from(\n\t\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\t\t([m, info]) =>\n\t\t\t\t\t\t\t` * ${info.type} ${m.readableIdentifier(requestShortener)}`\n\t\t\t\t\t).join(\"\\n\")}`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (reexport) {\n\t\t\t\tconst refInfo = moduleToInfoMap.get(reexport.module);\n\t\t\t\treturn getFinalBinding(\n\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t/** @type {ModuleInfo} */ (refInfo),\n\t\t\t\t\treexport.export\n\t\t\t\t\t\t? [...reexport.export, ...exportName.slice(1)]\n\t\t\t\t\t\t: exportName.slice(1),\n\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\truntime,\n\t\t\t\t\trequestShortener,\n\t\t\t\t\truntimeTemplate,\n\t\t\t\t\tneededNamespaceObjects,\n\t\t\t\t\tasCall,\n\t\t\t\t\t/** @type {BuildMeta} */\n\t\t\t\t\t(info.module.buildMeta).strictHarmonyModule,\n\t\t\t\t\tasiSafe,\n\t\t\t\t\talreadyVisited\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (info.namespaceExportSymbol) {\n\t\t\t\tconst usedName = /** @type {string[]} */ (\n\t\t\t\t\texportsInfo.getUsedName(exportName, runtime)\n\t\t\t\t);\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: /** @type {string} */ (info.namespaceObjectName),\n\t\t\t\t\tids: usedName,\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\t}\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot get final name for export '${exportName.join(\n\t\t\t\t\t\".\"\n\t\t\t\t)}' of ${info.module.readableIdentifier(requestShortener)}`\n\t\t\t);\n\t\t}\n\n\t\tcase \"external\": {\n\t\t\tconst used = /** @type {string[]} */ (\n\t\t\t\texportsInfo.getUsedName(exportName, runtime)\n\t\t\t);\n\t\t\tif (!used) {\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: \"/* unused export */ undefined\",\n\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst comment = equals(used, exportName)\n\t\t\t\t? \"\"\n\t\t\t\t: Template.toNormalComment(`${exportName.join(\".\")}`);\n\t\t\treturn { info, rawName: info.name + comment, ids: used, exportName };\n\t\t}\n\t}\n};\n\n/**\n * @param {ModuleGraph} moduleGraph the module graph\n * @param {ModuleInfo} info module info\n * @param {string[]} exportName exportName\n * @param {Map<Module, ModuleInfo>} moduleToInfoMap moduleToInfoMap\n * @param {RuntimeSpec} runtime for which runtime\n * @param {RequestShortener} requestShortener the request shortener\n * @param {RuntimeTemplate} runtimeTemplate the runtime template\n * @param {Set<ConcatenatedModuleInfo>} neededNamespaceObjects modules for which a namespace object should be generated\n * @param {boolean} asCall asCall\n * @param {boolean | undefined} callContext callContext\n * @param {boolean | undefined} strictHarmonyModule strictHarmonyModule\n * @param {boolean | undefined} asiSafe asiSafe\n * @returns {string} the final name\n */\nconst getFinalName = (\n\tmoduleGraph,\n\tinfo,\n\texportName,\n\tmoduleToInfoMap,\n\truntime,\n\trequestShortener,\n\truntimeTemplate,\n\tneededNamespaceObjects,\n\tasCall,\n\tcallContext,\n\tstrictHarmonyModule,\n\tasiSafe\n) => {\n\tconst binding = getFinalBinding(\n\t\tmoduleGraph,\n\t\tinfo,\n\t\texportName,\n\t\tmoduleToInfoMap,\n\t\truntime,\n\t\trequestShortener,\n\t\truntimeTemplate,\n\t\tneededNamespaceObjects,\n\t\tasCall,\n\t\tstrictHarmonyModule,\n\t\tasiSafe\n\t);\n\t{\n\t\tconst { ids, comment } = binding;\n\t\tlet reference;\n\t\tlet isPropertyAccess;\n\t\tif (\"rawName\" in binding) {\n\t\t\treference = `${binding.rawName}${comment || \"\"}${propertyAccess(ids)}`;\n\t\t\tisPropertyAccess = ids.length > 0;\n\t\t} else {\n\t\t\tconst { info, name: exportId } = binding;\n\t\t\tconst name = info.internalNames.get(exportId);\n\t\t\tif (!name) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`The export \"${exportId}\" in \"${info.module.readableIdentifier(\n\t\t\t\t\t\trequestShortener\n\t\t\t\t\t)}\" has no internal name (existing names: ${\n\t\t\t\t\t\tArray.from(\n\t\t\t\t\t\t\tinfo.internalNames,\n\t\t\t\t\t\t\t([name, symbol]) => `${name}: ${symbol}`\n\t\t\t\t\t\t).join(\", \") || \"none\"\n\t\t\t\t\t})`\n\t\t\t\t);\n\t\t\t}\n\t\t\treference = `${name}${comment || \"\"}${propertyAccess(ids)}`;\n\t\t\tisPropertyAccess = ids.length > 1;\n\t\t}\n\t\tif (isPropertyAccess && asCall && callContext === false) {\n\t\t\treturn asiSafe\n\t\t\t\t? `(0,${reference})`\n\t\t\t\t: asiSafe === false\n\t\t\t\t\t? `;(0,${reference})`\n\t\t\t\t\t: `/*#__PURE__*/Object(${reference})`;\n\t\t}\n\t\treturn reference;\n\t}\n};\n\n/**\n * @param {Scope | null} s scope\n * @param {UsedNames} nameSet name set\n * @param {TODO} scopeSet1 scope set 1\n * @param {TODO} scopeSet2 scope set 2\n */\nconst addScopeSymbols = (s, nameSet, scopeSet1, scopeSet2) => {\n\tlet scope = s;\n\twhile (scope) {\n\t\tif (scopeSet1.has(scope)) break;\n\t\tif (scopeSet2.has(scope)) break;\n\t\tscopeSet1.add(scope);\n\t\tfor (const variable of scope.variables) {\n\t\t\tnameSet.add(variable.name);\n\t\t}\n\t\tscope = scope.upper;\n\t}\n};\n\n/**\n * @param {Variable} variable variable\n * @returns {Reference[]} references\n */\nconst getAllReferences = variable => {\n\tlet set = variable.references;\n\t// Look for inner scope variables too (like in class Foo { t() { Foo } })\n\tconst identifiers = new Set(variable.identifiers);\n\tfor (const scope of variable.scope.childScopes) {\n\t\tfor (const innerVar of scope.variables) {\n\t\t\tif (innerVar.identifiers.some(id => identifiers.has(id))) {\n\t\t\t\tset = set.concat(innerVar.references);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn set;\n};\n\n/**\n * @param {TODO} ast ast\n * @param {TODO} node node\n * @returns {TODO} result\n */\nconst getPathInAst = (ast, node) => {\n\tif (ast === node) {\n\t\treturn [];\n\t}\n\n\tconst nr = node.range;\n\n\tconst enterNode = n => {\n\t\tif (!n) return undefined;\n\t\tconst r = n.range;\n\t\tif (r) {\n\t\t\tif (r[0] <= nr[0] && r[1] >= nr[1]) {\n\t\t\t\tconst path = getPathInAst(n, node);\n\t\t\t\tif (path) {\n\t\t\t\t\tpath.push(n);\n\t\t\t\t\treturn path;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t};\n\n\tif (Array.isArray(ast)) {\n\t\tfor (let i = 0; i < ast.length; i++) {\n\t\t\tconst enterResult = enterNode(ast[i]);\n\t\t\tif (enterResult !== undefined) return enterResult;\n\t\t}\n\t} else if (ast && typeof ast === \"object\") {\n\t\tconst keys = Object.keys(ast);\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst value = ast[keys[i]];\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tconst pathResult = getPathInAst(value, node);\n\t\t\t\tif (pathResult !== undefined) return pathResult;\n\t\t\t} else if (value && typeof value === \"object\") {\n\t\t\t\tconst enterResult = enterNode(value);\n\t\t\t\tif (enterResult !== undefined) return enterResult;\n\t\t\t}\n\t\t}\n\t}\n};\n\nconst TYPES = new Set([\"javascript\"]);\n\nclass ConcatenatedModule extends Module {\n\t/**\n\t * @param {Module} rootModule the root module of the concatenation\n\t * @param {Set<Module>} modules all modules in the concatenation (including the root module)\n\t * @param {RuntimeSpec} runtime the runtime\n\t * @param {Object=} associatedObjectForCache object for caching\n\t * @param {string | HashConstructor=} hashFunction hash function to use\n\t * @returns {ConcatenatedModule} the module\n\t */\n\tstatic create(\n\t\trootModule,\n\t\tmodules,\n\t\truntime,\n\t\tassociatedObjectForCache,\n\t\thashFunction = \"md4\"\n\t) {\n\t\tconst identifier = ConcatenatedModule._createIdentifier(\n\t\t\trootModule,\n\t\t\tmodules,\n\t\t\tassociatedObjectForCache,\n\t\t\thashFunction\n\t\t);\n\t\treturn new ConcatenatedModule({\n\t\t\tidentifier,\n\t\t\trootModule,\n\t\t\tmodules,\n\t\t\truntime\n\t\t});\n\t}\n\n\t/**\n\t * @param {Object} options options\n\t * @param {string} options.identifier the identifier of the module\n\t * @param {Module=} options.rootModule the root module of the concatenation\n\t * @param {RuntimeSpec} options.runtime the selected runtime\n\t * @param {Set<Module>=} options.modules all concatenated modules\n\t */\n\tconstructor({ identifier, rootModule, modules, runtime }) {\n\t\tsuper(JAVASCRIPT_MODULE_TYPE_ESM, null, rootModule && rootModule.layer);\n\n\t\t// Info from Factory\n\t\t/** @type {string} */\n\t\tthis._identifier = identifier;\n\t\t/** @type {Module} */\n\t\tthis.rootModule = rootModule;\n\t\t/** @type {Set<Module>} */\n\t\tthis._modules = modules;\n\t\tthis._runtime = runtime;\n\t\tthis.factoryMeta = rootModule && rootModule.factoryMeta;\n\t}\n\n\t/**\n\t * Assuming this module is in the cache. Update the (cached) module with\n\t * the fresh module from the factory. Usually updates internal references\n\t * and properties.\n\t * @param {Module} module fresh module\n\t * @returns {void}\n\t */\n\tupdateCacheModule(module) {\n\t\tthrow new Error(\"Must not be called\");\n\t}\n\n\t/**\n\t * @returns {SourceTypes} types available (do not mutate)\n\t */\n\tgetSourceTypes() {\n\t\treturn TYPES;\n\t}\n\n\tget modules() {\n\t\treturn Array.from(this._modules);\n\t}\n\n\t/**\n\t * @returns {string} a unique identifier of the module\n\t */\n\tidentifier() {\n\t\treturn this._identifier;\n\t}\n\n\t/**\n\t * @param {RequestShortener} requestShortener the request shortener\n\t * @returns {string} a user readable identifier of the module\n\t */\n\treadableIdentifier(requestShortener) {\n\t\treturn (\n\t\t\tthis.rootModule.readableIdentifier(requestShortener) +\n\t\t\t` + ${this._modules.size - 1} modules`\n\t\t);\n\t}\n\n\t/**\n\t * @param {LibIdentOptions} options options\n\t * @returns {string | null} an identifier for library inclusion\n\t */\n\tlibIdent(options) {\n\t\treturn this.rootModule.libIdent(options);\n\t}\n\n\t/**\n\t * @returns {string | null} absolute path which should be used for condition matching (usually the resource path)\n\t */\n\tnameForCondition() {\n\t\treturn this.rootModule.nameForCondition();\n\t}\n\n\t/**\n\t * @param {ModuleGraph} moduleGraph the module graph\n\t * @returns {ConnectionState} how this module should be connected to referencing modules when consumed for side-effects only\n\t */\n\tgetSideEffectsConnectionState(moduleGraph) {\n\t\treturn this.rootModule.getSideEffectsConnectionState(moduleGraph);\n\t}\n\n\t/**\n\t * @param {WebpackOptions} options webpack options\n\t * @param {Compilation} compilation the compilation\n\t * @param {ResolverWithOptions} resolver the resolver\n\t * @param {InputFileSystem} fs the file system\n\t * @param {function(WebpackError=): void} callback callback function\n\t * @returns {void}\n\t */\n\tbuild(options, compilation, resolver, fs, callback) {\n\t\tconst { rootModule } = this;\n\t\tconst { moduleArgument, exportsArgument } =\n\t\t\t/** @type {BuildInfo} */\n\t\t\t(rootModule.buildInfo);\n\t\tthis.buildInfo = {\n\t\t\tstrict: true,\n\t\t\tcacheable: true,\n\t\t\tmoduleArgument,\n\t\t\texportsArgument,\n\t\t\tfileDependencies: new LazySet(),\n\t\t\tcontextDependencies: new LazySet(),\n\t\t\tmissingDependencies: new LazySet(),\n\t\t\ttopLevelDeclarations: new Set(),\n\t\t\tassets: undefined\n\t\t};\n\t\tthis.buildMeta = rootModule.buildMeta;\n\t\tthis.clearDependenciesAndBlocks();\n\t\tthis.clearWarningsAndErrors();\n\n\t\tfor (const m of this._modules) {\n\t\t\t// populate cacheable\n\t\t\tif (!(/** @type {BuildInfo} */ (m.buildInfo).cacheable)) {\n\t\t\t\tthis.buildInfo.cacheable = false;\n\t\t\t}\n\n\t\t\t// populate dependencies\n\t\t\tfor (const d of m.dependencies.filter(\n\t\t\t\tdep =>\n\t\t\t\t\t!(dep instanceof HarmonyImportDependency) ||\n\t\t\t\t\t!this._modules.has(\n\t\t\t\t\t\t/** @type {Module} */ (compilation.moduleGraph.getModule(dep))\n\t\t\t\t\t)\n\t\t\t)) {\n\t\t\t\tthis.dependencies.push(d);\n\t\t\t}\n\t\t\t// populate blocks\n\t\t\tfor (const d of m.blocks) {\n\t\t\t\tthis.blocks.push(d);\n\t\t\t}\n\n\t\t\t// populate warnings\n\t\t\tconst warnings = m.getWarnings();\n\t\t\tif (warnings !== undefined) {\n\t\t\t\tfor (const warning of warnings) {\n\t\t\t\t\tthis.addWarning(warning);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// populate errors\n\t\t\tconst errors = m.getErrors();\n\t\t\tif (errors !== undefined) {\n\t\t\t\tfor (const error of errors) {\n\t\t\t\t\tthis.addError(error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst { assets, assetsInfo, topLevelDeclarations } =\n\t\t\t\t/** @type {BuildInfo} */ (m.buildInfo);\n\n\t\t\t// populate topLevelDeclarations\n\t\t\tif (topLevelDeclarations) {\n\t\t\t\tconst topLevelDeclarations = this.buildInfo.topLevelDeclarations;\n\t\t\t\tif (topLevelDeclarations !== undefined) {\n\t\t\t\t\tfor (const decl of topLevelDeclarations) {\n\t\t\t\t\t\ttopLevelDeclarations.add(decl);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.buildInfo.topLevelDeclarations = undefined;\n\t\t\t}\n\n\t\t\t// populate assets\n\t\t\tif (assets) {\n\t\t\t\tif (this.buildInfo.assets === undefined) {\n\t\t\t\t\tthis.buildInfo.assets = Object.create(null);\n\t\t\t\t}\n\t\t\t\tObject.assign(/** @type {BuildInfo} */ (this.buildInfo).assets, assets);\n\t\t\t}\n\t\t\tif (assetsInfo) {\n\t\t\t\tif (this.buildInfo.assetsInfo === undefined) {\n\t\t\t\t\tthis.buildInfo.assetsInfo = new Map();\n\t\t\t\t}\n\t\t\t\tfor (const [key, value] of assetsInfo) {\n\t\t\t\t\tthis.buildInfo.assetsInfo.set(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcallback();\n\t}\n\n\t/**\n\t * @param {string=} type the source type for which the size should be estimated\n\t * @returns {number} the estimated size of the module (must be non-zero)\n\t */\n\tsize(type) {\n\t\t// Guess size from embedded modules\n\t\tlet size = 0;\n\t\tfor (const module of this._modules) {\n\t\t\tsize += module.size(type);\n\t\t}\n\t\treturn size;\n\t}\n\n\t/**\n\t * @private\n\t * @param {Module} rootModule the root of the concatenation\n\t * @param {Set<Module>} modulesSet a set of modules which should be concatenated\n\t * @param {RuntimeSpec} runtime for this runtime\n\t * @param {ModuleGraph} moduleGraph the module graph\n\t * @returns {ConcatenationEntry[]} concatenation list\n\t */\n\t_createConcatenationList(rootModule, modulesSet, runtime, moduleGraph) {\n\t\t/** @type {ConcatenationEntry[]} */\n\t\tconst list = [];\n\t\t/** @type {Map<Module, RuntimeSpec | true>} */\n\t\tconst existingEntries = new Map();\n\n\t\t/**\n\t\t * @param {Module} module a module\n\t\t * @returns {Iterable<{ connection: ModuleGraphConnection, runtimeCondition: RuntimeSpec | true }>} imported modules in order\n\t\t */\n\t\tconst getConcatenatedImports = module => {\n\t\t\tlet connections = Array.from(moduleGraph.getOutgoingConnections(module));\n\t\t\tif (module === rootModule) {\n\t\t\t\tfor (const c of moduleGraph.getOutgoingConnections(this))\n\t\t\t\t\tconnections.push(c);\n\t\t\t}\n\t\t\t/**\n\t\t\t * @type {Array<{ connection: ModuleGraphConnection, sourceOrder: number, rangeStart: number }>}\n\t\t\t */\n\t\t\tconst references = connections\n\t\t\t\t.filter(connection => {\n\t\t\t\t\tif (!(connection.dependency instanceof HarmonyImportDependency))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn (\n\t\t\t\t\t\tconnection &&\n\t\t\t\t\t\tconnection.resolvedOriginModule === module &&\n\t\t\t\t\t\tconnection.module &&\n\t\t\t\t\t\tconnection.isTargetActive(runtime)\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.map(connection => {\n\t\t\t\t\tconst dep = /** @type {HarmonyImportDependency} */ (\n\t\t\t\t\t\tconnection.dependency\n\t\t\t\t\t);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tconnection,\n\t\t\t\t\t\tsourceOrder: dep.sourceOrder,\n\t\t\t\t\t\trangeStart: dep.range && dep.range[0]\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t/**\n\t\t\t * bySourceOrder\n\t\t\t * @example\n\t\t\t * import a from \"a\"; // sourceOrder=1\n\t\t\t * import b from \"b\"; // sourceOrder=2\n\t\t\t *\n\t\t\t * byRangeStart\n\t\t\t * @example\n\t\t\t * import {a, b} from \"a\"; // sourceOrder=1\n\t\t\t * a.a(); // first range\n\t\t\t * b.b(); // second range\n\t\t\t *\n\t\t\t * If there is no reexport, we have the same source.\n\t\t\t * If there is reexport, but module has side effects, this will lead to reexport module only.\n\t\t\t * If there is side-effects-free reexport, we can get simple deterministic result with range start comparison.\n\t\t\t */\n\t\t\treferences.sort(concatComparators(bySourceOrder, byRangeStart));\n\t\t\t/** @type {Map<Module, { connection: ModuleGraphConnection, runtimeCondition: RuntimeSpec | true }>} */\n\t\t\tconst referencesMap = new Map();\n\t\t\tfor (const { connection } of references) {\n\t\t\t\tconst runtimeCondition = filterRuntime(runtime, r =>\n\t\t\t\t\tconnection.isTargetActive(r)\n\t\t\t\t);\n\t\t\t\tif (runtimeCondition === false) continue;\n\t\t\t\tconst module = connection.module;\n\t\t\t\tconst entry = referencesMap.get(module);\n\t\t\t\tif (entry === undefined) {\n\t\t\t\t\treferencesMap.set(module, { connection, runtimeCondition });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tentry.runtimeCondition = mergeRuntimeConditionNonFalse(\n\t\t\t\t\tentry.runtimeCondition,\n\t\t\t\t\truntimeCondition,\n\t\t\t\t\truntime\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn referencesMap.values();\n\t\t};\n\n\t\t/**\n\t\t * @param {ModuleGraphConnection} connection graph connection\n\t\t * @param {RuntimeSpec | true} runtimeCondition runtime condition\n\t\t * @returns {void}\n\t\t */\n\t\tconst enterModule = (connection, runtimeCondition) => {\n\t\t\tconst module = connection.module;\n\t\t\tif (!module) return;\n\t\t\tconst existingEntry = existingEntries.get(module);\n\t\t\tif (existingEntry === true) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (modulesSet.has(module)) {\n\t\t\t\texistingEntries.set(module, true);\n\t\t\t\tif (runtimeCondition !== true) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Cannot runtime-conditional concatenate a module (${module.identifier()} in ${this.rootModule.identifier()}, ${runtimeConditionToString(\n\t\t\t\t\t\t\truntimeCondition\n\t\t\t\t\t\t)}). This should not happen.`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconst imports = getConcatenatedImports(module);\n\t\t\t\tfor (const { connection, runtimeCondition } of imports)\n\t\t\t\t\tenterModule(connection, runtimeCondition);\n\t\t\t\tlist.push({\n\t\t\t\t\ttype: \"concatenated\",\n\t\t\t\t\tmodule: connection.module,\n\t\t\t\t\truntimeCondition\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (existingEntry !== undefined) {\n\t\t\t\t\tconst reducedRuntimeCondition = subtractRuntimeCondition(\n\t\t\t\t\t\truntimeCondition,\n\t\t\t\t\t\texistingEntry,\n\t\t\t\t\t\truntime\n\t\t\t\t\t);\n\t\t\t\t\tif (reducedRuntimeCondition === false) return;\n\t\t\t\t\truntimeCondition = reducedRuntimeCondition;\n\t\t\t\t\texistingEntries.set(\n\t\t\t\t\t\tconnection.module,\n\t\t\t\t\t\tmergeRuntimeConditionNonFalse(\n\t\t\t\t\t\t\texistingEntry,\n\t\t\t\t\t\t\truntimeCondition,\n\t\t\t\t\t\t\truntime\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\texistingEntries.set(connection.module, runtimeCondition);\n\t\t\t\t}\n\t\t\t\tif (list.length > 0) {\n\t\t\t\t\tconst lastItem = list[list.length - 1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tlastItem.type === \"external\" &&\n\t\t\t\t\t\tlastItem.module === connection.module\n\t\t\t\t\t) {\n\t\t\t\t\t\tlastItem.runtimeCondition = mergeRuntimeCondition(\n\t\t\t\t\t\t\tlastItem.runtimeCondition,\n\t\t\t\t\t\t\truntimeCondition,\n\t\t\t\t\t\t\truntime\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlist.push({\n\t\t\t\t\ttype: \"external\",\n\t\t\t\t\tget module() {\n\t\t\t\t\t\t// We need to use a getter here, because the module in the dependency\n\t\t\t\t\t\t// could be replaced by some other process (i. e. also replaced with a\n\t\t\t\t\t\t// concatenated module)\n\t\t\t\t\t\treturn connection.module;\n\t\t\t\t\t},\n\t\t\t\t\truntimeCondition\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\texistingEntries.set(rootModule, true);\n\t\tconst imports = getConcatenatedImports(rootModule);\n\t\tfor (const { connection, runtimeCondition } of imports)\n\t\t\tenterModule(connection, runtimeCondition);\n\t\tlist.push({\n\t\t\ttype: \"concatenated\",\n\t\t\tmodule: rootModule,\n\t\t\truntimeCondition: true\n\t\t});\n\n\t\treturn list;\n\t}\n\n\t/**\n\t * @param {Module} rootModule the root module of the concatenation\n\t * @param {Set<Module>} modules all modules in the concatenation (including the root module)\n\t * @param {Object=} associatedObjectForCache object for caching\n\t * @param {string | HashConstructor=} hashFunction hash function to use\n\t * @returns {string} the identifier\n\t */\n\tstatic _createIdentifier(\n\t\trootModule,\n\t\tmodules,\n\t\tassociatedObjectForCache,\n\t\thashFunction = \"md4\"\n\t) {\n\t\tconst cachedMakePathsRelative = makePathsRelative.bindContextCache(\n\t\t\t/** @type {string} */ (rootModule.context),\n\t\t\tassociatedObjectForCache\n\t\t);\n\t\tlet identifiers = [];\n\t\tfor (const module of modules) {\n\t\t\tidentifiers.push(cachedMakePathsRelative(module.identifier()));\n\t\t}\n\t\tidentifiers.sort();\n\t\tconst hash = createHash(hashFunction);\n\t\thash.update(identifiers.join(\" \"));\n\t\treturn rootModule.identifier() + \"|\" + hash.digest(\"hex\");\n\t}\n\n\t/**\n\t * @param {LazySet<string>} fileDependencies set where file dependencies are added to\n\t * @param {LazySet<string>} contextDependencies set where context dependencies are added to\n\t * @param {LazySet<string>} missingDependencies set where missing dependencies are added to\n\t * @param {LazySet<string>} buildDependencies set where build dependencies are added to\n\t */\n\taddCacheDependencies(\n\t\tfileDependencies,\n\t\tcontextDependencies,\n\t\tmissingDependencies,\n\t\tbuildDependencies\n\t) {\n\t\tfor (const module of this._modules) {\n\t\t\tmodule.addCacheDependencies(\n\t\t\t\tfileDependencies,\n\t\t\t\tcontextDependencies,\n\t\t\t\tmissingDependencies,\n\t\t\t\tbuildDependencies\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {CodeGenerationContext} context context for code generation\n\t * @returns {CodeGenerationResult} result\n\t */\n\tcodeGeneration({\n\t\tdependencyTemplates,\n\t\truntimeTemplate,\n\t\tmoduleGraph,\n\t\tchunkGraph,\n\t\truntime: generationRuntime,\n\t\tcodeGenerationResults\n\t}) {\n\t\t/** @type {Set<string>} */\n\t\tconst runtimeRequirements = new Set();\n\t\tconst runtime = intersectRuntime(generationRuntime, this._runtime);\n\n\t\tconst requestShortener = runtimeTemplate.requestShortener;\n\t\t// Meta info for each module\n\t\tconst [modulesWithInfo, moduleToInfoMap] = this._getModulesWithInfo(\n\t\t\tmoduleGraph,\n\t\t\truntime\n\t\t);\n\n\t\t// Set with modules that need a generated namespace object\n\t\t/** @type {Set<ConcatenatedModuleInfo>} */\n\t\tconst neededNamespaceObjects = new Set();\n\n\t\t// Generate source code and analyse scopes\n\t\t// Prepare a ReplaceSource for the final source\n\t\tfor (const info of moduleToInfoMap.values()) {\n\t\t\tthis._analyseModule(\n\t\t\t\tmoduleToInfoMap,\n\t\t\t\tinfo,\n\t\t\t\tdependencyTemplates,\n\t\t\t\truntimeTemplate,\n\t\t\t\tmoduleGraph,\n\t\t\t\tchunkGraph,\n\t\t\t\truntime,\n\t\t\t\tcodeGenerationResults\n\t\t\t);\n\t\t}\n\n\t\t// List of all used names to avoid conflicts\n\t\tconst allUsedNames = new Set(RESERVED_NAMES);\n\t\t// Updated Top level declarations are created by renaming\n\t\tconst topLevelDeclarations = new Set();\n\n\t\t// List of additional names in scope for module references\n\t\t/** @type {Map<string, { usedNames: UsedNames, alreadyCheckedScopes: Set<TODO> }>} */\n\t\tconst usedNamesInScopeInfo = new Map();\n\t\t/**\n\t\t * @param {string} module module identifier\n\t\t * @param {string} id export id\n\t\t * @returns {{ usedNames: UsedNames, alreadyCheckedScopes: Set<TODO> }} info\n\t\t */\n\t\tconst getUsedNamesInScopeInfo = (module, id) => {\n\t\t\tconst key = `${module}-${id}`;\n\t\t\tlet info = usedNamesInScopeInfo.get(key);\n\t\t\tif (info === undefined) {\n\t\t\t\tinfo = {\n\t\t\t\t\tusedNames: new Set(),\n\t\t\t\t\talreadyCheckedScopes: new Set()\n\t\t\t\t};\n\t\t\t\tusedNamesInScopeInfo.set(key, info);\n\t\t\t}\n\t\t\treturn info;\n\t\t};\n\n\t\t// Set of already checked scopes\n\t\tconst ignoredScopes = new Set();\n\n\t\t// get all global names\n\t\tfor (const info of modulesWithInfo) {\n\t\t\tif (info.type === \"concatenated\") {\n\t\t\t\t// ignore symbols from moduleScope\n\t\t\t\tif (info.moduleScope) {\n\t\t\t\t\tignoredScopes.add(info.moduleScope);\n\t\t\t\t}\n\n\t\t\t\t// The super class expression in class scopes behaves weird\n\t\t\t\t// We get ranges of all super class expressions to make\n\t\t\t\t// renaming to work correctly\n\t\t\t\tconst superClassCache = new WeakMap();\n\t\t\t\t/**\n\t\t\t\t * @param {Scope} scope scope\n\t\t\t\t * @returns {TODO} result\n\t\t\t\t */\n\t\t\t\tconst getSuperClassExpressions = scope => {\n\t\t\t\t\tconst cacheEntry = superClassCache.get(scope);\n\t\t\t\t\tif (cacheEntry !== undefined) return cacheEntry;\n\t\t\t\t\tconst superClassExpressions = [];\n\t\t\t\t\tfor (const childScope of scope.childScopes) {\n\t\t\t\t\t\tif (childScope.type !== \"class\") continue;\n\t\t\t\t\t\tconst block = childScope.block;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(block.type === \"ClassDeclaration\" ||\n\t\t\t\t\t\t\t\tblock.type === \"ClassExpression\") &&\n\t\t\t\t\t\t\tblock.superClass\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tsuperClassExpressions.push({\n\t\t\t\t\t\t\t\trange: block.superClass.range,\n\t\t\t\t\t\t\t\tvariables: childScope.variables\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsuperClassCache.set(scope, superClassExpressions);\n\t\t\t\t\treturn superClassExpressions;\n\t\t\t\t};\n\n\t\t\t\t// add global symbols\n\t\t\t\tif (info.globalScope) {\n\t\t\t\t\tfor (const reference of info.globalScope.through) {\n\t\t\t\t\t\tconst name = reference.identifier.name;\n\t\t\t\t\t\tif (ConcatenationScope.isModuleReference(name)) {\n\t\t\t\t\t\t\tconst match = ConcatenationScope.matchModuleReference(name);\n\t\t\t\t\t\t\tif (!match) continue;\n\t\t\t\t\t\t\tconst referencedInfo = modulesWithInfo[match.index];\n\t\t\t\t\t\t\tif (referencedInfo.type === \"reference\")\n\t\t\t\t\t\t\t\tthrow new Error(\"Module reference can't point to a reference\");\n\t\t\t\t\t\t\tconst binding = getFinalBinding(\n\t\t\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\t\t\treferencedInfo,\n\t\t\t\t\t\t\t\tmatch.ids,\n\t\t\t\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\t\t\t\truntime,\n\t\t\t\t\t\t\t\trequestShortener,\n\t\t\t\t\t\t\t\truntimeTemplate,\n\t\t\t\t\t\t\t\tneededNamespaceObjects,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t/** @type {BuildMeta} */\n\t\t\t\t\t\t\t\t(info.module.buildMeta).strictHarmonyModule,\n\t\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (!binding.ids) continue;\n\t\t\t\t\t\t\tconst { usedNames, alreadyCheckedScopes } =\n\t\t\t\t\t\t\t\tgetUsedNamesInScopeInfo(\n\t\t\t\t\t\t\t\t\tbinding.info.module.identifier(),\n\t\t\t\t\t\t\t\t\t\"name\" in binding ? binding.name : \"\"\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tfor (const expr of getSuperClassExpressions(reference.from)) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\texpr.range[0] <=\n\t\t\t\t\t\t\t\t\t\t/** @type {Range} */ (reference.identifier.range)[0] &&\n\t\t\t\t\t\t\t\t\texpr.range[1] >=\n\t\t\t\t\t\t\t\t\t\t/** @type {Range} */ (reference.identifier.range)[1]\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tfor (const variable of expr.variables) {\n\t\t\t\t\t\t\t\t\t\tusedNames.add(variable.name);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\taddScopeSymbols(\n\t\t\t\t\t\t\t\treference.from,\n\t\t\t\t\t\t\t\tusedNames,\n\t\t\t\t\t\t\t\talreadyCheckedScopes,\n\t\t\t\t\t\t\t\tignoredScopes\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tallUsedNames.add(name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// generate names for symbols\n\t\tfor (const info of moduleToInfoMap.values()) {\n\t\t\tconst { usedNames: namespaceObjectUsedNames } = getUsedNamesInScopeInfo(\n\t\t\t\tinfo.module.identifier(),\n\t\t\t\t\"\"\n\t\t\t);\n\t\t\tswitch (info.type) {\n\t\t\t\tcase \"concatenated\": {\n\t\t\t\t\tfor (const variable of info.moduleScope.variables) {\n\t\t\t\t\t\tconst name = variable.name;\n\t\t\t\t\t\tconst { usedNames, alreadyCheckedScopes } = getUsedNamesInScopeInfo(\n\t\t\t\t\t\t\tinfo.module.identifier(),\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (allUsedNames.has(name) || usedNames.has(name)) {\n\t\t\t\t\t\t\tconst references = getAllReferences(variable);\n\t\t\t\t\t\t\tfor (const ref of references) {\n\t\t\t\t\t\t\t\taddScopeSymbols(\n\t\t\t\t\t\t\t\t\tref.from,\n\t\t\t\t\t\t\t\t\tusedNames,\n\t\t\t\t\t\t\t\t\talreadyCheckedScopes,\n\t\t\t\t\t\t\t\t\tignoredScopes\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst newName = this.findNewName(\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tallUsedNames,\n\t\t\t\t\t\t\t\tusedNames,\n\t\t\t\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tallUsedNames.add(newName);\n\t\t\t\t\t\t\tinfo.internalNames.set(name, newName);\n\t\t\t\t\t\t\ttopLevelDeclarations.add(newName);\n\t\t\t\t\t\t\tconst source = info.source;\n\t\t\t\t\t\t\tconst allIdentifiers = new Set(\n\t\t\t\t\t\t\t\treferences.map(r => r.identifier).concat(variable.identifiers)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tfor (const identifier of allIdentifiers) {\n\t\t\t\t\t\t\t\tconst r = /** @type {Range} */ (identifier.range);\n\t\t\t\t\t\t\t\tconst path = getPathInAst(info.ast, identifier);\n\t\t\t\t\t\t\t\tif (path && path.length > 1) {\n\t\t\t\t\t\t\t\t\tconst maybeProperty =\n\t\t\t\t\t\t\t\t\t\tpath[1].type === \"AssignmentPattern\" &&\n\t\t\t\t\t\t\t\t\t\tpath[1].left === path[0]\n\t\t\t\t\t\t\t\t\t\t\t? path[2]\n\t\t\t\t\t\t\t\t\t\t\t: path[1];\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tmaybeProperty.type === \"Property\" &&\n\t\t\t\t\t\t\t\t\t\tmaybeProperty.shorthand\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tsource.insert(r[1], `: ${newName}`);\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsource.replace(r[0], r[1] - 1, newName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tallUsedNames.add(name);\n\t\t\t\t\t\t\tinfo.internalNames.set(name, name);\n\t\t\t\t\t\t\ttopLevelDeclarations.add(name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlet namespaceObjectName;\n\t\t\t\t\tif (info.namespaceExportSymbol) {\n\t\t\t\t\t\tnamespaceObjectName = info.internalNames.get(\n\t\t\t\t\t\t\tinfo.namespaceExportSymbol\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnamespaceObjectName = this.findNewName(\n\t\t\t\t\t\t\t\"namespaceObject\",\n\t\t\t\t\t\t\tallUsedNames,\n\t\t\t\t\t\t\tnamespaceObjectUsedNames,\n\t\t\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tallUsedNames.add(namespaceObjectName);\n\t\t\t\t\t}\n\t\t\t\t\tinfo.namespaceObjectName =\n\t\t\t\t\t\t/** @type {string} */\n\t\t\t\t\t\t(namespaceObjectName);\n\t\t\t\t\ttopLevelDeclarations.add(namespaceObjectName);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"external\": {\n\t\t\t\t\tconst externalName = this.findNewName(\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\tallUsedNames,\n\t\t\t\t\t\tnamespaceObjectUsedNames,\n\t\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t\t);\n\t\t\t\t\tallUsedNames.add(externalName);\n\t\t\t\t\tinfo.name = externalName;\n\t\t\t\t\ttopLevelDeclarations.add(externalName);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst buildMeta = /** @type {BuildMeta} */ (info.module.buildMeta);\n\t\t\tif (buildMeta.exportsType !== \"namespace\") {\n\t\t\t\tconst externalNameInterop = this.findNewName(\n\t\t\t\t\t\"namespaceObject\",\n\t\t\t\t\tallUsedNames,\n\t\t\t\t\tnamespaceObjectUsedNames,\n\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t);\n\t\t\t\tallUsedNames.add(externalNameInterop);\n\t\t\t\tinfo.interopNamespaceObjectName = externalNameInterop;\n\t\t\t\ttopLevelDeclarations.add(externalNameInterop);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tbuildMeta.exportsType === \"default\" &&\n\t\t\t\tbuildMeta.defaultObject !== \"redirect\"\n\t\t\t) {\n\t\t\t\tconst externalNameInterop = this.findNewName(\n\t\t\t\t\t\"namespaceObject2\",\n\t\t\t\t\tallUsedNames,\n\t\t\t\t\tnamespaceObjectUsedNames,\n\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t);\n\t\t\t\tallUsedNames.add(externalNameInterop);\n\t\t\t\tinfo.interopNamespaceObject2Name = externalNameInterop;\n\t\t\t\ttopLevelDeclarations.add(externalNameInterop);\n\t\t\t}\n\t\t\tif (buildMeta.exportsType === \"dynamic\" || !buildMeta.exportsType) {\n\t\t\t\tconst externalNameInterop = this.findNewName(\n\t\t\t\t\t\"default\",\n\t\t\t\t\tallUsedNames,\n\t\t\t\t\tnamespaceObjectUsedNames,\n\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t);\n\t\t\t\tallUsedNames.add(externalNameInterop);\n\t\t\t\tinfo.interopDefaultAccessName = externalNameInterop;\n\t\t\t\ttopLevelDeclarations.add(externalNameInterop);\n\t\t\t}\n\t\t}\n\n\t\t// Find and replace references to modules\n\t\tfor (const info of moduleToInfoMap.values()) {\n\t\t\tif (info.type === \"concatenated\") {\n\t\t\t\tfor (const reference of info.globalScope.through) {\n\t\t\t\t\tconst name = reference.identifier.name;\n\t\t\t\t\tconst match = ConcatenationScope.matchModuleReference(name);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\tconst referencedInfo = modulesWithInfo[match.index];\n\t\t\t\t\t\tif (referencedInfo.type === \"reference\")\n\t\t\t\t\t\t\tthrow new Error(\"Module reference can't point to a reference\");\n\t\t\t\t\t\tconst finalName = getFinalName(\n\t\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\t\treferencedInfo,\n\t\t\t\t\t\t\tmatch.ids,\n\t\t\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\t\t\truntime,\n\t\t\t\t\t\t\trequestShortener,\n\t\t\t\t\t\t\truntimeTemplate,\n\t\t\t\t\t\t\tneededNamespaceObjects,\n\t\t\t\t\t\t\tmatch.call,\n\t\t\t\t\t\t\t!match.directImport,\n\t\t\t\t\t\t\t/** @type {BuildMeta} */\n\t\t\t\t\t\t\t(info.module.buildMeta).strictHarmonyModule,\n\t\t\t\t\t\t\tmatch.asiSafe\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst r = /** @type {Range} */ (reference.identifier.range);\n\t\t\t\t\t\tconst source = info.source;\n\t\t\t\t\t\t// range is extended by 2 chars to cover the appended \"._\"\n\t\t\t\t\t\tsource.replace(r[0], r[1] + 1, finalName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Map with all root exposed used exports\n\t\t/** @type {Map<string, function(RequestShortener): string>} */\n\t\tconst exportsMap = new Map();\n\n\t\t// Set with all root exposed unused exports\n\t\t/** @type {Set<string>} */\n\t\tconst unusedExports = new Set();\n\n\t\tconst rootInfo = /** @type {ConcatenatedModuleInfo} */ (\n\t\t\tmoduleToInfoMap.get(this.rootModule)\n\t\t);\n\t\tconst strictHarmonyModule =\n\t\t\t/** @type {BuildMeta} */\n\t\t\t(rootInfo.module.buildMeta).strictHarmonyModule;\n\t\tconst exportsInfo = moduleGraph.getExportsInfo(rootInfo.module);\n\t\tfor (const exportInfo of exportsInfo.orderedExports) {\n\t\t\tconst name = exportInfo.name;\n\t\t\tif (exportInfo.provided === false) continue;\n\t\t\tconst used = exportInfo.getUsedName(undefined, runtime);\n\t\t\tif (!used) {\n\t\t\t\tunusedExports.add(name);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\texportsMap.set(used, requestShortener => {\n\t\t\t\ttry {\n\t\t\t\t\tconst finalName = getFinalName(\n\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\trootInfo,\n\t\t\t\t\t\t[name],\n\t\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\t\truntime,\n\t\t\t\t\t\trequestShortener,\n\t\t\t\t\t\truntimeTemplate,\n\t\t\t\t\t\tneededNamespaceObjects,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tstrictHarmonyModule,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t\treturn `/* ${\n\t\t\t\t\t\texportInfo.isReexport() ? \"reexport\" : \"binding\"\n\t\t\t\t\t} */ ${finalName}`;\n\t\t\t\t} catch (e) {\n\t\t\t\t\t/** @type {Error} */\n\t\t\t\t\t(e).message +=\n\t\t\t\t\t\t`\\nwhile generating the root export '${name}' (used name: '${used}')`;\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst result = new ConcatSource();\n\n\t\t// add harmony compatibility flag (must be first because of possible circular dependencies)\n\t\tif (\n\t\t\tmoduleGraph.getExportsInfo(this).otherExportsInfo.getUsed(runtime) !==\n\t\t\tUsageState.Unused\n\t\t) {\n\t\t\tresult.add(`// ESM COMPAT FLAG\\n`);\n\t\t\tresult.add(\n\t\t\t\truntimeTemplate.defineEsModuleFlagStatement({\n\t\t\t\t\texportsArgument: this.exportsArgument,\n\t\t\t\t\truntimeRequirements\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\t// define exports\n\t\tif (exportsMap.size > 0) {\n\t\t\truntimeRequirements.add(RuntimeGlobals.exports);\n\t\t\truntimeRequirements.add(RuntimeGlobals.definePropertyGetters);\n\t\t\tconst definitions = [];\n\t\t\tfor (const [key, value] of exportsMap) {\n\t\t\t\tdefinitions.push(\n\t\t\t\t\t`\\n  ${propertyName(key)}: ${runtimeTemplate.returningFunction(\n\t\t\t\t\t\tvalue(requestShortener)\n\t\t\t\t\t)}`\n\t\t\t\t);\n\t\t\t}\n\t\t\tresult.add(`\\n// EXPORTS\\n`);\n\t\t\tresult.add(\n\t\t\t\t`${RuntimeGlobals.definePropertyGetters}(${\n\t\t\t\t\tthis.exportsArgument\n\t\t\t\t}, {${definitions.join(\",\")}\\n});\\n`\n\t\t\t);\n\t\t}\n\n\t\t// list unused exports\n\t\tif (unusedExports.size > 0) {\n\t\t\tresult.add(\n\t\t\t\t`\\n// UNUSED EXPORTS: ${joinIterableWithComma(unusedExports)}\\n`\n\t\t\t);\n\t\t}\n\n\t\t// generate namespace objects\n\t\tconst namespaceObjectSources = new Map();\n\t\tfor (const info of neededNamespaceObjects) {\n\t\t\tif (info.namespaceExportSymbol) continue;\n\t\t\tconst nsObj = [];\n\t\t\tconst exportsInfo = moduleGraph.getExportsInfo(info.module);\n\t\t\tfor (const exportInfo of exportsInfo.orderedExports) {\n\t\t\t\tif (exportInfo.provided === false) continue;\n\t\t\t\tconst usedName = exportInfo.getUsedName(undefined, runtime);\n\t\t\t\tif (usedName) {\n\t\t\t\t\tconst finalName = getFinalName(\n\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\tinfo,\n\t\t\t\t\t\t[exportInfo.name],\n\t\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\t\truntime,\n\t\t\t\t\t\trequestShortener,\n\t\t\t\t\t\truntimeTemplate,\n\t\t\t\t\t\tneededNamespaceObjects,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t/** @type {BuildMeta} */\n\t\t\t\t\t\t(info.module.buildMeta).strictHarmonyModule,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t\tnsObj.push(\n\t\t\t\t\t\t`\\n  ${propertyName(usedName)}: ${runtimeTemplate.returningFunction(\n\t\t\t\t\t\t\tfinalName\n\t\t\t\t\t\t)}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst name = info.namespaceObjectName;\n\t\t\tconst defineGetters =\n\t\t\t\tnsObj.length > 0\n\t\t\t\t\t? `${RuntimeGlobals.definePropertyGetters}(${name}, {${nsObj.join(\n\t\t\t\t\t\t\t\",\"\n\t\t\t\t\t\t)}\\n});\\n`\n\t\t\t\t\t: \"\";\n\t\t\tif (nsObj.length > 0)\n\t\t\t\truntimeRequirements.add(RuntimeGlobals.definePropertyGetters);\n\t\t\tnamespaceObjectSources.set(\n\t\t\t\tinfo,\n\t\t\t\t`\n// NAMESPACE OBJECT: ${info.module.readableIdentifier(requestShortener)}\nvar ${name} = {};\n${RuntimeGlobals.makeNamespaceObject}(${name});\n${defineGetters}`\n\t\t\t);\n\t\t\truntimeRequirements.add(RuntimeGlobals.makeNamespaceObject);\n\t\t}\n\n\t\t// define required namespace objects (must be before evaluation modules)\n\t\tfor (const info of modulesWithInfo) {\n\t\t\tif (info.type === \"concatenated\") {\n\t\t\t\tconst source = namespaceObjectSources.get(info);\n\t\t\t\tif (!source) continue;\n\t\t\t\tresult.add(source);\n\t\t\t}\n\t\t}\n\n\t\tconst chunkInitFragments = [];\n\n\t\t// evaluate modules in order\n\t\tfor (const rawInfo of modulesWithInfo) {\n\t\t\tlet name;\n\t\t\tlet isConditional = false;\n\t\t\tconst info = rawInfo.type === \"reference\" ? rawInfo.target : rawInfo;\n\t\t\tswitch (info.type) {\n\t\t\t\tcase \"concatenated\": {\n\t\t\t\t\tresult.add(\n\t\t\t\t\t\t`\\n;// CONCATENATED MODULE: ${info.module.readableIdentifier(\n\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t)}\\n`\n\t\t\t\t\t);\n\t\t\t\t\tresult.add(info.source);\n\t\t\t\t\tif (info.chunkInitFragments) {\n\t\t\t\t\t\tfor (const f of info.chunkInitFragments) chunkInitFragments.push(f);\n\t\t\t\t\t}\n\t\t\t\t\tif (info.runtimeRequirements) {\n\t\t\t\t\t\tfor (const r of info.runtimeRequirements) {\n\t\t\t\t\t\t\truntimeRequirements.add(r);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tname = info.namespaceObjectName;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"external\": {\n\t\t\t\t\tresult.add(\n\t\t\t\t\t\t`\\n// EXTERNAL MODULE: ${info.module.readableIdentifier(\n\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t)}\\n`\n\t\t\t\t\t);\n\t\t\t\t\truntimeRequirements.add(RuntimeGlobals.require);\n\t\t\t\t\tconst { runtimeCondition } =\n\t\t\t\t\t\t/** @type {ExternalModuleInfo | ReferenceToModuleInfo} */ (rawInfo);\n\t\t\t\t\tconst condition = runtimeTemplate.runtimeConditionExpression({\n\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\truntimeCondition,\n\t\t\t\t\t\truntime,\n\t\t\t\t\t\truntimeRequirements\n\t\t\t\t\t});\n\t\t\t\t\tif (condition !== \"true\") {\n\t\t\t\t\t\tisConditional = true;\n\t\t\t\t\t\tresult.add(`if (${condition}) {\\n`);\n\t\t\t\t\t}\n\t\t\t\t\tresult.add(\n\t\t\t\t\t\t`var ${info.name} = ${RuntimeGlobals.require}(${JSON.stringify(\n\t\t\t\t\t\t\tchunkGraph.getModuleId(info.module)\n\t\t\t\t\t\t)});`\n\t\t\t\t\t);\n\t\t\t\t\tname = info.name;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\t// @ts-expect-error never is expected here\n\t\t\t\t\tthrow new Error(`Unsupported concatenation entry type ${info.type}`);\n\t\t\t}\n\t\t\tif (info.interopNamespaceObjectUsed) {\n\t\t\t\truntimeRequirements.add(RuntimeGlobals.createFakeNamespaceObject);\n\t\t\t\tresult.add(\n\t\t\t\t\t`\\nvar ${info.interopNamespaceObjectName} = /*#__PURE__*/${RuntimeGlobals.createFakeNamespaceObject}(${name}, 2);`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (info.interopNamespaceObject2Used) {\n\t\t\t\truntimeRequirements.add(RuntimeGlobals.createFakeNamespaceObject);\n\t\t\t\tresult.add(\n\t\t\t\t\t`\\nvar ${info.interopNamespaceObject2Name} = /*#__PURE__*/${RuntimeGlobals.createFakeNamespaceObject}(${name});`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (info.interopDefaultAccessUsed) {\n\t\t\t\truntimeRequirements.add(RuntimeGlobals.compatGetDefaultExport);\n\t\t\t\tresult.add(\n\t\t\t\t\t`\\nvar ${info.interopDefaultAccessName} = /*#__PURE__*/${RuntimeGlobals.compatGetDefaultExport}(${name});`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (isConditional) {\n\t\t\t\tresult.add(\"\\n}\");\n\t\t\t}\n\t\t}\n\n\t\tconst data = new Map();\n\t\tif (chunkInitFragments.length > 0)\n\t\t\tdata.set(\"chunkInitFragments\", chunkInitFragments);\n\t\tdata.set(\"topLevelDeclarations\", topLevelDeclarations);\n\n\t\t/** @type {CodeGenerationResult} */\n\t\tconst resultEntry = {\n\t\t\tsources: new Map([[\"javascript\", new CachedSource(result)]]),\n\t\t\tdata,\n\t\t\truntimeRequirements\n\t\t};\n\n\t\treturn resultEntry;\n\t}\n\n\t/**\n\t * @param {Map<Module, ModuleInfo>} modulesMap modulesMap\n\t * @param {ModuleInfo} info info\n\t * @param {DependencyTemplates} dependencyTemplates dependencyTemplates\n\t * @param {RuntimeTemplate} runtimeTemplate runtimeTemplate\n\t * @param {ModuleGraph} moduleGraph moduleGraph\n\t * @param {ChunkGraph} chunkGraph chunkGraph\n\t * @param {RuntimeSpec} runtime runtime\n\t * @param {CodeGenerationResults} codeGenerationResults codeGenerationResults\n\t */\n\t_analyseModule(\n\t\tmodulesMap,\n\t\tinfo,\n\t\tdependencyTemplates,\n\t\truntimeTemplate,\n\t\tmoduleGraph,\n\t\tchunkGraph,\n\t\truntime,\n\t\tcodeGenerationResults\n\t) {\n\t\tif (info.type === \"concatenated\") {\n\t\t\tconst m = info.module;\n\t\t\ttry {\n\t\t\t\t// Create a concatenation scope to track and capture information\n\t\t\t\tconst concatenationScope = new ConcatenationScope(modulesMap, info);\n\n\t\t\t\t// TODO cache codeGeneration results\n\t\t\t\tconst codeGenResult = m.codeGeneration({\n\t\t\t\t\tdependencyTemplates,\n\t\t\t\t\truntimeTemplate,\n\t\t\t\t\tmoduleGraph,\n\t\t\t\t\tchunkGraph,\n\t\t\t\t\truntime,\n\t\t\t\t\tconcatenationScope,\n\t\t\t\t\tcodeGenerationResults,\n\t\t\t\t\tsourceTypes: TYPES\n\t\t\t\t});\n\t\t\t\tconst source = /** @type {Source} */ (\n\t\t\t\t\tcodeGenResult.sources.get(\"javascript\")\n\t\t\t\t);\n\t\t\t\tconst data = codeGenResult.data;\n\t\t\t\tconst chunkInitFragments = data && data.get(\"chunkInitFragments\");\n\t\t\t\tconst code = source.source().toString();\n\t\t\t\tlet ast;\n\t\t\t\ttry {\n\t\t\t\t\tast = JavascriptParser._parse(code, {\n\t\t\t\t\t\tsourceType: \"module\"\n\t\t\t\t\t});\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (\n\t\t\t\t\t\terr.loc &&\n\t\t\t\t\t\ttypeof err.loc === \"object\" &&\n\t\t\t\t\t\ttypeof err.loc.line === \"number\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst lineNumber = err.loc.line;\n\t\t\t\t\t\tconst lines = code.split(\"\\n\");\n\t\t\t\t\t\terr.message +=\n\t\t\t\t\t\t\t\"\\n| \" +\n\t\t\t\t\t\t\tlines\n\t\t\t\t\t\t\t\t.slice(Math.max(0, lineNumber - 3), lineNumber + 2)\n\t\t\t\t\t\t\t\t.join(\"\\n| \");\n\t\t\t\t\t}\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t\tconst scopeManager = eslintScope.analyze(ast, {\n\t\t\t\t\tecmaVersion: 6,\n\t\t\t\t\tsourceType: \"module\",\n\t\t\t\t\toptimistic: true,\n\t\t\t\t\tignoreEval: true,\n\t\t\t\t\timpliedStrict: true\n\t\t\t\t});\n\t\t\t\tconst globalScope = /** @type {Scope} */ (scopeManager.acquire(ast));\n\t\t\t\tconst moduleScope = globalScope.childScopes[0];\n\t\t\t\tconst resultSource = new ReplaceSource(source);\n\t\t\t\tinfo.runtimeRequirements = codeGenResult.runtimeRequirements;\n\t\t\t\tinfo.ast = ast;\n\t\t\t\tinfo.internalSource = source;\n\t\t\t\tinfo.source = resultSource;\n\t\t\t\tinfo.chunkInitFragments = chunkInitFragments;\n\t\t\t\tinfo.globalScope = globalScope;\n\t\t\t\tinfo.moduleScope = moduleScope;\n\t\t\t} catch (err) {\n\t\t\t\t/** @type {Error} */\n\t\t\t\t(err).message +=\n\t\t\t\t\t`\\nwhile analyzing module ${m.identifier()} for concatenation`;\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {ModuleGraph} moduleGraph the module graph\n\t * @param {RuntimeSpec} runtime the runtime\n\t * @returns {[ModuleInfoOrReference[], Map<Module, ModuleInfo>]} module info items\n\t */\n\t_getModulesWithInfo(moduleGraph, runtime) {\n\t\tconst orderedConcatenationList = this._createConcatenationList(\n\t\t\tthis.rootModule,\n\t\t\tthis._modules,\n\t\t\truntime,\n\t\t\tmoduleGraph\n\t\t);\n\t\t/** @type {Map<Module, ModuleInfo>} */\n\t\tconst map = new Map();\n\t\tconst list = orderedConcatenationList.map((info, index) => {\n\t\t\tlet item = map.get(info.module);\n\t\t\tif (item === undefined) {\n\t\t\t\tswitch (info.type) {\n\t\t\t\t\tcase \"concatenated\":\n\t\t\t\t\t\titem = {\n\t\t\t\t\t\t\ttype: \"concatenated\",\n\t\t\t\t\t\t\tmodule: info.module,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tast: undefined,\n\t\t\t\t\t\t\tinternalSource: undefined,\n\t\t\t\t\t\t\truntimeRequirements: undefined,\n\t\t\t\t\t\t\tsource: undefined,\n\t\t\t\t\t\t\tglobalScope: undefined,\n\t\t\t\t\t\t\tmoduleScope: undefined,\n\t\t\t\t\t\t\tinternalNames: new Map(),\n\t\t\t\t\t\t\texportMap: undefined,\n\t\t\t\t\t\t\trawExportMap: undefined,\n\t\t\t\t\t\t\tnamespaceExportSymbol: undefined,\n\t\t\t\t\t\t\tnamespaceObjectName: undefined,\n\t\t\t\t\t\t\tinteropNamespaceObjectUsed: false,\n\t\t\t\t\t\t\tinteropNamespaceObjectName: undefined,\n\t\t\t\t\t\t\tinteropNamespaceObject2Used: false,\n\t\t\t\t\t\t\tinteropNamespaceObject2Name: undefined,\n\t\t\t\t\t\t\tinteropDefaultAccessUsed: false,\n\t\t\t\t\t\t\tinteropDefaultAccessName: undefined\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"external\":\n\t\t\t\t\t\titem = {\n\t\t\t\t\t\t\ttype: \"external\",\n\t\t\t\t\t\t\tmodule: info.module,\n\t\t\t\t\t\t\truntimeCondition: info.runtimeCondition,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tname: undefined,\n\t\t\t\t\t\t\tinteropNamespaceObjectUsed: false,\n\t\t\t\t\t\t\tinteropNamespaceObjectName: undefined,\n\t\t\t\t\t\t\tinteropNamespaceObject2Used: false,\n\t\t\t\t\t\t\tinteropNamespaceObject2Name: undefined,\n\t\t\t\t\t\t\tinteropDefaultAccessUsed: false,\n\t\t\t\t\t\t\tinteropDefaultAccessName: undefined\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Unsupported concatenation entry type ${info.type}`\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tmap.set(\n\t\t\t\t\t/** @type {ModuleInfo} */ (item).module,\n\t\t\t\t\t/** @type {ModuleInfo} */ (item)\n\t\t\t\t);\n\t\t\t\treturn item;\n\t\t\t} else {\n\t\t\t\t/** @type {ReferenceToModuleInfo} */\n\t\t\t\tconst ref = {\n\t\t\t\t\ttype: \"reference\",\n\t\t\t\t\truntimeCondition: info.runtimeCondition,\n\t\t\t\t\ttarget: item\n\t\t\t\t};\n\t\t\t\treturn ref;\n\t\t\t}\n\t\t});\n\t\treturn [list, map];\n\t}\n\n\t/**\n\t * @param {string} oldName old name\n\t * @param {UsedNames} usedNamed1 used named 1\n\t * @param {UsedNames} usedNamed2 used named 2\n\t * @param {string} extraInfo extra info\n\t * @returns {string} found new name\n\t */\n\tfindNewName(oldName, usedNamed1, usedNamed2, extraInfo) {\n\t\tlet name = oldName;\n\n\t\tif (name === ConcatenationScope.DEFAULT_EXPORT) {\n\t\t\tname = \"\";\n\t\t}\n\t\tif (name === ConcatenationScope.NAMESPACE_OBJECT_EXPORT) {\n\t\t\tname = \"namespaceObject\";\n\t\t}\n\n\t\t// Remove uncool stuff\n\t\textraInfo = extraInfo.replace(\n\t\t\t/\\.+\\/|(\\/index)?\\.([a-zA-Z0-9]{1,4})($|\\s|\\?)|\\s*\\+\\s*\\d+\\s*modules/g,\n\t\t\t\"\"\n\t\t);\n\n\t\tconst splittedInfo = extraInfo.split(\"/\");\n\t\twhile (splittedInfo.length) {\n\t\t\tname = splittedInfo.pop() + (name ? \"_\" + name : \"\");\n\t\t\tconst nameIdent = Template.toIdentifier(name);\n\t\t\tif (\n\t\t\t\t!usedNamed1.has(nameIdent) &&\n\t\t\t\t(!usedNamed2 || !usedNamed2.has(nameIdent))\n\t\t\t)\n\t\t\t\treturn nameIdent;\n\t\t}\n\n\t\tlet i = 0;\n\t\tlet nameWithNumber = Template.toIdentifier(`${name}_${i}`);\n\t\twhile (\n\t\t\tusedNamed1.has(nameWithNumber) ||\n\t\t\t(usedNamed2 && usedNamed2.has(nameWithNumber))\n\t\t) {\n\t\t\ti++;\n\t\t\tnameWithNumber = Template.toIdentifier(`${name}_${i}`);\n\t\t}\n\t\treturn nameWithNumber;\n\t}\n\n\t/**\n\t * @param {Hash} hash the hash used to track dependencies\n\t * @param {UpdateHashContext} context context\n\t * @returns {void}\n\t */\n\tupdateHash(hash, context) {\n\t\tconst { chunkGraph, runtime } = context;\n\t\tfor (const info of this._createConcatenationList(\n\t\t\tthis.rootModule,\n\t\t\tthis._modules,\n\t\t\tintersectRuntime(runtime, this._runtime),\n\t\t\tchunkGraph.moduleGraph\n\t\t)) {\n\t\t\tswitch (info.type) {\n\t\t\t\tcase \"concatenated\":\n\t\t\t\t\tinfo.module.updateHash(hash, context);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"external\":\n\t\t\t\t\thash.update(`${chunkGraph.getModuleId(info.module)}`);\n\t\t\t\t\t// TODO runtimeCondition\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tsuper.updateHash(hash, context);\n\t}\n\n\t/**\n\t * @param {ObjectDeserializerContext} context context\n\t * @returns {ConcatenatedModule} ConcatenatedModule\n\t */\n\tstatic deserialize(context) {\n\t\tconst obj = new ConcatenatedModule({\n\t\t\tidentifier: undefined,\n\t\t\trootModule: undefined,\n\t\t\tmodules: undefined,\n\t\t\truntime: undefined\n\t\t});\n\t\tobj.deserialize(context);\n\t\treturn obj;\n\t}\n}\n\nmakeSerializable(ConcatenatedModule, \"webpack/lib/optimize/ConcatenatedModule\");\n\nmodule.exports = ConcatenatedModule;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,WAAW,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC3C,MAAMC,UAAU,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AACzD,MAAM;EACLE,YAAY;EACZC,YAAY;EACZC;AACD,CAAC,GAAGJ,OAAO,CAAC,iBAAiB,CAAC;AAC9B,MAAMK,kBAAkB,GAAGL,OAAO,CAAC,uBAAuB,CAAC;AAC3D,MAAM;EAAEM;AAAW,CAAC,GAAGN,OAAO,CAAC,gBAAgB,CAAC;AAChD,MAAMO,MAAM,GAAGP,OAAO,CAAC,WAAW,CAAC;AACnC,MAAM;EAAEQ;AAA2B,CAAC,GAAGR,OAAO,CAAC,wBAAwB,CAAC;AACxE,MAAMS,cAAc,GAAGT,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAMU,QAAQ,GAAGV,OAAO,CAAC,aAAa,CAAC;AACvC,MAAMW,uBAAuB,GAAGX,OAAO,CAAC,yCAAyC,CAAC;AAClF,MAAMY,gBAAgB,GAAGZ,OAAO,CAAC,gCAAgC,CAAC;AAClE,MAAM;EAAEa;AAAO,CAAC,GAAGb,OAAO,CAAC,sBAAsB,CAAC;AAClD,MAAMc,OAAO,GAAGd,OAAO,CAAC,iBAAiB,CAAC;AAC1C,MAAM;EAAEe;AAAkB,CAAC,GAAGf,OAAO,CAAC,qBAAqB,CAAC;AAC5D,MAAMgB,UAAU,GAAGhB,OAAO,CAAC,oBAAoB,CAAC;AAChD,MAAM;EAAEiB;AAAkB,CAAC,GAAGjB,OAAO,CAAC,oBAAoB,CAAC;AAC3D,MAAMkB,gBAAgB,GAAGlB,OAAO,CAAC,0BAA0B,CAAC;AAC5D,MAAMmB,cAAc,GAAGnB,OAAO,CAAC,wBAAwB,CAAC;AACxD,MAAM;EAAEoB;AAAa,CAAC,GAAGpB,OAAO,CAAC,sBAAsB,CAAC;AACxD,MAAM;EACLqB,aAAa;EACbC,gBAAgB;EAChBC,qBAAqB;EACrBC,6BAA6B;EAC7BC,wBAAwB;EACxBC;AACD,CAAC,GAAG1B,OAAO,CAAC,iBAAiB,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM2B,eAAe,GAAG,kBAAoB1B,UAAW;AACvD,IAAI,CAAC0B,eAAe,CAACC,SAAS,CAACC,kBAAkB,EAAE;EAClDF,eAAe,CAACC,SAAS,CAACC,kBAAkB,GAC3CF,eAAe,CAACC,SAAS,CAACE,QAAQ;AACpC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAMC,cAAc,GAAG,IAAIC,GAAG,CAC7B;AACC;AACA3B,kBAAkB,CAAC4B,cAAc,EACjC5B,kBAAkB,CAAC6B,uBAAuB;AAE1C;AACA,wFAAwF,EACxF,2FAA2F,EAC3F,6FAA6F,EAC7F,2FAA2F,EAC3F,qEAAqE;AAErE;AACA,oDAAoD;AAEpD;AACA,2FAA2F,EAC3F,oEAAoE;AAEpE;AACA,sFAAsF,EACtF,wFAAwF,EACxF,0FAA0F,EAC1F,2FAA2F,EAC3F,8FAA8F,EAC9F,8FAA8F,EAC9F,0FAA0F,EAC1F,0FAA0F,EAC1F,gBAAgB;AAEhB;AACA,+GAA+G,CAC/G,CACCC,IAAI,CAAC,GAAG,CAAC,CACTC,KAAK,CAAC,GAAG,CACZ,CAAC;AAED,MAAMC,gBAAgB,GAAGA,CAACC,QAAQ,EAAEC,UAAU,KAAK,CAACC,CAAC,EAAEC,CAAC,KACvDF,UAAU,CAACC,CAAC,CAACF,QAAQ,CAAC,EA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}