{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n  compareModulesByPreOrderIndexOrIdentifier\n} = require(\"../util/comparators\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst createHash = require(\"../util/createHash\");\nconst {\n  getUsedModuleIdsAndModules,\n  getFullModuleName\n} = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../../declarations/plugins/HashedModuleIdsPlugin\").HashedModuleIdsPluginOptions} HashedModuleIdsPluginOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nconst validate = createSchemaValidation(require(\"../../schemas/plugins/HashedModuleIdsPlugin.check.js\"), () => require(\"../../schemas/plugins/HashedModuleIdsPlugin.json\"), {\n  name: \"Hashed Module Ids Plugin\",\n  baseDataPath: \"options\"\n});\nclass HashedModuleIdsPlugin {\n  /**\n   * @param {HashedModuleIdsPluginOptions=} options options object\n   */\n  constructor(options = {}) {\n    validate(options);\n\n    /** @type {HashedModuleIdsPluginOptions} */\n    this.options = {\n      context: undefined,\n      hashFunction: \"md4\",\n      hashDigest: \"base64\",\n      hashDigestLength: 4,\n      ...options\n    };\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    const options = this.options;\n    compiler.hooks.compilation.tap(\"HashedModuleIdsPlugin\", compilation => {\n      compilation.hooks.moduleIds.tap(\"HashedModuleIdsPlugin\", () => {\n        const chunkGraph = compilation.chunkGraph;\n        const context = this.options.context ? this.options.context : compiler.context;\n        const [usedIds, modules] = getUsedModuleIdsAndModules(compilation);\n        const modulesInNaturalOrder = modules.sort(compareModulesByPreOrderIndexOrIdentifier(compilation.moduleGraph));\n        for (const module of modulesInNaturalOrder) {\n          const ident = getFullModuleName(module, context, compiler.root);\n          const hash = createHash(options.hashFunction);\n          hash.update(ident || \"\");\n          const hashId = /** @type {string} */\n          hash.digest(options.hashDigest);\n          let len = options.hashDigestLength;\n          while (usedIds.has(hashId.slice(0, len))) /** @type {number} */len++;\n          const moduleId = hashId.slice(0, len);\n          chunkGraph.setModuleId(module, moduleId);\n          usedIds.add(moduleId);\n        }\n      });\n    });\n  }\n}\nmodule.exports = HashedModuleIdsPlugin;","map":{"version":3,"names":["compareModulesByPreOrderIndexOrIdentifier","require","createSchemaValidation","createHash","getUsedModuleIdsAndModules","getFullModuleName","validate","name","baseDataPath","HashedModuleIdsPlugin","constructor","options","context","undefined","hashFunction","hashDigest","hashDigestLength","apply","compiler","hooks","compilation","tap","moduleIds","chunkGraph","usedIds","modules","modulesInNaturalOrder","sort","moduleGraph","module","ident","root","hash","update","hashId","digest","len","has","slice","moduleId","setModuleId","add","exports"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/ids/HashedModuleIdsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n\tcompareModulesByPreOrderIndexOrIdentifier\n} = require(\"../util/comparators\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst createHash = require(\"../util/createHash\");\nconst {\n\tgetUsedModuleIdsAndModules,\n\tgetFullModuleName\n} = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../../declarations/plugins/HashedModuleIdsPlugin\").HashedModuleIdsPluginOptions} HashedModuleIdsPluginOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nconst validate = createSchemaValidation(\n\trequire(\"../../schemas/plugins/HashedModuleIdsPlugin.check.js\"),\n\t() => require(\"../../schemas/plugins/HashedModuleIdsPlugin.json\"),\n\t{\n\t\tname: \"Hashed Module Ids Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nclass HashedModuleIdsPlugin {\n\t/**\n\t * @param {HashedModuleIdsPluginOptions=} options options object\n\t */\n\tconstructor(options = {}) {\n\t\tvalidate(options);\n\n\t\t/** @type {HashedModuleIdsPluginOptions} */\n\t\tthis.options = {\n\t\t\tcontext: undefined,\n\t\t\thashFunction: \"md4\",\n\t\t\thashDigest: \"base64\",\n\t\t\thashDigestLength: 4,\n\t\t\t...options\n\t\t};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tcompiler.hooks.compilation.tap(\"HashedModuleIdsPlugin\", compilation => {\n\t\t\tcompilation.hooks.moduleIds.tap(\"HashedModuleIdsPlugin\", () => {\n\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\tconst context = this.options.context\n\t\t\t\t\t? this.options.context\n\t\t\t\t\t: compiler.context;\n\n\t\t\t\tconst [usedIds, modules] = getUsedModuleIdsAndModules(compilation);\n\t\t\t\tconst modulesInNaturalOrder = modules.sort(\n\t\t\t\t\tcompareModulesByPreOrderIndexOrIdentifier(compilation.moduleGraph)\n\t\t\t\t);\n\t\t\t\tfor (const module of modulesInNaturalOrder) {\n\t\t\t\t\tconst ident = getFullModuleName(module, context, compiler.root);\n\t\t\t\t\tconst hash = createHash(options.hashFunction);\n\t\t\t\t\thash.update(ident || \"\");\n\t\t\t\t\tconst hashId = /** @type {string} */ (\n\t\t\t\t\t\thash.digest(options.hashDigest)\n\t\t\t\t\t);\n\t\t\t\t\tlet len = options.hashDigestLength;\n\t\t\t\t\twhile (usedIds.has(hashId.slice(0, len)))\n\t\t\t\t\t\t/** @type {number} */ (len)++;\n\t\t\t\t\tconst moduleId = hashId.slice(0, len);\n\t\t\t\t\tchunkGraph.setModuleId(module, moduleId);\n\t\t\t\t\tusedIds.add(moduleId);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = HashedModuleIdsPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EACLA;AACD,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAClC,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,kCAAkC,CAAC;AAC1E,MAAME,UAAU,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAChD,MAAM;EACLG,0BAA0B;EAC1BC;AACD,CAAC,GAAGJ,OAAO,CAAC,aAAa,CAAC;;AAE1B;AACA;;AAEA,MAAMK,QAAQ,GAAGJ,sBAAsB,CACtCD,OAAO,CAAC,sDAAsD,CAAC,EAC/D,MAAMA,OAAO,CAAC,kDAAkD,CAAC,EACjE;EACCM,IAAI,EAAE,0BAA0B;EAChCC,YAAY,EAAE;AACf,CACD,CAAC;AAED,MAAMC,qBAAqB,CAAC;EAC3B;AACD;AACA;EACCC,WAAWA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACzBL,QAAQ,CAACK,OAAO,CAAC;;IAEjB;IACA,IAAI,CAACA,OAAO,GAAG;MACdC,OAAO,EAAEC,SAAS;MAClBC,YAAY,EAAE,KAAK;MACnBC,UAAU,EAAE,QAAQ;MACpBC,gBAAgB,EAAE,CAAC;MACnB,GAAGL;IACJ,CAAC;EACF;;EAEA;AACD;AACA;AACA;AACA;EACCM,KAAKA,CAACC,QAAQ,EAAE;IACf,MAAMP,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5BO,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAAC,uBAAuB,EAAED,WAAW,IAAI;MACtEA,WAAW,CAACD,KAAK,CAACG,SAAS,CAACD,GAAG,CAAC,uBAAuB,EAAE,MAAM;QAC9D,MAAME,UAAU,GAAGH,WAAW,CAACG,UAAU;QACzC,MAAMX,OAAO,GAAG,IAAI,CAACD,OAAO,CAACC,OAAO,GACjC,IAAI,CAACD,OAAO,CAACC,OAAO,GACpBM,QAAQ,CAACN,OAAO;QAEnB,MAAM,CAACY,OAAO,EAAEC,OAAO,CAAC,GAAGrB,0BAA0B,CAACgB,WAAW,CAAC;QAClE,MAAMM,qBAAqB,GAAGD,OAAO,CAACE,IAAI,CACzC3B,yCAAyC,CAACoB,WAAW,CAACQ,WAAW,CAClE,CAAC;QACD,KAAK,MAAMC,MAAM,IAAIH,qBAAqB,EAAE;UAC3C,MAAMI,KAAK,GAAGzB,iBAAiB,CAACwB,MAAM,EAAEjB,OAAO,EAAEM,QAAQ,CAACa,IAAI,CAAC;UAC/D,MAAMC,IAAI,GAAG7B,UAAU,CAACQ,OAAO,CAACG,YAAY,CAAC;UAC7CkB,IAAI,CAACC,MAAM,CAACH,KAAK,IAAI,EAAE,CAAC;UACxB,MAAMI,MAAM,GAAG;UACdF,IAAI,CAACG,MAAM,CAACxB,OAAO,CAACI,UAAU,CAC9B;UACD,IAAIqB,GAAG,GAAGzB,OAAO,CAACK,gBAAgB;UAClC,OAAOQ,OAAO,CAACa,GAAG,CAACH,MAAM,CAACI,KAAK,CAAC,CAAC,EAAEF,GAAG,CAAC,CAAC,EACvC,qBAAuBA,GAAG,EAAG;UAC9B,MAAMG,QAAQ,GAAGL,MAAM,CAACI,KAAK,CAAC,CAAC,EAAEF,GAAG,CAAC;UACrCb,UAAU,CAACiB,WAAW,CAACX,MAAM,EAAEU,QAAQ,CAAC;UACxCf,OAAO,CAACiB,GAAG,CAACF,QAAQ,CAAC;QACtB;MACD,CAAC,CAAC;IACH,CAAC,CAAC;EACH;AACD;AAEAV,MAAM,CAACa,OAAO,GAAGjC,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}