{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst {\n  ReplaceSource\n} = require(\"webpack-sources\");\nconst Generator = require(\"../Generator\");\nconst InitFragment = require(\"../InitFragment\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst {\n  cssExportConvention\n} = require(\"../util/conventions\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorExportsConvention} CssGeneratorExportsConvention */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorLocalIdentName} CssGeneratorLocalIdentName */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Generator\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\nconst TYPES = new Set([\"css\"]);\nclass CssGenerator extends Generator {\n  /**\n   * @param {CssGeneratorExportsConvention} convention the convention of the exports name\n   * @param {CssGeneratorLocalIdentName | undefined} localIdentName css export local ident name\n   */\n  constructor(convention, localIdentName) {\n    super();\n    /** @type {CssGeneratorExportsConvention} */\n    this.convention = convention;\n    /** @type {CssGeneratorLocalIdentName | undefined} */\n    this.localIdentName = localIdentName;\n  }\n\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source} generated code\n   */\n  generate(module, generateContext) {\n    const originalSource = /** @type {Source} */module.originalSource();\n    const source = new ReplaceSource(originalSource);\n    /** @type {InitFragment[]} */\n    const initFragments = [];\n    /** @type {Map<string, string>} */\n    const cssExports = new Map();\n    generateContext.runtimeRequirements.add(RuntimeGlobals.hasCssModules);\n    let chunkInitFragments;\n    const templateContext = {\n      runtimeTemplate: generateContext.runtimeTemplate,\n      dependencyTemplates: generateContext.dependencyTemplates,\n      moduleGraph: generateContext.moduleGraph,\n      chunkGraph: generateContext.chunkGraph,\n      module,\n      runtime: generateContext.runtime,\n      runtimeRequirements: generateContext.runtimeRequirements,\n      concatenationScope: generateContext.concatenationScope,\n      codeGenerationResults: generateContext.codeGenerationResults,\n      initFragments,\n      cssExports,\n      get chunkInitFragments() {\n        if (!chunkInitFragments) {\n          const data = generateContext.getData();\n          chunkInitFragments = data.get(\"chunkInitFragments\");\n          if (!chunkInitFragments) {\n            chunkInitFragments = [];\n            data.set(\"chunkInitFragments\", chunkInitFragments);\n          }\n        }\n        return chunkInitFragments;\n      }\n    };\n\n    /**\n     * @param {Dependency} dependency dependency\n     */\n    const handleDependency = dependency => {\n      const constructor = /** @type {new (...args: any[]) => Dependency} */\n      dependency.constructor;\n      const template = generateContext.dependencyTemplates.get(constructor);\n      if (!template) {\n        throw new Error(\"No template for dependency: \" + dependency.constructor.name);\n      }\n      template.apply(dependency, source, templateContext);\n    };\n    module.dependencies.forEach(handleDependency);\n    if (module.presentationalDependencies !== undefined) module.presentationalDependencies.forEach(handleDependency);\n    if (cssExports.size > 0) {\n      const newCssExports = new Map();\n      for (let [name, v] of cssExports) {\n        for (let newName of cssExportConvention(name, this.convention)) {\n          newCssExports.set(newName, v);\n        }\n      }\n      const data = generateContext.getData();\n      data.set(\"css-exports\", newCssExports);\n    }\n    return InitFragment.addToSource(source, initFragments, generateContext);\n  }\n\n  /**\n   * @param {NormalModule} module fresh module\n   * @returns {Set<string>} available types (do not mutate)\n   */\n  getTypes(module) {\n    return TYPES;\n  }\n\n  /**\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n  getSize(module, type) {\n    const originalSource = module.originalSource();\n    if (!originalSource) {\n      return 0;\n    }\n    return originalSource.size();\n  }\n\n  /**\n   * @param {Hash} hash hash that will be modified\n   * @param {UpdateHashContext} updateHashContext context for updating hash\n   */\n  updateHash(hash, {\n    module\n  }) {}\n}\nmodule.exports = CssGenerator;","map":{"version":3,"names":["ReplaceSource","require","Generator","InitFragment","RuntimeGlobals","cssExportConvention","TYPES","Set","CssGenerator","constructor","convention","localIdentName","generate","module","generateContext","originalSource","source","initFragments","cssExports","Map","runtimeRequirements","add","hasCssModules","chunkInitFragments","templateContext","runtimeTemplate","dependencyTemplates","moduleGraph","chunkGraph","runtime","concatenationScope","codeGenerationResults","data","getData","get","set","handleDependency","dependency","template","Error","name","apply","dependencies","forEach","presentationalDependencies","undefined","size","newCssExports","v","newName","addToSource","getTypes","getSize","type","updateHash","hash","exports"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/css/CssGenerator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst { ReplaceSource } = require(\"webpack-sources\");\nconst Generator = require(\"../Generator\");\nconst InitFragment = require(\"../InitFragment\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst { cssExportConvention } = require(\"../util/conventions\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorExportsConvention} CssGeneratorExportsConvention */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorLocalIdentName} CssGeneratorLocalIdentName */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Generator\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\nconst TYPES = new Set([\"css\"]);\n\nclass CssGenerator extends Generator {\n\t/**\n\t * @param {CssGeneratorExportsConvention} convention the convention of the exports name\n\t * @param {CssGeneratorLocalIdentName | undefined} localIdentName css export local ident name\n\t */\n\tconstructor(convention, localIdentName) {\n\t\tsuper();\n\t\t/** @type {CssGeneratorExportsConvention} */\n\t\tthis.convention = convention;\n\t\t/** @type {CssGeneratorLocalIdentName | undefined} */\n\t\tthis.localIdentName = localIdentName;\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(module, generateContext) {\n\t\tconst originalSource = /** @type {Source} */ (module.originalSource());\n\t\tconst source = new ReplaceSource(originalSource);\n\t\t/** @type {InitFragment[]} */\n\t\tconst initFragments = [];\n\t\t/** @type {Map<string, string>} */\n\t\tconst cssExports = new Map();\n\n\t\tgenerateContext.runtimeRequirements.add(RuntimeGlobals.hasCssModules);\n\n\t\tlet chunkInitFragments;\n\t\tconst templateContext = {\n\t\t\truntimeTemplate: generateContext.runtimeTemplate,\n\t\t\tdependencyTemplates: generateContext.dependencyTemplates,\n\t\t\tmoduleGraph: generateContext.moduleGraph,\n\t\t\tchunkGraph: generateContext.chunkGraph,\n\t\t\tmodule,\n\t\t\truntime: generateContext.runtime,\n\t\t\truntimeRequirements: generateContext.runtimeRequirements,\n\t\t\tconcatenationScope: generateContext.concatenationScope,\n\t\t\tcodeGenerationResults: generateContext.codeGenerationResults,\n\t\t\tinitFragments,\n\t\t\tcssExports,\n\t\t\tget chunkInitFragments() {\n\t\t\t\tif (!chunkInitFragments) {\n\t\t\t\t\tconst data = generateContext.getData();\n\t\t\t\t\tchunkInitFragments = data.get(\"chunkInitFragments\");\n\t\t\t\t\tif (!chunkInitFragments) {\n\t\t\t\t\t\tchunkInitFragments = [];\n\t\t\t\t\t\tdata.set(\"chunkInitFragments\", chunkInitFragments);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn chunkInitFragments;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @param {Dependency} dependency dependency\n\t\t */\n\t\tconst handleDependency = dependency => {\n\t\t\tconst constructor = /** @type {new (...args: any[]) => Dependency} */ (\n\t\t\t\tdependency.constructor\n\t\t\t);\n\t\t\tconst template = generateContext.dependencyTemplates.get(constructor);\n\t\t\tif (!template) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"No template for dependency: \" + dependency.constructor.name\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttemplate.apply(dependency, source, templateContext);\n\t\t};\n\t\tmodule.dependencies.forEach(handleDependency);\n\t\tif (module.presentationalDependencies !== undefined)\n\t\t\tmodule.presentationalDependencies.forEach(handleDependency);\n\n\t\tif (cssExports.size > 0) {\n\t\t\tconst newCssExports = new Map();\n\t\t\tfor (let [name, v] of cssExports) {\n\t\t\t\tfor (let newName of cssExportConvention(name, this.convention)) {\n\t\t\t\t\tnewCssExports.set(newName, v);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst data = generateContext.getData();\n\t\t\tdata.set(\"css-exports\", newCssExports);\n\t\t}\n\n\t\treturn InitFragment.addToSource(source, initFragments, generateContext);\n\t}\n\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn TYPES;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\tconst originalSource = module.originalSource();\n\n\t\tif (!originalSource) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn originalSource.size();\n\t}\n\n\t/**\n\t * @param {Hash} hash hash that will be modified\n\t * @param {UpdateHashContext} updateHashContext context for updating hash\n\t */\n\tupdateHash(hash, { module }) {}\n}\n\nmodule.exports = CssGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}