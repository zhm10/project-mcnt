{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst util = require(\"util\");\nconst {\n  WEBPACK_MODULE_TYPE_RUNTIME\n} = require(\"../ModuleTypeConstants\");\nconst ModuleDependency = require(\"../dependencies/ModuleDependency\");\nconst formatLocation = require(\"../formatLocation\");\nconst {\n  LogType\n} = require(\"../logging/Logger\");\nconst AggressiveSplittingPlugin = require(\"../optimize/AggressiveSplittingPlugin\");\nconst SizeLimitsPlugin = require(\"../performance/SizeLimitsPlugin\");\nconst {\n  countIterable\n} = require(\"../util/IterableHelpers\");\nconst {\n  compareLocations,\n  compareChunksById,\n  compareNumbers,\n  compareIds,\n  concatComparators,\n  compareSelect,\n  compareModulesByIdentifier\n} = require(\"../util/comparators\");\nconst {\n  makePathsRelative,\n  parseResource\n} = require(\"../util/identifier\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"../ChunkGroup\").OriginRecord} OriginRecord */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compilation\").Asset} Asset */\n/** @typedef {import(\"../Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"../Compilation\").NormalizedStatsOptions} NormalizedStatsOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").DependencyLocation} DependencyLocation */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleProfile\")} ModuleProfile */\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n/** @template T @typedef {import(\"../util/comparators\").Comparator<T>} Comparator<T> */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n/** @typedef {import(\"../util/smartGrouping\").GroupConfig<any, object>} GroupConfig */\n/** @typedef {import(\"./StatsFactory\")} StatsFactory */\n/** @typedef {import(\"./StatsFactory\").StatsFactoryContext} StatsFactoryContext */\n\n/** @typedef {KnownStatsCompilation & Record<string, any>} StatsCompilation */\n/**\n * @typedef {Object} KnownStatsCompilation\n * @property {any=} env\n * @property {string=} name\n * @property {string=} hash\n * @property {string=} version\n * @property {number=} time\n * @property {number=} builtAt\n * @property {boolean=} needAdditionalPass\n * @property {string=} publicPath\n * @property {string=} outputPath\n * @property {Record<string, string[]>=} assetsByChunkName\n * @property {StatsAsset[]=} assets\n * @property {number=} filteredAssets\n * @property {StatsChunk[]=} chunks\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {Record<string, StatsChunkGroup>=} entrypoints\n * @property {Record<string, StatsChunkGroup>=} namedChunkGroups\n * @property {StatsError[]=} errors\n * @property {number=} errorsCount\n * @property {StatsError[]=} warnings\n * @property {number=} warningsCount\n * @property {StatsCompilation[]=} children\n * @property {Record<string, StatsLogging>=} logging\n */\n\n/** @typedef {KnownStatsLogging & Record<string, any>} StatsLogging */\n/**\n * @typedef {Object} KnownStatsLogging\n * @property {StatsLoggingEntry[]} entries\n * @property {number} filteredEntries\n * @property {boolean} debug\n */\n\n/** @typedef {KnownStatsLoggingEntry & Record<string, any>} StatsLoggingEntry */\n/**\n * @typedef {Object} KnownStatsLoggingEntry\n * @property {string} type\n * @property {string} message\n * @property {string[]=} trace\n * @property {StatsLoggingEntry[]=} children\n * @property {any[]=} args\n * @property {number=} time\n */\n\n/** @typedef {KnownStatsAsset & Record<string, any>} StatsAsset */\n/**\n * @typedef {Object} KnownStatsAsset\n * @property {string} type\n * @property {string} name\n * @property {AssetInfo} info\n * @property {number} size\n * @property {boolean} emitted\n * @property {boolean} comparedForEmit\n * @property {boolean} cached\n * @property {StatsAsset[]=} related\n * @property {(string|number)[]=} chunkNames\n * @property {(string|number)[]=} chunkIdHints\n * @property {(string|number)[]=} chunks\n * @property {(string|number)[]=} auxiliaryChunkNames\n * @property {(string|number)[]=} auxiliaryChunks\n * @property {(string|number)[]=} auxiliaryChunkIdHints\n * @property {number=} filteredRelated\n * @property {boolean=} isOverSizeLimit\n */\n\n/** @typedef {KnownStatsChunkGroup & Record<string, any>} StatsChunkGroup */\n/**\n * @typedef {Object} KnownStatsChunkGroup\n * @property {string=} name\n * @property {(string|number)[]=} chunks\n * @property {({ name: string, size?: number })[]=} assets\n * @property {number=} filteredAssets\n * @property {number=} assetsSize\n * @property {({ name: string, size?: number })[]=} auxiliaryAssets\n * @property {number=} filteredAuxiliaryAssets\n * @property {number=} auxiliaryAssetsSize\n * @property {{ [x: string]: StatsChunkGroup[] }=} children\n * @property {{ [x: string]: string[] }=} childAssets\n * @property {boolean=} isOverSizeLimit\n */\n\n/** @typedef {KnownStatsModule & Record<string, any>} StatsModule */\n/**\n * @typedef {Object} KnownStatsModule\n * @property {string=} type\n * @property {string=} moduleType\n * @property {string=} layer\n * @property {string=} identifier\n * @property {string=} name\n * @property {string=} nameForCondition\n * @property {number=} index\n * @property {number=} preOrderIndex\n * @property {number=} index2\n * @property {number=} postOrderIndex\n * @property {number=} size\n * @property {{[x: string]: number}=} sizes\n * @property {boolean=} cacheable\n * @property {boolean=} built\n * @property {boolean=} codeGenerated\n * @property {boolean=} buildTimeExecuted\n * @property {boolean=} cached\n * @property {boolean=} optional\n * @property {boolean=} orphan\n * @property {string|number=} id\n * @property {string|number=} issuerId\n * @property {(string|number)[]=} chunks\n * @property {(string|number)[]=} assets\n * @property {boolean=} dependent\n * @property {string=} issuer\n * @property {string=} issuerName\n * @property {StatsModuleIssuer[]=} issuerPath\n * @property {boolean=} failed\n * @property {number=} errors\n * @property {number=} warnings\n * @property {StatsProfile=} profile\n * @property {StatsModuleReason[]=} reasons\n * @property {(boolean | string[])=} usedExports\n * @property {string[]=} providedExports\n * @property {string[]=} optimizationBailout\n * @property {number=} depth\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {ReturnType<Source[\"source\"]>=} source\n */\n\n/** @typedef {KnownStatsProfile & Record<string, any>} StatsProfile */\n/**\n * @typedef {Object} KnownStatsProfile\n * @property {number} total\n * @property {number} resolving\n * @property {number} restoring\n * @property {number} building\n * @property {number} integration\n * @property {number} storing\n * @property {number} additionalResolving\n * @property {number} additionalIntegration\n * @property {number} factory\n * @property {number} dependencies\n */\n\n/** @typedef {KnownStatsModuleIssuer & Record<string, any>} StatsModuleIssuer */\n/**\n * @typedef {Object} KnownStatsModuleIssuer\n * @property {string=} identifier\n * @property {string=} name\n * @property {(string|number)=} id\n * @property {StatsProfile=} profile\n */\n\n/** @typedef {KnownStatsModuleReason & Record<string, any>} StatsModuleReason */\n/**\n * @typedef {Object} KnownStatsModuleReason\n * @property {string=} moduleIdentifier\n * @property {string=} module\n * @property {string=} moduleName\n * @property {string=} resolvedModuleIdentifier\n * @property {string=} resolvedModule\n * @property {string=} type\n * @property {boolean} active\n * @property {string=} explanation\n * @property {string=} userRequest\n * @property {string=} loc\n * @property {(string|number)=} moduleId\n * @property {(string|number)=} resolvedModuleId\n */\n\n/** @typedef {KnownStatsChunk & Record<string, any>} StatsChunk */\n/**\n * @typedef {Object} KnownStatsChunk\n * @property {boolean} rendered\n * @property {boolean} initial\n * @property {boolean} entry\n * @property {boolean} recorded\n * @property {string=} reason\n * @property {number} size\n * @property {Record<string, number>=} sizes\n * @property {string[]=} names\n * @property {string[]=} idHints\n * @property {string[]=} runtime\n * @property {string[]=} files\n * @property {string[]=} auxiliaryFiles\n * @property {string} hash\n * @property {Record<string, (string|number)[]>=} childrenByOrder\n * @property {(string|number)=} id\n * @property {(string|number)[]=} siblings\n * @property {(string|number)[]=} parents\n * @property {(string|number)[]=} children\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {StatsChunkOrigin[]=} origins\n */\n\n/** @typedef {KnownStatsChunkOrigin & Record<string, any>} StatsChunkOrigin */\n/**\n * @typedef {Object} KnownStatsChunkOrigin\n * @property {string=} module\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {string=} loc\n * @property {string=} request\n * @property {(string|number)=} moduleId\n */\n\n/** @typedef {KnownStatsModuleTraceItem & Record<string, any>} StatsModuleTraceItem */\n/**\n * @typedef {Object} KnownStatsModuleTraceItem\n * @property {string=} originIdentifier\n * @property {string=} originName\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {StatsModuleTraceDependency[]=} dependencies\n * @property {(string|number)=} originId\n * @property {(string|number)=} moduleId\n */\n\n/** @typedef {KnownStatsModuleTraceDependency & Record<string, any>} StatsModuleTraceDependency */\n/**\n * @typedef {Object} KnownStatsModuleTraceDependency\n * @property {string=} loc\n */\n\n/** @typedef {KnownStatsError & Record<string, any>} StatsError */\n/**\n * @typedef {Object} KnownStatsError\n * @property {string} message\n * @property {string=} chunkName\n * @property {boolean=} chunkEntry\n * @property {boolean=} chunkInitial\n * @property {string=} file\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {string=} loc\n * @property {string|number=} chunkId\n * @property {string|number=} moduleId\n * @property {StatsModuleTraceItem[]=} moduleTrace\n * @property {any=} details\n * @property {string=} stack\n */\n\n/** @typedef {Asset & { type: string, related: PreprocessedAsset[] }} PreprocessedAsset */\n\n/**\n * @template T\n * @template O\n * @typedef {Record<string, (object: O, data: T, context: StatsFactoryContext, options: NormalizedStatsOptions, factory: StatsFactory) => void>} ExtractorsByOption\n */\n\n/**\n * @typedef {Object} SimpleExtractors\n * @property {ExtractorsByOption<Compilation, StatsCompilation>} compilation\n * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>} asset\n * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>} asset$visible\n * @property {ExtractorsByOption<{ name: string, chunkGroup: ChunkGroup }, StatsChunkGroup>} chunkGroup\n * @property {ExtractorsByOption<Module, StatsModule>} module\n * @property {ExtractorsByOption<Module, StatsModule>} module$visible\n * @property {ExtractorsByOption<Module, StatsModuleIssuer>} moduleIssuer\n * @property {ExtractorsByOption<ModuleProfile, StatsProfile>} profile\n * @property {ExtractorsByOption<ModuleGraphConnection, StatsModuleReason>} moduleReason\n * @property {ExtractorsByOption<Chunk, StatsChunk>} chunk\n * @property {ExtractorsByOption<OriginRecord, StatsChunkOrigin>} chunkOrigin\n * @property {ExtractorsByOption<WebpackError, StatsError>} error\n * @property {ExtractorsByOption<WebpackError, StatsError>} warning\n * @property {ExtractorsByOption<{ origin: Module, module: Module }, StatsModuleTraceItem>} moduleTraceItem\n * @property {ExtractorsByOption<Dependency, StatsModuleTraceDependency>} moduleTraceDependency\n */\n\n/**\n * @template T\n * @template I\n * @param {Iterable<T>} items items to select from\n * @param {function(T): Iterable<I>} selector selector function to select values from item\n * @returns {I[]} array of values\n */\nconst uniqueArray = (items, selector) => {\n  /** @type {Set<I>} */\n  const set = new Set();\n  for (const item of items) {\n    for (const i of selector(item)) {\n      set.add(i);\n    }\n  }\n  return Array.from(set);\n};\n\n/**\n * @template T\n * @template I\n * @param {Iterable<T>} items items to select from\n * @param {function(T): Iterable<I>} selector selector function to select values from item\n * @param {Comparator<I>} comparator comparator function\n * @returns {I[]} array of values\n */\nconst uniqueOrderedArray = (items, selector, comparator) => {\n  return uniqueArray(items, selector).sort(comparator);\n};\n\n/** @template T @template R @typedef {{ [P in keyof T]: R }} MappedValues<T, R> */\n\n/**\n * @template T\n * @template R\n * @param {T} obj object to be mapped\n * @param {function(T[keyof T], keyof T): R} fn mapping function\n * @returns {MappedValues<T, R>} mapped object\n */\nconst mapObject = (obj, fn) => {\n  const newObj = Object.create(null);\n  for (const key of Object.keys(obj)) {\n    newObj[key] = fn(obj[key], /** @type {keyof T} */key);\n  }\n  return newObj;\n};\n\n/**\n * @param {Compilation} compilation the compilation\n * @param {function(Compilation, string): any[]} getItems get items\n * @returns {number} total number\n */\nconst countWithChildren = (compilation, getItems) => {\n  let count = getItems(compilation, \"\").length;\n  for (const child of compilation.children) {\n    count += countWithChildren(child, (c, type) => getItems(c, `.children[].compilation${type}`));\n  }\n  return count;\n};\n\n/** @type {ExtractorsByOption<WebpackError | string, StatsError>} */\nconst EXTRACT_ERROR = {\n  _: (object, error, context, {\n    requestShortener\n  }) => {\n    // TODO webpack 6 disallow strings in the errors/warnings list\n    if (typeof error === \"string\") {\n      object.message = error;\n    } else {\n      if (error.chunk) {\n        object.chunkName = error.chunk.name;\n        object.chunkEntry = error.chunk.hasRuntime();\n        object.chunkInitial = error.chunk.canBeInitial();\n      }\n      if (error.file) {\n        object.file = error.file;\n      }\n      if (error.module) {\n        object.moduleIdentifier = error.module.identifier();\n        object.moduleName = error.module.readableIdentifier(requestShortener);\n      }\n      if (error.loc) {\n        object.loc = formatLocation(error.loc);\n      }\n      object.message = error.message;\n    }\n  },\n  ids: (object, error, {\n    compilation: {\n      chunkGraph\n    }\n  }) => {\n    if (typeof error !== \"string\") {\n      if (error.chunk) {\n        object.chunkId = error.chunk.id;\n      }\n      if (error.module) {\n        object.moduleId = chunkGraph.getModuleId(error.module);\n      }\n    }\n  },\n  moduleTrace: (object, error, context, options, factory) => {\n    if (typeof error !== \"string\" && error.module) {\n      const {\n        type,\n        compilation: {\n          moduleGraph\n        }\n      } = context;\n      /** @type {Set<Module>} */\n      const visitedModules = new Set();\n      const moduleTrace = [];\n      let current = error.module;\n      while (current) {\n        if (visitedModules.has(current)) break; // circular (technically impossible, but how knows)\n        visitedModules.add(current);\n        const origin = moduleGraph.getIssuer(current);\n        if (!origin) break;\n        moduleTrace.push({\n          origin,\n          module: current\n        });\n        current = origin;\n      }\n      object.moduleTrace = factory.create(`${type}.moduleTrace`, moduleTrace, context);\n    }\n  },\n  errorDetails: (object, error, {\n    type,\n    compilation,\n    cachedGetErrors,\n    cachedGetWarnings\n  }, {\n    errorDetails\n  }) => {\n    if (typeof error !== \"string\" && (errorDetails === true || type.endsWith(\".error\") && cachedGetErrors(compilation).length < 3)) {\n      object.details = error.details;\n    }\n  },\n  errorStack: (object, error) => {\n    if (typeof error !== \"string\") {\n      object.stack = error.stack;\n    }\n  }\n};\n\n/** @type {SimpleExtractors} */\nconst SIMPLE_EXTRACTORS = {\n  compilation: {\n    _: (object, compilation, context, options) => {\n      if (!context.makePathsRelative) {\n        context.makePathsRelative = makePathsRelative.bindContextCache(compilation.compiler.context, compilation.compiler.root);\n      }\n      if (!context.cachedGetErrors) {\n        const map = new WeakMap();\n        context.cachedGetErrors = compilation => {\n          return map.get(compilation) || (errors => (map.set(compilation, errors), errors))(compilation.getErrors());\n        };\n      }\n      if (!context.cachedGetWarnings) {\n        const map = new WeakMap();\n        context.cachedGetWarnings = compilation => {\n          return map.get(compilation) || (warnings => (map.set(compilation, warnings), warnings))(compilation.getWarnings());\n        };\n      }\n      if (compilation.name) {\n        object.name = compilation.name;\n      }\n      if (compilation.needAdditionalPass) {\n        object.needAdditionalPass = true;\n      }\n      const {\n        logging,\n        loggingDebug,\n        loggingTrace\n      } = options;\n      if (logging || loggingDebug && loggingDebug.length > 0) {\n        const util = require(\"util\");\n        object.logging = {};\n        let acceptedTypes;\n        let collapsedGroups = false;\n        switch (logging) {\n          default:\n            acceptedTypes = new Set();\n            break;\n          case \"error\":\n            acceptedTypes = new Set([LogType.error]);\n            break;\n          case \"warn\":\n            acceptedTypes = new Set([LogType.error, LogType.warn]);\n            break;\n          case \"info\":\n            acceptedTypes = new Set([LogType.error, LogType.warn, LogType.info]);\n            break;\n          case \"log\":\n            acceptedTypes = new Set([LogType.error, LogType.warn, LogType.info, LogType.log, LogType.group, LogType.groupEnd, LogType.groupCollapsed, LogType.clear]);\n            break;\n          case \"verbose\":\n            acceptedTypes = new Set([LogType.error, LogType.warn, LogType.info, LogType.log, LogType.group, LogType.groupEnd, LogType.groupCollapsed, LogType.profile, LogType.profileEnd, LogType.time, LogType.status, LogType.clear]);\n            collapsedGroups = true;\n            break;\n        }\n        const cachedMakePathsRelative = makePathsRelative.bindContextCache(options.context, compilation.compiler.root);\n        let depthInCollapsedGroup = 0;\n        for (const [origin, logEntries] of compilation.logging) {\n          const debugMode = loggingDebug.some(fn => fn(origin));\n          if (logging === false && !debugMode) continue;\n          /** @type {KnownStatsLoggingEntry[]} */\n          const groupStack = [];\n          /** @type {KnownStatsLoggingEntry[]} */\n          const rootList = [];\n          let currentList = rootList;\n          let processedLogEntries = 0;\n          for (const entry of logEntries) {\n            let type = entry.type;\n            if (!debugMode && !acceptedTypes.has(type)) continue;\n\n            // Expand groups in verbose and debug modes\n            if (type === LogType.groupCollapsed && (debugMode || collapsedGroups)) type = LogType.group;\n            if (depthInCollapsedGroup === 0) {\n              processedLogEntries++;\n            }\n            if (type === LogType.groupEnd) {\n              groupStack.pop();\n              if (groupStack.length > 0) {\n                currentList = groupStack[groupStack.length - 1].children;\n              } else {\n                currentList = rootList;\n              }\n              if (depthInCollapsedGroup > 0) depthInCollapsedGroup--;\n              continue;\n            }\n            let message = undefined;\n            if (entry.type === LogType.time) {\n              message = `${entry.args[0]}: ${entry.args[1] * 1000 + entry.args[2] / 1000000} ms`;\n            } else if (entry.args && entry.args.length > 0) {\n              message = util.format(entry.args[0], ...entry.args.slice(1));\n            }\n            /** @type {KnownStatsLoggingEntry} */\n            const newEntry = {\n              ...entry,\n              type,\n              message,\n              trace: loggingTrace ? entry.trace : undefined,\n              children: type === LogType.group || type === LogType.groupCollapsed ? [] : undefined\n            };\n            currentList.push(newEntry);\n            if (newEntry.children) {\n              groupStack.push(newEntry);\n              currentList = newEntry.children;\n              if (depthInCollapsedGroup > 0) {\n                depthInCollapsedGroup++;\n              } else if (type === LogType.groupCollapsed) {\n                depthInCollapsedGroup = 1;\n              }\n            }\n          }\n          let name = cachedMakePathsRelative(origin).replace(/\\|/g, \" \");\n          if (name in object.logging) {\n            let i = 1;\n            while (`${name}#${i}` in object.logging) {\n              i++;\n            }\n            name = `${name}#${i}`;\n          }\n          object.logging[name] = {\n            entries: rootList,\n            filteredEntries: logEntries.length - processedLogEntries,\n            debug: debugMode\n          };\n        }\n      }\n    },\n    hash: (object, compilation) => {\n      object.hash = compilation.hash;\n    },\n    version: object => {\n      object.version = require(\"../../package.json\").version;\n    },\n    env: (object, compilation, context, {\n      _env\n    }) => {\n      object.env = _env;\n    },\n    timings: (object, compilation) => {\n      object.time = compilation.endTime - compilation.startTime;\n    },\n    builtAt: (object, compilation) => {\n      object.builtAt = compilation.endTime;\n    },\n    publicPath: (object, compilation) => {\n      object.publicPath = compilation.getPath(compilation.outputOptions.publicPath);\n    },\n    outputPath: (object, compilation) => {\n      object.outputPath = compilation.outputOptions.path;\n    },\n    assets: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      /** @type {Map<string, Chunk[]>} */\n      const compilationFileToChunks = new Map();\n      /** @type {Map<string, Chunk[]>} */\n      const compilationAuxiliaryFileToChunks = new Map();\n      for (const chunk of compilation.chunks) {\n        for (const file of chunk.files) {\n          let array = compilationFileToChunks.get(file);\n          if (array === undefined) {\n            array = [];\n            compilationFileToChunks.set(file, array);\n          }\n          array.push(chunk);\n        }\n        for (const file of chunk.auxiliaryFiles) {\n          let array = compilationAuxiliaryFileToChunks.get(file);\n          if (array === undefined) {\n            array = [];\n            compilationAuxiliaryFileToChunks.set(file, array);\n          }\n          array.push(chunk);\n        }\n      }\n      /** @type {Map<string, PreprocessedAsset>} */\n      const assetMap = new Map();\n      /** @type {Set<PreprocessedAsset>} */\n      const assets = new Set();\n      for (const asset of compilation.getAssets()) {\n        /** @type {PreprocessedAsset} */\n        const item = {\n          ...asset,\n          type: \"asset\",\n          related: undefined\n        };\n        assets.add(item);\n        assetMap.set(asset.name, item);\n      }\n      for (const item of assetMap.values()) {\n        const related = item.info.related;\n        if (!related) continue;\n        for (const type of Object.keys(related)) {\n          const relatedEntry = related[type];\n          const deps = Array.isArray(relatedEntry) ? relatedEntry : [relatedEntry];\n          for (const dep of deps) {\n            const depItem = assetMap.get(dep);\n            if (!depItem) continue;\n            assets.delete(depItem);\n            depItem.type = type;\n            item.related = item.related || [];\n            item.related.push(depItem);\n          }\n        }\n      }\n      object.assetsByChunkName = {};\n      for (const [file, chunks] of compilationFileToChunks) {\n        for (const chunk of chunks) {\n          const name = chunk.name;\n          if (!name) continue;\n          if (!Object.prototype.hasOwnProperty.call(object.assetsByChunkName, name)) {\n            object.assetsByChunkName[name] = [];\n          }\n          object.assetsByChunkName[name].push(file);\n        }\n      }\n      const groupedAssets = factory.create(`${type}.assets`, Array.from(assets), {\n        ...context,\n        compilationFileToChunks,\n        compilationAuxiliaryFileToChunks\n      });\n      const limited = spaceLimited(groupedAssets, options.assetsSpace);\n      object.assets = limited.children;\n      object.filteredAssets = limited.filteredChildren;\n    },\n    chunks: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      object.chunks = factory.create(`${type}.chunks`, Array.from(compilation.chunks), context);\n    },\n    modules: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      const array = Array.from(compilation.modules);\n      const groupedModules = factory.create(`${type}.modules`, array, context);\n      const limited = spaceLimited(groupedModules, options.modulesSpace);\n      object.modules = limited.children;\n      object.filteredModules = limited.filteredChildren;\n    },\n    entrypoints: (object, compilation, context, {\n      entrypoints,\n      chunkGroups,\n      chunkGroupAuxiliary,\n      chunkGroupChildren\n    }, factory) => {\n      const {\n        type\n      } = context;\n      const array = Array.from(compilation.entrypoints, ([key, value]) => ({\n        name: key,\n        chunkGroup: value\n      }));\n      if (entrypoints === \"auto\" && !chunkGroups) {\n        if (array.length > 5) return;\n        if (!chunkGroupChildren && array.every(({\n          chunkGroup\n        }) => {\n          if (chunkGroup.chunks.length !== 1) return false;\n          const chunk = chunkGroup.chunks[0];\n          return chunk.files.size === 1 && (!chunkGroupAuxiliary || chunk.auxiliaryFiles.size === 0);\n        })) {\n          return;\n        }\n      }\n      object.entrypoints = factory.create(`${type}.entrypoints`, array, context);\n    },\n    chunkGroups: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      const array = Array.from(compilation.namedChunkGroups, ([key, value]) => ({\n        name: key,\n        chunkGroup: value\n      }));\n      object.namedChunkGroups = factory.create(`${type}.namedChunkGroups`, array, context);\n    },\n    errors: (object, compilation, context, options, factory) => {\n      const {\n        type,\n        cachedGetErrors\n      } = context;\n      const rawErrors = cachedGetErrors(compilation);\n      const factorizedErrors = factory.create(`${type}.errors`, cachedGetErrors(compilation), context);\n      let filtered = 0;\n      if (options.errorDetails === \"auto\" && rawErrors.length >= 3) {\n        filtered = rawErrors.map(e => typeof e !== \"string\" && e.details).filter(Boolean).length;\n      }\n      if (options.errorDetails === true || !Number.isFinite(options.errorsSpace)) {\n        object.errors = factorizedErrors;\n        if (filtered) object.filteredErrorDetailsCount = filtered;\n        return;\n      }\n      const [errors, filteredBySpace] = errorsSpaceLimit(factorizedErrors, options.errorsSpace);\n      object.filteredErrorDetailsCount = filtered + filteredBySpace;\n      object.errors = errors;\n    },\n    errorsCount: (object, compilation, {\n      cachedGetErrors\n    }) => {\n      object.errorsCount = countWithChildren(compilation, c => cachedGetErrors(c));\n    },\n    warnings: (object, compilation, context, options, factory) => {\n      const {\n        type,\n        cachedGetWarnings\n      } = context;\n      const rawWarnings = factory.create(`${type}.warnings`, cachedGetWarnings(compilation), context);\n      let filtered = 0;\n      if (options.errorDetails === \"auto\") {\n        filtered = cachedGetWarnings(compilation).map(e => typeof e !== \"string\" && e.details).filter(Boolean).length;\n      }\n      if (options.errorDetails === true || !Number.isFinite(options.warningsSpace)) {\n        object.warnings = rawWarnings;\n        if (filtered) object.filteredWarningDetailsCount = filtered;\n        return;\n      }\n      const [warnings, filteredBySpace] = errorsSpaceLimit(rawWarnings, options.warningsSpace);\n      object.filteredWarningDetailsCount = filtered + filteredBySpace;\n      object.warnings = warnings;\n    },\n    warningsCount: (object, compilation, context, {\n      warningsFilter\n    }, factory) => {\n      const {\n        type,\n        cachedGetWarnings\n      } = context;\n      object.warningsCount = countWithChildren(compilation, (c, childType) => {\n        if (!warningsFilter && warningsFilter.length === 0) return cachedGetWarnings(c);\n        return factory.create(`${type}${childType}.warnings`, cachedGetWarnings(c), context).filter(warning => {\n          const warningString = Object.keys(warning).map(key => `${warning[key]}`).join(\"\\n\");\n          return !warningsFilter.some(filter => filter(warning, warningString));\n        });\n      });\n    },\n    children: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      object.children = factory.create(`${type}.children`, compilation.children, context);\n    }\n  },\n  asset: {\n    _: (object, asset, context, options, factory) => {\n      const {\n        compilation\n      } = context;\n      object.type = asset.type;\n      object.name = asset.name;\n      object.size = asset.source.size();\n      object.emitted = compilation.emittedAssets.has(asset.name);\n      object.comparedForEmit = compilation.comparedForEmitAssets.has(asset.name);\n      const cached = !object.emitted && !object.comparedForEmit;\n      object.cached = cached;\n      object.info = asset.info;\n      if (!cached || options.cachedAssets) {\n        Object.assign(object, factory.create(`${context.type}$visible`, asset, context));\n      }\n    }\n  },\n  asset$visible: {\n    _: (object, asset, {\n      compilation,\n      compilationFileToChunks,\n      compilationAuxiliaryFileToChunks\n    }) => {\n      const chunks = compilationFileToChunks.get(asset.name) || [];\n      const auxiliaryChunks = compilationAuxiliaryFileToChunks.get(asset.name) || [];\n      object.chunkNames = uniqueOrderedArray(chunks, c => c.name ? [c.name] : [], compareIds);\n      object.chunkIdHints = uniqueOrderedArray(chunks, c => Array.from(c.idNameHints), compareIds);\n      object.auxiliaryChunkNames = uniqueOrderedArray(auxiliaryChunks, c => c.name ? [c.name] : [], compareIds);\n      object.auxiliaryChunkIdHints = uniqueOrderedArray(auxiliaryChunks, c => Array.from(c.idNameHints), compareIds);\n      object.filteredRelated = asset.related ? asset.related.length : undefined;\n    },\n    relatedAssets: (object, asset, context, options, factory) => {\n      const {\n        type\n      } = context;\n      object.related = factory.create(`${type.slice(0, -8)}.related`, asset.related, context);\n      object.filteredRelated = asset.related ? asset.related.length - object.related.length : undefined;\n    },\n    ids: (object, asset, {\n      compilationFileToChunks,\n      compilationAuxiliaryFileToChunks\n    }) => {\n      const chunks = compilationFileToChunks.get(asset.name) || [];\n      const auxiliaryChunks = compilationAuxiliaryFileToChunks.get(asset.name) || [];\n      object.chunks = uniqueOrderedArray(chunks, c => c.ids, compareIds);\n      object.auxiliaryChunks = uniqueOrderedArray(auxiliaryChunks, c => c.ids, compareIds);\n    },\n    performance: (object, asset) => {\n      object.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(asset.source);\n    }\n  },\n  chunkGroup: {\n    _: (object, {\n      name,\n      chunkGroup\n    }, {\n      compilation,\n      compilation: {\n        moduleGraph,\n        chunkGraph\n      }\n    }, {\n      ids,\n      chunkGroupAuxiliary,\n      chunkGroupChildren,\n      chunkGroupMaxAssets\n    }) => {\n      const children = chunkGroupChildren && chunkGroup.getChildrenByOrders(moduleGraph, chunkGraph);\n      /**\n       * @param {string} name Name\n       * @returns {{ name: string, size: number }} Asset object\n       */\n      const toAsset = name => {\n        const asset = compilation.getAsset(name);\n        return {\n          name,\n          size: asset ? asset.info.size : -1\n        };\n      };\n      /** @type {(total: number, asset: { size: number }) => number} */\n      const sizeReducer = (total, {\n        size\n      }) => total + size;\n      const assets = uniqueArray(chunkGroup.chunks, c => c.files).map(toAsset);\n      const auxiliaryAssets = uniqueOrderedArray(chunkGroup.chunks, c => c.auxiliaryFiles, compareIds).map(toAsset);\n      const assetsSize = assets.reduce(sizeReducer, 0);\n      const auxiliaryAssetsSize = auxiliaryAssets.reduce(sizeReducer, 0);\n      /** @type {KnownStatsChunkGroup} */\n      const statsChunkGroup = {\n        name,\n        chunks: ids ? chunkGroup.chunks.map(c => c.id) : undefined,\n        assets: assets.length <= chunkGroupMaxAssets ? assets : undefined,\n        filteredAssets: assets.length <= chunkGroupMaxAssets ? 0 : assets.length,\n        assetsSize,\n        auxiliaryAssets: chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets ? auxiliaryAssets : undefined,\n        filteredAuxiliaryAssets: chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets ? 0 : auxiliaryAssets.length,\n        auxiliaryAssetsSize,\n        children: children ? mapObject(children, groups => groups.map(group => {\n          const assets = uniqueArray(group.chunks, c => c.files).map(toAsset);\n          const auxiliaryAssets = uniqueOrderedArray(group.chunks, c => c.auxiliaryFiles, compareIds).map(toAsset);\n\n          /** @type {KnownStatsChunkGroup} */\n          const childStatsChunkGroup = {\n            name: group.name,\n            chunks: ids ? group.chunks.map(c => c.id) : undefined,\n            assets: assets.length <= chunkGroupMaxAssets ? assets : undefined,\n            filteredAssets: assets.length <= chunkGroupMaxAssets ? 0 : assets.length,\n            auxiliaryAssets: chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets ? auxiliaryAssets : undefined,\n            filteredAuxiliaryAssets: chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets ? 0 : auxiliaryAssets.length\n          };\n          return childStatsChunkGroup;\n        })) : undefined,\n        childAssets: children ? mapObject(children, groups => {\n          /** @type {Set<string>} */\n          const set = new Set();\n          for (const group of groups) {\n            for (const chunk of group.chunks) {\n              for (const asset of chunk.files) {\n                set.add(asset);\n              }\n            }\n          }\n          return Array.from(set);\n        }) : undefined\n      };\n      Object.assign(object, statsChunkGroup);\n    },\n    performance: (object, {\n      chunkGroup\n    }) => {\n      object.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(chunkGroup);\n    }\n  },\n  module: {\n    _: (object, module, context, options, factory) => {\n      const {\n        compilation,\n        type\n      } = context;\n      const built = compilation.builtModules.has(module);\n      const codeGenerated = compilation.codeGeneratedModules.has(module);\n      const buildTimeExecuted = compilation.buildTimeExecutedModules.has(module);\n      /** @type {{[x: string]: number}} */\n      const sizes = {};\n      for (const sourceType of module.getSourceTypes()) {\n        sizes[sourceType] = module.size(sourceType);\n      }\n      /** @type {KnownStatsModule} */\n      const statsModule = {\n        type: \"module\",\n        moduleType: module.type,\n        layer: module.layer,\n        size: module.size(),\n        sizes,\n        built,\n        codeGenerated,\n        buildTimeExecuted,\n        cached: !built && !codeGenerated\n      };\n      Object.assign(object, statsModule);\n      if (built || codeGenerated || options.cachedModules) {\n        Object.assign(object, factory.create(`${type}$visible`, module, context));\n      }\n    }\n  },\n  module$visible: {\n    _: (object, module, context, {\n      requestShortener\n    }, factory) => {\n      const {\n        compilation,\n        type,\n        rootModules\n      } = context;\n      const {\n        moduleGraph\n      } = compilation;\n      /** @type {Module[]} */\n      const path = [];\n      const issuer = moduleGraph.getIssuer(module);\n      let current = issuer;\n      while (current) {\n        path.push(current);\n        current = moduleGraph.getIssuer(current);\n      }\n      path.reverse();\n      const profile = moduleGraph.getProfile(module);\n      const errors = module.getErrors();\n      const errorsCount = errors !== undefined ? countIterable(errors) : 0;\n      const warnings = module.getWarnings();\n      const warningsCount = warnings !== undefined ? countIterable(warnings) : 0;\n      /** @type {{[x: string]: number}} */\n      const sizes = {};\n      for (const sourceType of module.getSourceTypes()) {\n        sizes[sourceType] = module.size(sourceType);\n      }\n      /** @type {KnownStatsModule} */\n      const statsModule = {\n        identifier: module.identifier(),\n        name: module.readableIdentifier(requestShortener),\n        nameForCondition: module.nameForCondition(),\n        index: moduleGraph.getPreOrderIndex(module),\n        preOrderIndex: moduleGraph.getPreOrderIndex(module),\n        index2: moduleGraph.getPostOrderIndex(module),\n        postOrderIndex: moduleGraph.getPostOrderIndex(module),\n        cacheable: module.buildInfo.cacheable,\n        optional: module.isOptional(moduleGraph),\n        orphan: !type.endsWith(\"module.modules[].module$visible\") && compilation.chunkGraph.getNumberOfModuleChunks(module) === 0,\n        dependent: rootModules ? !rootModules.has(module) : undefined,\n        issuer: issuer && issuer.identifier(),\n        issuerName: issuer && issuer.readableIdentifier(requestShortener),\n        issuerPath: issuer && factory.create(`${type.slice(0, -8)}.issuerPath`, path, context),\n        failed: errorsCount > 0,\n        errors: errorsCount,\n        warnings: warningsCount\n      };\n      Object.assign(object, statsModule);\n      if (profile) {\n        object.profile = factory.create(`${type.slice(0, -8)}.profile`, profile, context);\n      }\n    },\n    ids: (object, module, {\n      compilation: {\n        chunkGraph,\n        moduleGraph\n      }\n    }) => {\n      object.id = chunkGraph.getModuleId(module);\n      const issuer = moduleGraph.getIssuer(module);\n      object.issuerId = issuer && chunkGraph.getModuleId(issuer);\n      object.chunks = Array.from(chunkGraph.getOrderedModuleChunksIterable(module, compareChunksById), chunk => chunk.id);\n    },\n    moduleAssets: (object, module) => {\n      object.assets = module.buildInfo.assets ? Object.keys(module.buildInfo.assets) : [];\n    },\n    reasons: (object, module, context, options, factory) => {\n      const {\n        type,\n        compilation: {\n          moduleGraph\n        }\n      } = context;\n      const groupsReasons = factory.create(`${type.slice(0, -8)}.reasons`, Array.from(moduleGraph.getIncomingConnections(module)), context);\n      const limited = spaceLimited(groupsReasons, options.reasonsSpace);\n      object.reasons = limited.children;\n      object.filteredReasons = limited.filteredChildren;\n    },\n    usedExports: (object, module, {\n      runtime,\n      compilation: {\n        moduleGraph\n      }\n    }) => {\n      const usedExports = moduleGraph.getUsedExports(module, runtime);\n      if (usedExports === null) {\n        object.usedExports = null;\n      } else if (typeof usedExports === \"boolean\") {\n        object.usedExports = usedExports;\n      } else {\n        object.usedExports = Array.from(usedExports);\n      }\n    },\n    providedExports: (object, module, {\n      compilation: {\n        moduleGraph\n      }\n    }) => {\n      const providedExports = moduleGraph.getProvidedExports(module);\n      object.providedExports = Array.isArray(providedExports) ? providedExports : null;\n    },\n    optimizationBailout: (object, module, {\n      compilation: {\n        moduleGraph\n      }\n    }, {\n      requestShortener\n    }) => {\n      object.optimizationBailout = moduleGraph.getOptimizationBailout(module).map(item => {\n        if (typeof item === \"function\") return item(requestShortener);\n        return item;\n      });\n    },\n    depth: (object, module, {\n      compilation: {\n        moduleGraph\n      }\n    }) => {\n      object.depth = moduleGraph.getDepth(module);\n    },\n    nestedModules: (object, module, context, options, factory) => {\n      const {\n        type\n      } = context;\n      const innerModules = /** @type {Module & { modules?: Module[] }} */module.modules;\n      if (Array.isArray(innerModules)) {\n        const groupedModules = factory.create(`${type.slice(0, -8)}.modules`, innerModules, context);\n        const limited = spaceLimited(groupedModules, options.nestedModulesSpace);\n        object.modules = limited.children;\n        object.filteredModules = limited.filteredChildren;\n      }\n    },\n    source: (object, module) => {\n      const originalSource = module.originalSource();\n      if (originalSource) {\n        object.source = originalSource.source();\n      }\n    }\n  },\n  profile: {\n    _: (object, profile) => {\n      /** @type {KnownStatsProfile} */\n      const statsProfile = {\n        total: profile.factory + profile.restoring + profile.integration + profile.building + profile.storing,\n        resolving: profile.factory,\n        restoring: profile.restoring,\n        building: profile.building,\n        integration: profile.integration,\n        storing: profile.storing,\n        additionalResolving: profile.additionalFactories,\n        additionalIntegration: profile.additionalIntegration,\n        // TODO remove this in webpack 6\n        factory: profile.factory,\n        // TODO remove this in webpack 6\n        dependencies: profile.additionalFactories\n      };\n      Object.assign(object, statsProfile);\n    }\n  },\n  moduleIssuer: {\n    _: (object, module, context, {\n      requestShortener\n    }, factory) => {\n      const {\n        compilation,\n        type\n      } = context;\n      const {\n        moduleGraph\n      } = compilation;\n      const profile = moduleGraph.getProfile(module);\n      /** @type {KnownStatsModuleIssuer} */\n      const statsModuleIssuer = {\n        identifier: module.identifier(),\n        name: module.readableIdentifier(requestShortener)\n      };\n      Object.assign(object, statsModuleIssuer);\n      if (profile) {\n        object.profile = factory.create(`${type}.profile`, profile, context);\n      }\n    },\n    ids: (object, module, {\n      compilation: {\n        chunkGraph\n      }\n    }) => {\n      object.id = chunkGraph.getModuleId(module);\n    }\n  },\n  moduleReason: {\n    _: (object, reason, {\n      runtime\n    }, {\n      requestShortener\n    }) => {\n      const dep = reason.dependency;\n      const moduleDep = dep && dep instanceof ModuleDependency ? dep : undefined;\n      /** @type {KnownStatsModuleReason} */\n      const statsModuleReason = {\n        moduleIdentifier: reason.originModule ? reason.originModule.identifier() : null,\n        module: reason.originModule ? reason.originModule.readableIdentifier(requestShortener) : null,\n        moduleName: reason.originModule ? reason.originModule.readableIdentifier(requestShortener) : null,\n        resolvedModuleIdentifier: reason.resolvedOriginModule ? reason.resolvedOriginModule.identifier() : null,\n        resolvedModule: reason.resolvedOriginModule ? reason.resolvedOriginModule.readableIdentifier(requestShortener) : null,\n        type: reason.dependency ? reason.dependency.type : null,\n        active: reason.isActive(runtime),\n        explanation: reason.explanation,\n        userRequest: moduleDep && moduleDep.userRequest || null\n      };\n      Object.assign(object, statsModuleReason);\n      if (reason.dependency) {\n        const locInfo = formatLocation(reason.dependency.loc);\n        if (locInfo) {\n          object.loc = locInfo;\n        }\n      }\n    },\n    ids: (object, reason, {\n      compilation: {\n        chunkGraph\n      }\n    }) => {\n      object.moduleId = reason.originModule ? chunkGraph.getModuleId(reason.originModule) : null;\n      object.resolvedModuleId = reason.resolvedOriginModule ? chunkGraph.getModuleId(reason.resolvedOriginModule) : null;\n    }\n  },\n  chunk: {\n    _: (object, chunk, {\n      makePathsRelative,\n      compilation: {\n        chunkGraph\n      }\n    }) => {\n      const childIdByOrder = chunk.getChildIdsByOrders(chunkGraph);\n\n      /** @type {KnownStatsChunk} */\n      const statsChunk = {\n        rendered: chunk.rendered,\n        initial: chunk.canBeInitial(),\n        entry: chunk.hasRuntime(),\n        recorded: AggressiveSplittingPlugin.wasChunkRecorded(chunk),\n        reason: chunk.chunkReason,\n        size: chunkGraph.getChunkModulesSize(chunk),\n        sizes: chunkGraph.getChunkModulesSizes(chunk),\n        names: chunk.name ? [chunk.name] : [],\n        idHints: Array.from(chunk.idNameHints),\n        runtime: chunk.runtime === undefined ? undefined : typeof chunk.runtime === \"string\" ? [makePathsRelative(chunk.runtime)] : Array.from(chunk.runtime.sort(), makePathsRelative),\n        files: Array.from(chunk.files),\n        auxiliaryFiles: Array.from(chunk.auxiliaryFiles).sort(compareIds),\n        hash: chunk.renderedHash,\n        childrenByOrder: childIdByOrder\n      };\n      Object.assign(object, statsChunk);\n    },\n    ids: (object, chunk) => {\n      object.id = chunk.id;\n    },\n    chunkRelations: (object, chunk, {\n      compilation: {\n        chunkGraph\n      }\n    }) => {\n      /** @type {Set<string|number>} */\n      const parents = new Set();\n      /** @type {Set<string|number>} */\n      const children = new Set();\n      /** @type {Set<string|number>} */\n      const siblings = new Set();\n      for (const chunkGroup of chunk.groupsIterable) {\n        for (const parentGroup of chunkGroup.parentsIterable) {\n          for (const chunk of parentGroup.chunks) {\n            parents.add(chunk.id);\n          }\n        }\n        for (const childGroup of chunkGroup.childrenIterable) {\n          for (const chunk of childGroup.chunks) {\n            children.add(chunk.id);\n          }\n        }\n        for (const sibling of chunkGroup.chunks) {\n          if (sibling !== chunk) siblings.add(sibling.id);\n        }\n      }\n      object.siblings = Array.from(siblings).sort(compareIds);\n      object.parents = Array.from(parents).sort(compareIds);\n      object.children = Array.from(children).sort(compareIds);\n    },\n    chunkModules: (object, chunk, context, options, factory) => {\n      const {\n        type,\n        compilation: {\n          chunkGraph\n        }\n      } = context;\n      const array = chunkGraph.getChunkModules(chunk);\n      const groupedModules = factory.create(`${type}.modules`, array, {\n        ...context,\n        runtime: chunk.runtime,\n        rootModules: new Set(chunkGraph.getChunkRootModules(chunk))\n      });\n      const limited = spaceLimited(groupedModules, options.chunkModulesSpace);\n      object.modules = limited.children;\n      object.filteredModules = limited.filteredChildren;\n    },\n    chunkOrigins: (object, chunk, context, options, factory) => {\n      const {\n        type,\n        compilation: {\n          chunkGraph\n        }\n      } = context;\n      /** @type {Set<string>} */\n      const originsKeySet = new Set();\n      const origins = [];\n      for (const g of chunk.groupsIterable) {\n        origins.push(...g.origins);\n      }\n      const array = origins.filter(origin => {\n        const key = [origin.module ? chunkGraph.getModuleId(origin.module) : undefined, formatLocation(origin.loc), origin.request].join();\n        if (originsKeySet.has(key)) return false;\n        originsKeySet.add(key);\n        return true;\n      });\n      object.origins = factory.create(`${type}.origins`, array, context);\n    }\n  },\n  chunkOrigin: {\n    _: (object, origin, context, {\n      requestShortener\n    }) => {\n      /** @type {KnownStatsChunkOrigin} */\n      const statsChunkOrigin = {\n        module: origin.module ? origin.module.identifier() : \"\",\n        moduleIdentifier: origin.module ? origin.module.identifier() : \"\",\n        moduleName: origin.module ? origin.module.readableIdentifier(requestShortener) : \"\",\n        loc: formatLocation(origin.loc),\n        request: origin.request\n      };\n      Object.assign(object, statsChunkOrigin);\n    },\n    ids: (object, origin, {\n      compilation: {\n        chunkGraph\n      }\n    }) => {\n      object.moduleId = origin.module ? chunkGraph.getModuleId(origin.module) : undefined;\n    }\n  },\n  error: EXTRACT_ERROR,\n  warning: EXTRACT_ERROR,\n  moduleTraceItem: {\n    _: (object, {\n      origin,\n      module\n    }, context, {\n      requestShortener\n    }, factory) => {\n      const {\n        type,\n        compilation: {\n          moduleGraph\n        }\n      } = context;\n      object.originIdentifier = origin.identifier();\n      object.originName = origin.readableIdentifier(requestShortener);\n      object.moduleIdentifier = module.identifier();\n      object.moduleName = module.readableIdentifier(requestShortener);\n      const dependencies = Array.from(moduleGraph.getIncomingConnections(module)).filter(c => c.resolvedOriginModule === origin && c.dependency).map(c => c.dependency);\n      object.dependencies = factory.create(`${type}.dependencies`, Array.from(new Set(dependencies)), context);\n    },\n    ids: (object, {\n      origin,\n      module\n    }, {\n      compilation: {\n        chunkGraph\n      }\n    }) => {\n      object.originId = chunkGraph.getModuleId(origin);\n      object.moduleId = chunkGraph.getModuleId(module);\n    }\n  },\n  moduleTraceDependency: {\n    _: (object, dependency) => {\n      object.loc = formatLocation(dependency.loc);\n    }\n  }\n};\n\n/** @type {Record<string, Record<string, (thing: any, context: StatsFactoryContext, options: NormalizedStatsOptions) => boolean | undefined>>} */\nconst FILTER = {\n  \"module.reasons\": {\n    \"!orphanModules\": (reason, {\n      compilation: {\n        chunkGraph\n      }\n    }) => {\n      if (reason.originModule && chunkGraph.getNumberOfModuleChunks(reason.originModule) === 0) {\n        return false;\n      }\n    }\n  }\n};\n\n/** @type {Record<string, Record<string, (thing: Object, context: StatsFactoryContext, options: NormalizedStatsOptions) => boolean | undefined>>} */\nconst FILTER_RESULTS = {\n  \"compilation.warnings\": {\n    warningsFilter: util.deprecate((warning, context, {\n      warningsFilter\n    }) => {\n      const warningString = Object.keys(warning).map(key => `${warning[key]}`).join(\"\\n\");\n      return !warningsFilter.some(filter => filter(warning, warningString));\n    }, \"config.stats.warningsFilter is deprecated in favor of config.ignoreWarnings\", \"DEP_WEBPACK_STATS_WARNINGS_FILTER\")\n  }\n};\n\n/** @type {Record<string, (comparators: Function[], context: StatsFactoryContext) => void>} */\nconst MODULES_SORTER = {\n  _: (comparators, {\n    compilation: {\n      moduleGraph\n    }\n  }) => {\n    comparators.push(compareSelect(\n    /**\n     * @param {Module} m module\n     * @returns {number} depth\n     */\n    m => moduleGraph.getDepth(m), compareNumbers), compareSelect(\n    /**\n     * @param {Module} m module\n     * @returns {number} index\n     */\n    m => moduleGraph.getPreOrderIndex(m), compareNumbers), compareSelect(\n    /**\n     * @param {Module} m module\n     * @returns {string} identifier\n     */\n    m => m.identifier(), compareIds));\n  }\n};\n\n/** @type {Record<string, Record<string, (comparators: Function[], context: StatsFactoryContext) => void>>} */\nconst SORTERS = {\n  \"compilation.chunks\": {\n    _: comparators => {\n      comparators.push(compareSelect(c => c.id, compareIds));\n    }\n  },\n  \"compilation.modules\": MODULES_SORTER,\n  \"chunk.rootModules\": MODULES_SORTER,\n  \"chunk.modules\": MODULES_SORTER,\n  \"module.modules\": MODULES_SORTER,\n  \"module.reasons\": {\n    _: (comparators, {\n      compilation: {\n        chunkGraph\n      }\n    }) => {\n      comparators.push(compareSelect(x => x.originModule, compareModulesByIdentifier));\n      comparators.push(compareSelect(x => x.resolvedOriginModule, compareModulesByIdentifier));\n      comparators.push(compareSelect(x => x.dependency, concatComparators(compareSelect(\n      /**\n       * @param {Dependency} x dependency\n       * @returns {DependencyLocation} location\n       */\n      x => x.loc, compareLocations), compareSelect(x => x.type, compareIds))));\n    }\n  },\n  \"chunk.origins\": {\n    _: (comparators, {\n      compilation: {\n        chunkGraph\n      }\n    }) => {\n      comparators.push(compareSelect(origin => origin.module ? chunkGraph.getModuleId(origin.module) : undefined, compareIds), compareSelect(origin => formatLocation(origin.loc), compareIds), compareSelect(origin => origin.request, compareIds));\n    }\n  }\n};\nconst getItemSize = item => {\n  // Each item takes 1 line\n  // + the size of the children\n  // + 1 extra line when it has children and filteredChildren\n  return !item.children ? 1 : item.filteredChildren ? 2 + getTotalSize(item.children) : 1 + getTotalSize(item.children);\n};\nconst getTotalSize = children => {\n  let size = 0;\n  for (const child of children) {\n    size += getItemSize(child);\n  }\n  return size;\n};\nconst getTotalItems = children => {\n  let count = 0;\n  for (const child of children) {\n    if (!child.children && !child.filteredChildren) {\n      count++;\n    } else {\n      if (child.children) count += getTotalItems(child.children);\n      if (child.filteredChildren) count += child.filteredChildren;\n    }\n  }\n  return count;\n};\nconst collapse = children => {\n  // After collapse each child must take exactly one line\n  const newChildren = [];\n  for (const child of children) {\n    if (child.children) {\n      let filteredChildren = child.filteredChildren || 0;\n      filteredChildren += getTotalItems(child.children);\n      newChildren.push({\n        ...child,\n        children: undefined,\n        filteredChildren\n      });\n    } else {\n      newChildren.push(child);\n    }\n  }\n  return newChildren;\n};\nconst spaceLimited = (itemsAndGroups, max, filteredChildrenLineReserved = false) => {\n  if (max < 1) {\n    return {\n      children: undefined,\n      filteredChildren: getTotalItems(itemsAndGroups)\n    };\n  }\n  /** @type {any[] | undefined} */\n  let children = undefined;\n  /** @type {number | undefined} */\n  let filteredChildren = undefined;\n  // This are the groups, which take 1+ lines each\n  const groups = [];\n  // The sizes of the groups are stored in groupSizes\n  const groupSizes = [];\n  // This are the items, which take 1 line each\n  const items = [];\n  // The total of group sizes\n  let groupsSize = 0;\n  for (const itemOrGroup of itemsAndGroups) {\n    // is item\n    if (!itemOrGroup.children && !itemOrGroup.filteredChildren) {\n      items.push(itemOrGroup);\n    } else {\n      groups.push(itemOrGroup);\n      const size = getItemSize(itemOrGroup);\n      groupSizes.push(size);\n      groupsSize += size;\n    }\n  }\n  if (groupsSize + items.length <= max) {\n    // The total size in the current state fits into the max\n    // keep all\n    children = groups.length > 0 ? groups.concat(items) : items;\n  } else if (groups.length === 0) {\n    // slice items to max\n    // inner space marks that lines for filteredChildren already reserved\n    const limit = max - (filteredChildrenLineReserved ? 0 : 1);\n    filteredChildren = items.length - limit;\n    items.length = limit;\n    children = items;\n  } else {\n    // limit is the size when all groups are collapsed\n    const limit = groups.length + (filteredChildrenLineReserved || items.length === 0 ? 0 : 1);\n    if (limit < max) {\n      // calculate how much we are over the size limit\n      // this allows to approach the limit faster\n      let oversize;\n      // If each group would take 1 line the total would be below the maximum\n      // collapse some groups, keep items\n      while ((oversize = groupsSize + items.length + (filteredChildren && !filteredChildrenLineReserved ? 1 : 0) - max) > 0) {\n        // Find the maximum group and process only this one\n        const maxGroupSize = Math.max(...groupSizes);\n        if (maxGroupSize < items.length) {\n          filteredChildren = items.length;\n          items.length = 0;\n          continue;\n        }\n        for (let i = 0; i < groups.length; i++) {\n          if (groupSizes[i] === maxGroupSize) {\n            const group = groups[i];\n            // run this algorithm recursively and limit the size of the children to\n            // current size - oversize / number of groups\n            // So it should always end up being smaller\n            const headerSize = group.filteredChildren ? 2 : 1;\n            const limited = spaceLimited(group.children, maxGroupSize -\n            // we should use ceil to always feet in max\n            Math.ceil(oversize / groups.length) -\n            // we substitute size of group head\n            headerSize, headerSize === 2);\n            groups[i] = {\n              ...group,\n              children: limited.children,\n              filteredChildren: limited.filteredChildren ? (group.filteredChildren || 0) + limited.filteredChildren : group.filteredChildren\n            };\n            const newSize = getItemSize(groups[i]);\n            groupsSize -= maxGroupSize - newSize;\n            groupSizes[i] = newSize;\n            break;\n          }\n        }\n      }\n      children = groups.concat(items);\n    } else if (limit === max) {\n      // If we have only enough space to show one line per group and one line for the filtered items\n      // collapse all groups and items\n      children = collapse(groups);\n      filteredChildren = items.length;\n    } else {\n      // If we have no space\n      // collapse complete group\n      filteredChildren = getTotalItems(itemsAndGroups);\n    }\n  }\n  return {\n    children,\n    filteredChildren\n  };\n};\nconst errorsSpaceLimit = (errors, max) => {\n  let filtered = 0;\n  // Can not fit into limit\n  // print only messages\n  if (errors.length + 1 >= max) return [errors.map(error => {\n    if (typeof error === \"string\" || !error.details) return error;\n    filtered++;\n    return {\n      ...error,\n      details: \"\"\n    };\n  }), filtered];\n  let fullLength = errors.length;\n  let result = errors;\n  let i = 0;\n  for (; i < errors.length; i++) {\n    const error = errors[i];\n    if (typeof error !== \"string\" && error.details) {\n      const splitted = error.details.split(\"\\n\");\n      const len = splitted.length;\n      fullLength += len;\n      if (fullLength > max) {\n        result = i > 0 ? errors.slice(0, i) : [];\n        const overLimit = fullLength - max + 1;\n        const error = errors[i++];\n        result.push({\n          ...error,\n          details: error.details.split(\"\\n\").slice(0, -overLimit).join(\"\\n\"),\n          filteredDetails: overLimit\n        });\n        filtered = errors.length - i;\n        for (; i < errors.length; i++) {\n          const error = errors[i];\n          if (typeof error === \"string\" || !error.details) result.push(error);\n          result.push({\n            ...error,\n            details: \"\"\n          });\n        }\n        break;\n      } else if (fullLength === max) {\n        result = errors.slice(0, ++i);\n        filtered = errors.length - i;\n        for (; i < errors.length; i++) {\n          const error = errors[i];\n          if (typeof error === \"string\" || !error.details) result.push(error);\n          result.push({\n            ...error,\n            details: \"\"\n          });\n        }\n        break;\n      }\n    }\n  }\n  return [result, filtered];\n};\nconst assetGroup = (children, assets) => {\n  let size = 0;\n  for (const asset of children) {\n    size += asset.size;\n  }\n  return {\n    size\n  };\n};\nconst moduleGroup = (children, modules) => {\n  let size = 0;\n  const sizes = {};\n  for (const module of children) {\n    size += module.size;\n    for (const key of Object.keys(module.sizes)) {\n      sizes[key] = (sizes[key] || 0) + module.sizes[key];\n    }\n  }\n  return {\n    size,\n    sizes\n  };\n};\nconst reasonGroup = (children, reasons) => {\n  let active = false;\n  for (const reason of children) {\n    active = active || reason.active;\n  }\n  return {\n    active\n  };\n};\nconst GROUP_EXTENSION_REGEXP = /(\\.[^.]+?)(?:\\?|(?: \\+ \\d+ modules?)?$)/;\nconst GROUP_PATH_REGEXP = /(.+)[/\\\\][^/\\\\]+?(?:\\?|(?: \\+ \\d+ modules?)?$)/;\n\n/** @type {Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>} */\nconst ASSETS_GROUPERS = {\n  _: (groupConfigs, context, options) => {\n    const groupByFlag = (name, exclude) => {\n      groupConfigs.push({\n        getKeys: asset => {\n          return asset[name] ? [\"1\"] : undefined;\n        },\n        getOptions: () => {\n          return {\n            groupChildren: !exclude,\n            force: exclude\n          };\n        },\n        createGroup: (key, children, assets) => {\n          return exclude ? {\n            type: \"assets by status\",\n            [name]: !!key,\n            filteredChildren: assets.length,\n            ...assetGroup(children, assets)\n          } : {\n            type: \"assets by status\",\n            [name]: !!key,\n            children,\n            ...assetGroup(children, assets)\n          };\n        }\n      });\n    };\n    const {\n      groupAssetsByEmitStatus,\n      groupAssetsByPath,\n      groupAssetsByExtension\n    } = options;\n    if (groupAssetsByEmitStatus) {\n      groupByFlag(\"emitted\");\n      groupByFlag(\"comparedForEmit\");\n      groupByFlag(\"isOverSizeLimit\");\n    }\n    if (groupAssetsByEmitStatus || !options.cachedAssets) {\n      groupByFlag(\"cached\", !options.cachedAssets);\n    }\n    if (groupAssetsByPath || groupAssetsByExtension) {\n      groupConfigs.push({\n        getKeys: asset => {\n          const extensionMatch = groupAssetsByExtension && GROUP_EXTENSION_REGEXP.exec(asset.name);\n          const extension = extensionMatch ? extensionMatch[1] : \"\";\n          const pathMatch = groupAssetsByPath && GROUP_PATH_REGEXP.exec(asset.name);\n          const path = pathMatch ? pathMatch[1].split(/[/\\\\]/) : [];\n          const keys = [];\n          if (groupAssetsByPath) {\n            keys.push(\".\");\n            if (extension) keys.push(path.length ? `${path.join(\"/\")}/*${extension}` : `*${extension}`);\n            while (path.length > 0) {\n              keys.push(path.join(\"/\") + \"/\");\n              path.pop();\n            }\n          } else {\n            if (extension) keys.push(`*${extension}`);\n          }\n          return keys;\n        },\n        createGroup: (key, children, assets) => {\n          return {\n            type: groupAssetsByPath ? \"assets by path\" : \"assets by extension\",\n            name: key,\n            children,\n            ...assetGroup(children, assets)\n          };\n        }\n      });\n    }\n  },\n  groupAssetsByInfo: (groupConfigs, context, options) => {\n    const groupByAssetInfoFlag = name => {\n      groupConfigs.push({\n        getKeys: asset => {\n          return asset.info && asset.info[name] ? [\"1\"] : undefined;\n        },\n        createGroup: (key, children, assets) => {\n          return {\n            type: \"assets by info\",\n            info: {\n              [name]: !!key\n            },\n            children,\n            ...assetGroup(children, assets)\n          };\n        }\n      });\n    };\n    groupByAssetInfoFlag(\"immutable\");\n    groupByAssetInfoFlag(\"development\");\n    groupByAssetInfoFlag(\"hotModuleReplacement\");\n  },\n  groupAssetsByChunk: (groupConfigs, context, options) => {\n    const groupByNames = name => {\n      groupConfigs.push({\n        getKeys: asset => {\n          return asset[name];\n        },\n        createGroup: (key, children, assets) => {\n          return {\n            type: \"assets by chunk\",\n            [name]: [key],\n            children,\n            ...assetGroup(children, assets)\n          };\n        }\n      });\n    };\n    groupByNames(\"chunkNames\");\n    groupByNames(\"auxiliaryChunkNames\");\n    groupByNames(\"chunkIdHints\");\n    groupByNames(\"auxiliaryChunkIdHints\");\n  },\n  excludeAssets: (groupConfigs, context, {\n    excludeAssets\n  }) => {\n    groupConfigs.push({\n      getKeys: asset => {\n        const ident = asset.name;\n        const excluded = excludeAssets.some(fn => fn(ident, asset));\n        if (excluded) return [\"excluded\"];\n      },\n      getOptions: () => ({\n        groupChildren: false,\n        force: true\n      }),\n      createGroup: (key, children, assets) => ({\n        type: \"hidden assets\",\n        filteredChildren: assets.length,\n        ...assetGroup(children, assets)\n      })\n    });\n  }\n};\n\n/** @type {function(\"module\" | \"chunk\" | \"root-of-chunk\" | \"nested\"): Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>} */\nconst MODULES_GROUPERS = type => ({\n  _: (groupConfigs, context, options) => {\n    const groupByFlag = (name, type, exclude) => {\n      groupConfigs.push({\n        getKeys: module => {\n          return module[name] ? [\"1\"] : undefined;\n        },\n        getOptions: () => {\n          return {\n            groupChildren: !exclude,\n            force: exclude\n          };\n        },\n        createGroup: (key, children, modules) => {\n          return {\n            type,\n            [name]: !!key,\n            ...(exclude ? {\n              filteredChildren: modules.length\n            } : {\n              children\n            }),\n            ...moduleGroup(children, modules)\n          };\n        }\n      });\n    };\n    const {\n      groupModulesByCacheStatus,\n      groupModulesByLayer,\n      groupModulesByAttributes,\n      groupModulesByType,\n      groupModulesByPath,\n      groupModulesByExtension\n    } = options;\n    if (groupModulesByAttributes) {\n      groupByFlag(\"errors\", \"modules with errors\");\n      groupByFlag(\"warnings\", \"modules with warnings\");\n      groupByFlag(\"assets\", \"modules with assets\");\n      groupByFlag(\"optional\", \"optional modules\");\n    }\n    if (groupModulesByCacheStatus) {\n      groupByFlag(\"cacheable\", \"cacheable modules\");\n      groupByFlag(\"built\", \"built modules\");\n      groupByFlag(\"codeGenerated\", \"code generated modules\");\n    }\n    if (groupModulesByCacheStatus || !options.cachedModules) {\n      groupByFlag(\"cached\", \"cached modules\", !options.cachedModules);\n    }\n    if (groupModulesByAttributes || !options.orphanModules) {\n      groupByFlag(\"orphan\", \"orphan modules\", !options.orphanModules);\n    }\n    if (groupModulesByAttributes || !options.dependentModules) {\n      groupByFlag(\"dependent\", \"dependent modules\", !options.dependentModules);\n    }\n    if (groupModulesByType || !options.runtimeModules) {\n      groupConfigs.push({\n        getKeys: module => {\n          if (!module.moduleType) return;\n          if (groupModulesByType) {\n            return [module.moduleType.split(\"/\", 1)[0]];\n          } else if (module.moduleType === WEBPACK_MODULE_TYPE_RUNTIME) {\n            return [WEBPACK_MODULE_TYPE_RUNTIME];\n          }\n        },\n        getOptions: key => {\n          const exclude = key === WEBPACK_MODULE_TYPE_RUNTIME && !options.runtimeModules;\n          return {\n            groupChildren: !exclude,\n            force: exclude\n          };\n        },\n        createGroup: (key, children, modules) => {\n          const exclude = key === WEBPACK_MODULE_TYPE_RUNTIME && !options.runtimeModules;\n          return {\n            type: `${key} modules`,\n            moduleType: key,\n            ...(exclude ? {\n              filteredChildren: modules.length\n            } : {\n              children\n            }),\n            ...moduleGroup(children, modules)\n          };\n        }\n      });\n    }\n    if (groupModulesByLayer) {\n      groupConfigs.push({\n        getKeys: module => {\n          return [module.layer];\n        },\n        createGroup: (key, children, modules) => {\n          return {\n            type: \"modules by layer\",\n            layer: key,\n            children,\n            ...moduleGroup(children, modules)\n          };\n        }\n      });\n    }\n    if (groupModulesByPath || groupModulesByExtension) {\n      groupConfigs.push({\n        getKeys: module => {\n          if (!module.name) return;\n          const resource = parseResource(module.name.split(\"!\").pop()).path;\n          const dataUrl = /^data:[^,;]+/.exec(resource);\n          if (dataUrl) return [dataUrl[0]];\n          const extensionMatch = groupModulesByExtension && GROUP_EXTENSION_REGEXP.exec(resource);\n          const extension = extensionMatch ? extensionMatch[1] : \"\";\n          const pathMatch = groupModulesByPath && GROUP_PATH_REGEXP.exec(resource);\n          const path = pathMatch ? pathMatch[1].split(/[/\\\\]/) : [];\n          const keys = [];\n          if (groupModulesByPath) {\n            if (extension) keys.push(path.length ? `${path.join(\"/\")}/*${extension}` : `*${extension}`);\n            while (path.length > 0) {\n              keys.push(path.join(\"/\") + \"/\");\n              path.pop();\n            }\n          } else {\n            if (extension) keys.push(`*${extension}`);\n          }\n          return keys;\n        },\n        createGroup: (key, children, modules) => {\n          const isDataUrl = key.startsWith(\"data:\");\n          return {\n            type: isDataUrl ? \"modules by mime type\" : groupModulesByPath ? \"modules by path\" : \"modules by extension\",\n            name: isDataUrl ? key.slice( /* 'data:'.length */5) : key,\n            children,\n            ...moduleGroup(children, modules)\n          };\n        }\n      });\n    }\n  },\n  excludeModules: (groupConfigs, context, {\n    excludeModules\n  }) => {\n    groupConfigs.push({\n      getKeys: module => {\n        const name = module.name;\n        if (name) {\n          const excluded = excludeModules.some(fn => fn(name, module, type));\n          if (excluded) return [\"1\"];\n        }\n      },\n      getOptions: () => ({\n        groupChildren: false,\n        force: true\n      }),\n      createGroup: (key, children, modules) => ({\n        type: \"hidden modules\",\n        filteredChildren: children.length,\n        ...moduleGroup(children, modules)\n      })\n    });\n  }\n});\n\n/** @type {Record<string, Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>} */\nconst RESULT_GROUPERS = {\n  \"compilation.assets\": ASSETS_GROUPERS,\n  \"asset.related\": ASSETS_GROUPERS,\n  \"compilation.modules\": MODULES_GROUPERS(\"module\"),\n  \"chunk.modules\": MODULES_GROUPERS(\"chunk\"),\n  \"chunk.rootModules\": MODULES_GROUPERS(\"root-of-chunk\"),\n  \"module.modules\": MODULES_GROUPERS(\"nested\"),\n  \"module.reasons\": {\n    groupReasonsByOrigin: groupConfigs => {\n      groupConfigs.push({\n        getKeys: reason => {\n          return [reason.module];\n        },\n        createGroup: (key, children, reasons) => {\n          return {\n            type: \"from origin\",\n            module: key,\n            children,\n            ...reasonGroup(children, reasons)\n          };\n        }\n      });\n    }\n  }\n};\n\n// remove a prefixed \"!\" that can be specified to reverse sort order\nconst normalizeFieldKey = field => {\n  if (field[0] === \"!\") {\n    return field.slice(1);\n  }\n  return field;\n};\n\n// if a field is prefixed by a \"!\" reverse sort order\nconst sortOrderRegular = field => {\n  if (field[0] === \"!\") {\n    return false;\n  }\n  return true;\n};\n\n/**\n * @param {string} field field name\n * @returns {function(Object, Object): number} comparators\n */\nconst sortByField = field => {\n  if (!field) {\n    /**\n     * @param {any} a first\n     * @param {any} b second\n     * @returns {-1|0|1} zero\n     */\n    const noSort = (a, b) => 0;\n    return noSort;\n  }\n  const fieldKey = normalizeFieldKey(field);\n  let sortFn = compareSelect(m => m[fieldKey], compareIds);\n\n  // if a field is prefixed with a \"!\" the sort is reversed!\n  const sortIsRegular = sortOrderRegular(field);\n  if (!sortIsRegular) {\n    const oldSortFn = sortFn;\n    sortFn = (a, b) => oldSortFn(b, a);\n  }\n  return sortFn;\n};\nconst ASSET_SORTERS = {\n  /** @type {(comparators: Function[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void} */\n  assetsSort: (comparators, context, {\n    assetsSort\n  }) => {\n    comparators.push(sortByField(assetsSort));\n  },\n  _: comparators => {\n    comparators.push(compareSelect(a => a.name, compareIds));\n  }\n};\n\n/** @type {Record<string, Record<string, (comparators: Function[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>} */\nconst RESULT_SORTERS = {\n  \"compilation.chunks\": {\n    chunksSort: (comparators, context, {\n      chunksSort\n    }) => {\n      comparators.push(sortByField(chunksSort));\n    }\n  },\n  \"compilation.modules\": {\n    modulesSort: (comparators, context, {\n      modulesSort\n    }) => {\n      comparators.push(sortByField(modulesSort));\n    }\n  },\n  \"chunk.modules\": {\n    chunkModulesSort: (comparators, context, {\n      chunkModulesSort\n    }) => {\n      comparators.push(sortByField(chunkModulesSort));\n    }\n  },\n  \"module.modules\": {\n    nestedModulesSort: (comparators, context, {\n      nestedModulesSort\n    }) => {\n      comparators.push(sortByField(nestedModulesSort));\n    }\n  },\n  \"compilation.assets\": ASSET_SORTERS,\n  \"asset.related\": ASSET_SORTERS\n};\n\n/**\n * @param {Record<string, Record<string, Function>>} config the config see above\n * @param {NormalizedStatsOptions} options stats options\n * @param {function(string, Function): void} fn handler function called for every active line in config\n * @returns {void}\n */\nconst iterateConfig = (config, options, fn) => {\n  for (const hookFor of Object.keys(config)) {\n    const subConfig = config[hookFor];\n    for (const option of Object.keys(subConfig)) {\n      if (option !== \"_\") {\n        if (option.startsWith(\"!\")) {\n          if (options[option.slice(1)]) continue;\n        } else {\n          const value = options[option];\n          if (value === false || value === undefined || Array.isArray(value) && value.length === 0) continue;\n        }\n      }\n      fn(hookFor, subConfig[option]);\n    }\n  }\n};\n\n/** @type {Record<string, string>} */\nconst ITEM_NAMES = {\n  \"compilation.children[]\": \"compilation\",\n  \"compilation.modules[]\": \"module\",\n  \"compilation.entrypoints[]\": \"chunkGroup\",\n  \"compilation.namedChunkGroups[]\": \"chunkGroup\",\n  \"compilation.errors[]\": \"error\",\n  \"compilation.warnings[]\": \"warning\",\n  \"chunk.modules[]\": \"module\",\n  \"chunk.rootModules[]\": \"module\",\n  \"chunk.origins[]\": \"chunkOrigin\",\n  \"compilation.chunks[]\": \"chunk\",\n  \"compilation.assets[]\": \"asset\",\n  \"asset.related[]\": \"asset\",\n  \"module.issuerPath[]\": \"moduleIssuer\",\n  \"module.reasons[]\": \"moduleReason\",\n  \"module.modules[]\": \"module\",\n  \"module.children[]\": \"module\",\n  \"moduleTrace[]\": \"moduleTraceItem\",\n  \"moduleTraceItem.dependencies[]\": \"moduleTraceDependency\"\n};\n\n/**\n * @param {Object[]} items items to be merged\n * @returns {Object} an object\n */\nconst mergeToObject = items => {\n  const obj = Object.create(null);\n  for (const item of items) {\n    obj[item.name] = item;\n  }\n  return obj;\n};\n\n/** @type {Record<string, (items: Object[]) => any>} */\nconst MERGER = {\n  \"compilation.entrypoints\": mergeToObject,\n  \"compilation.namedChunkGroups\": mergeToObject\n};\nclass DefaultStatsFactoryPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"DefaultStatsFactoryPlugin\", compilation => {\n      compilation.hooks.statsFactory.tap(\"DefaultStatsFactoryPlugin\", (stats, options, context) => {\n        iterateConfig(SIMPLE_EXTRACTORS, options, (hookFor, fn) => {\n          stats.hooks.extract.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (obj, data, ctx) => fn(obj, data, ctx, options, stats));\n        });\n        iterateConfig(FILTER, options, (hookFor, fn) => {\n          stats.hooks.filter.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (item, ctx, idx, i) => fn(item, ctx, options, idx, i));\n        });\n        iterateConfig(FILTER_RESULTS, options, (hookFor, fn) => {\n          stats.hooks.filterResults.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (item, ctx, idx, i) => fn(item, ctx, options, idx, i));\n        });\n        iterateConfig(SORTERS, options, (hookFor, fn) => {\n          stats.hooks.sort.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (comparators, ctx) => fn(comparators, ctx, options));\n        });\n        iterateConfig(RESULT_SORTERS, options, (hookFor, fn) => {\n          stats.hooks.sortResults.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (comparators, ctx) => fn(comparators, ctx, options));\n        });\n        iterateConfig(RESULT_GROUPERS, options, (hookFor, fn) => {\n          stats.hooks.groupResults.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (groupConfigs, ctx) => fn(groupConfigs, ctx, options));\n        });\n        for (const key of Object.keys(ITEM_NAMES)) {\n          const itemName = ITEM_NAMES[key];\n          stats.hooks.getItemName.for(key).tap(\"DefaultStatsFactoryPlugin\", () => itemName);\n        }\n        for (const key of Object.keys(MERGER)) {\n          const merger = MERGER[key];\n          stats.hooks.merge.for(key).tap(\"DefaultStatsFactoryPlugin\", merger);\n        }\n        if (options.children) {\n          if (Array.isArray(options.children)) {\n            stats.hooks.getItemFactory.for(\"compilation.children[].compilation\").tap(\"DefaultStatsFactoryPlugin\", (comp, {\n              _index: idx\n            }) => {\n              if (idx < options.children.length) {\n                return compilation.createStatsFactory(compilation.createStatsOptions(options.children[idx], context));\n              }\n            });\n          } else if (options.children !== true) {\n            const childFactory = compilation.createStatsFactory(compilation.createStatsOptions(options.children, context));\n            stats.hooks.getItemFactory.for(\"compilation.children[].compilation\").tap(\"DefaultStatsFactoryPlugin\", () => {\n              return childFactory;\n            });\n          }\n        }\n      });\n    });\n  }\n}\nmodule.exports = DefaultStatsFactoryPlugin;","map":{"version":3,"names":["util","require","WEBPACK_MODULE_TYPE_RUNTIME","ModuleDependency","formatLocation","LogType","AggressiveSplittingPlugin","SizeLimitsPlugin","countIterable","compareLocations","compareChunksById","compareNumbers","compareIds","concatComparators","compareSelect","compareModulesByIdentifier","makePathsRelative","parseResource","uniqueArray","items","selector","set","Set","item","i","add","Array","from","uniqueOrderedArray","comparator","sort","mapObject","obj","fn","newObj","Object","create","key","keys","countWithChildren","compilation","getItems","count","length","child","children","c","type","EXTRACT_ERROR","_","object","error","context","requestShortener","message","chunk","chunkName","name","chunkEntry","hasRuntime","chunkInitial","canBeInitial","file","module","moduleIdentifier","identifier","moduleName","readableIdentifier","loc","ids","chunkGraph","chunkId","id","moduleId","getModuleId","moduleTrace","options","factory","moduleGraph","visitedModules","current","has","origin","getIssuer","push","errorDetails","cachedGetErrors","cachedGetWarnings","endsWith","details","errorStack","stack","SIMPLE_EXTRACTORS","bindContextCache","compiler","root","map","WeakMap","get","errors","getErrors","warnings","getWarnings","needAdditionalPass","logging","loggingDebug","loggingTrace","acceptedTypes","collapsedGroups","warn","info","log","group","groupEnd","groupCollapsed","clear","profile","profileEnd","time","status","cachedMakePathsRelative","depthInCollapsedGroup","logEntries","debugMode","some","groupStack","rootList","currentList","processedLogEntries","entry","pop","undefined","args","format","slice","newEntry","trace","replace","entries","filteredEntries","debug","hash","version","env","_env","timings","endTime","startTime","builtAt","publicPath","getPath","outputOptions","outputPath","path","assets","compilationFileToChunks","Map","compilationAuxiliaryFileToChunks","chunks","files","array","auxiliaryFiles","assetMap","asset","getAssets","related","values","relatedEntry","deps","isArray","dep","depItem","delete","assetsByChunkName","prototype","hasOwnProperty","call","groupedAssets","limited","spaceLimited","assetsSpace","filteredAssets","filteredChildren","modules","groupedModules","modulesSpace","filteredModules","entrypoints","chunkGroups","chunkGroupAuxiliary","chunkGroupChildren","value","chunkGroup","every","size","namedChunkGroups","rawErrors","factorizedErrors","filtered","e","filter","Boolean","Number","isFinite","errorsSpace","filteredErrorDetailsCount","filteredBySpace","errorsSpaceLimit","errorsCount","rawWarnings","warningsSpace","filteredWarningDetailsCount","warningsCount","warningsFilter","childType","warning","warningString","join","source","emitted","emittedAssets","comparedForEmit","comparedForEmitAssets","cached","cachedAssets","assign","asset$visible","auxiliaryChunks","chunkNames","chunkIdHints","idNameHints","auxiliaryChunkNames","auxiliaryChunkIdHints","filteredRelated","relatedAssets","performance","isOverSizeLimit","chunkGroupMaxAssets","getChildrenByOrders","toAsset","getAsset","sizeReducer","total","auxiliaryAssets","assetsSize","reduce","auxiliaryAssetsSize","statsChunkGroup","filteredAuxiliaryAssets","groups","childStatsChunkGroup","childAssets","built","builtModules","codeGenerated","codeGeneratedModules","buildTimeExecuted","buildTimeExecutedModules","sizes","sourceType","getSourceTypes","statsModule","moduleType","layer","cachedModules","module$visible","rootModules","issuer","reverse","getProfile","nameForCondition","index","getPreOrderIndex","preOrderIndex","index2","getPostOrderIndex","postOrderIndex","cacheable","buildInfo","optional","isOptional","orphan","getNumberOfModuleChunks","dependent","issuerName","issuerPath","failed","issuerId","getOrderedModuleChunksIterable","moduleAssets","reasons","groupsReasons","getIncomingConnections","reasonsSpace","filteredReasons","usedExports","runtime","getUsedExports","providedExports","getProvidedExports","optimizationBailout","getOptimizationBailout","depth","getDepth","nestedModules","innerModules","nestedModulesSpace","originalSource","statsProfile","restoring","integration","building","storing","resolving","additionalResolving","additionalFactories","additionalIntegration","dependencies","moduleIssuer","statsModuleIssuer","moduleReason","reason","dependency","moduleDep","statsModuleReason","originModule","resolvedModuleIdentifier","resolvedOriginModule","resolvedModule","active","isActive","explanation","userRequest","locInfo","resolvedModuleId","childIdByOrder","getChildIdsByOrders","statsChunk","rendered","initial","recorded","wasChunkRecorded","chunkReason","getChunkModulesSize","getChunkModulesSizes","names","idHints","renderedHash","childrenByOrder","chunkRelations","parents","siblings","groupsIterable","parentGroup","parentsIterable","childGroup","childrenIterable","sibling","chunkModules","getChunkModules","getChunkRootModules","chunkModulesSpace","chunkOrigins","originsKeySet","origins","g","request","chunkOrigin","statsChunkOrigin","moduleTraceItem","originIdentifier","originName","originId","moduleTraceDependency","FILTER","!orphanModules","FILTER_RESULTS","deprecate","MODULES_SORTER","comparators","m","SORTERS","x","getItemSize","getTotalSize","getTotalItems","collapse","newChildren","itemsAndGroups","max","filteredChildrenLineReserved","groupSizes","groupsSize","itemOrGroup","concat","limit","oversize","maxGroupSize","Math","headerSize","ceil","newSize","fullLength","result","splitted","split","len","overLimit","filteredDetails","assetGroup","moduleGroup","reasonGroup","GROUP_EXTENSION_REGEXP","GROUP_PATH_REGEXP","ASSETS_GROUPERS","groupConfigs","groupByFlag","exclude","getKeys","getOptions","groupChildren","force","createGroup","groupAssetsByEmitStatus","groupAssetsByPath","groupAssetsByExtension","extensionMatch","exec","extension","pathMatch","groupAssetsByInfo","groupByAssetInfoFlag","groupAssetsByChunk","groupByNames","excludeAssets","ident","excluded","MODULES_GROUPERS","groupModulesByCacheStatus","groupModulesByLayer","groupModulesByAttributes","groupModulesByType","groupModulesByPath","groupModulesByExtension","orphanModules","dependentModules","runtimeModules","resource","dataUrl","isDataUrl","startsWith","excludeModules","RESULT_GROUPERS","groupReasonsByOrigin","normalizeFieldKey","field","sortOrderRegular","sortByField","noSort","a","b","fieldKey","sortFn","sortIsRegular","oldSortFn","ASSET_SORTERS","assetsSort","RESULT_SORTERS","chunksSort","modulesSort","chunkModulesSort","nestedModulesSort","iterateConfig","config","hookFor","subConfig","option","ITEM_NAMES","mergeToObject","MERGER","DefaultStatsFactoryPlugin","apply","hooks","tap","statsFactory","stats","extract","for","data","ctx","idx","filterResults","sortResults","groupResults","itemName","getItemName","merger","merge","getItemFactory","comp","_index","createStatsFactory","createStatsOptions","childFactory","exports"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/stats/DefaultStatsFactoryPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst util = require(\"util\");\nconst { WEBPACK_MODULE_TYPE_RUNTIME } = require(\"../ModuleTypeConstants\");\nconst ModuleDependency = require(\"../dependencies/ModuleDependency\");\nconst formatLocation = require(\"../formatLocation\");\nconst { LogType } = require(\"../logging/Logger\");\nconst AggressiveSplittingPlugin = require(\"../optimize/AggressiveSplittingPlugin\");\nconst SizeLimitsPlugin = require(\"../performance/SizeLimitsPlugin\");\nconst { countIterable } = require(\"../util/IterableHelpers\");\nconst {\n\tcompareLocations,\n\tcompareChunksById,\n\tcompareNumbers,\n\tcompareIds,\n\tconcatComparators,\n\tcompareSelect,\n\tcompareModulesByIdentifier\n} = require(\"../util/comparators\");\nconst { makePathsRelative, parseResource } = require(\"../util/identifier\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"../ChunkGroup\").OriginRecord} OriginRecord */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compilation\").Asset} Asset */\n/** @typedef {import(\"../Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"../Compilation\").NormalizedStatsOptions} NormalizedStatsOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").DependencyLocation} DependencyLocation */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleProfile\")} ModuleProfile */\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n/** @template T @typedef {import(\"../util/comparators\").Comparator<T>} Comparator<T> */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n/** @typedef {import(\"../util/smartGrouping\").GroupConfig<any, object>} GroupConfig */\n/** @typedef {import(\"./StatsFactory\")} StatsFactory */\n/** @typedef {import(\"./StatsFactory\").StatsFactoryContext} StatsFactoryContext */\n\n/** @typedef {KnownStatsCompilation & Record<string, any>} StatsCompilation */\n/**\n * @typedef {Object} KnownStatsCompilation\n * @property {any=} env\n * @property {string=} name\n * @property {string=} hash\n * @property {string=} version\n * @property {number=} time\n * @property {number=} builtAt\n * @property {boolean=} needAdditionalPass\n * @property {string=} publicPath\n * @property {string=} outputPath\n * @property {Record<string, string[]>=} assetsByChunkName\n * @property {StatsAsset[]=} assets\n * @property {number=} filteredAssets\n * @property {StatsChunk[]=} chunks\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {Record<string, StatsChunkGroup>=} entrypoints\n * @property {Record<string, StatsChunkGroup>=} namedChunkGroups\n * @property {StatsError[]=} errors\n * @property {number=} errorsCount\n * @property {StatsError[]=} warnings\n * @property {number=} warningsCount\n * @property {StatsCompilation[]=} children\n * @property {Record<string, StatsLogging>=} logging\n */\n\n/** @typedef {KnownStatsLogging & Record<string, any>} StatsLogging */\n/**\n * @typedef {Object} KnownStatsLogging\n * @property {StatsLoggingEntry[]} entries\n * @property {number} filteredEntries\n * @property {boolean} debug\n */\n\n/** @typedef {KnownStatsLoggingEntry & Record<string, any>} StatsLoggingEntry */\n/**\n * @typedef {Object} KnownStatsLoggingEntry\n * @property {string} type\n * @property {string} message\n * @property {string[]=} trace\n * @property {StatsLoggingEntry[]=} children\n * @property {any[]=} args\n * @property {number=} time\n */\n\n/** @typedef {KnownStatsAsset & Record<string, any>} StatsAsset */\n/**\n * @typedef {Object} KnownStatsAsset\n * @property {string} type\n * @property {string} name\n * @property {AssetInfo} info\n * @property {number} size\n * @property {boolean} emitted\n * @property {boolean} comparedForEmit\n * @property {boolean} cached\n * @property {StatsAsset[]=} related\n * @property {(string|number)[]=} chunkNames\n * @property {(string|number)[]=} chunkIdHints\n * @property {(string|number)[]=} chunks\n * @property {(string|number)[]=} auxiliaryChunkNames\n * @property {(string|number)[]=} auxiliaryChunks\n * @property {(string|number)[]=} auxiliaryChunkIdHints\n * @property {number=} filteredRelated\n * @property {boolean=} isOverSizeLimit\n */\n\n/** @typedef {KnownStatsChunkGroup & Record<string, any>} StatsChunkGroup */\n/**\n * @typedef {Object} KnownStatsChunkGroup\n * @property {string=} name\n * @property {(string|number)[]=} chunks\n * @property {({ name: string, size?: number })[]=} assets\n * @property {number=} filteredAssets\n * @property {number=} assetsSize\n * @property {({ name: string, size?: number })[]=} auxiliaryAssets\n * @property {number=} filteredAuxiliaryAssets\n * @property {number=} auxiliaryAssetsSize\n * @property {{ [x: string]: StatsChunkGroup[] }=} children\n * @property {{ [x: string]: string[] }=} childAssets\n * @property {boolean=} isOverSizeLimit\n */\n\n/** @typedef {KnownStatsModule & Record<string, any>} StatsModule */\n/**\n * @typedef {Object} KnownStatsModule\n * @property {string=} type\n * @property {string=} moduleType\n * @property {string=} layer\n * @property {string=} identifier\n * @property {string=} name\n * @property {string=} nameForCondition\n * @property {number=} index\n * @property {number=} preOrderIndex\n * @property {number=} index2\n * @property {number=} postOrderIndex\n * @property {number=} size\n * @property {{[x: string]: number}=} sizes\n * @property {boolean=} cacheable\n * @property {boolean=} built\n * @property {boolean=} codeGenerated\n * @property {boolean=} buildTimeExecuted\n * @property {boolean=} cached\n * @property {boolean=} optional\n * @property {boolean=} orphan\n * @property {string|number=} id\n * @property {string|number=} issuerId\n * @property {(string|number)[]=} chunks\n * @property {(string|number)[]=} assets\n * @property {boolean=} dependent\n * @property {string=} issuer\n * @property {string=} issuerName\n * @property {StatsModuleIssuer[]=} issuerPath\n * @property {boolean=} failed\n * @property {number=} errors\n * @property {number=} warnings\n * @property {StatsProfile=} profile\n * @property {StatsModuleReason[]=} reasons\n * @property {(boolean | string[])=} usedExports\n * @property {string[]=} providedExports\n * @property {string[]=} optimizationBailout\n * @property {number=} depth\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {ReturnType<Source[\"source\"]>=} source\n */\n\n/** @typedef {KnownStatsProfile & Record<string, any>} StatsProfile */\n/**\n * @typedef {Object} KnownStatsProfile\n * @property {number} total\n * @property {number} resolving\n * @property {number} restoring\n * @property {number} building\n * @property {number} integration\n * @property {number} storing\n * @property {number} additionalResolving\n * @property {number} additionalIntegration\n * @property {number} factory\n * @property {number} dependencies\n */\n\n/** @typedef {KnownStatsModuleIssuer & Record<string, any>} StatsModuleIssuer */\n/**\n * @typedef {Object} KnownStatsModuleIssuer\n * @property {string=} identifier\n * @property {string=} name\n * @property {(string|number)=} id\n * @property {StatsProfile=} profile\n */\n\n/** @typedef {KnownStatsModuleReason & Record<string, any>} StatsModuleReason */\n/**\n * @typedef {Object} KnownStatsModuleReason\n * @property {string=} moduleIdentifier\n * @property {string=} module\n * @property {string=} moduleName\n * @property {string=} resolvedModuleIdentifier\n * @property {string=} resolvedModule\n * @property {string=} type\n * @property {boolean} active\n * @property {string=} explanation\n * @property {string=} userRequest\n * @property {string=} loc\n * @property {(string|number)=} moduleId\n * @property {(string|number)=} resolvedModuleId\n */\n\n/** @typedef {KnownStatsChunk & Record<string, any>} StatsChunk */\n/**\n * @typedef {Object} KnownStatsChunk\n * @property {boolean} rendered\n * @property {boolean} initial\n * @property {boolean} entry\n * @property {boolean} recorded\n * @property {string=} reason\n * @property {number} size\n * @property {Record<string, number>=} sizes\n * @property {string[]=} names\n * @property {string[]=} idHints\n * @property {string[]=} runtime\n * @property {string[]=} files\n * @property {string[]=} auxiliaryFiles\n * @property {string} hash\n * @property {Record<string, (string|number)[]>=} childrenByOrder\n * @property {(string|number)=} id\n * @property {(string|number)[]=} siblings\n * @property {(string|number)[]=} parents\n * @property {(string|number)[]=} children\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {StatsChunkOrigin[]=} origins\n */\n\n/** @typedef {KnownStatsChunkOrigin & Record<string, any>} StatsChunkOrigin */\n/**\n * @typedef {Object} KnownStatsChunkOrigin\n * @property {string=} module\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {string=} loc\n * @property {string=} request\n * @property {(string|number)=} moduleId\n */\n\n/** @typedef {KnownStatsModuleTraceItem & Record<string, any>} StatsModuleTraceItem */\n/**\n * @typedef {Object} KnownStatsModuleTraceItem\n * @property {string=} originIdentifier\n * @property {string=} originName\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {StatsModuleTraceDependency[]=} dependencies\n * @property {(string|number)=} originId\n * @property {(string|number)=} moduleId\n */\n\n/** @typedef {KnownStatsModuleTraceDependency & Record<string, any>} StatsModuleTraceDependency */\n/**\n * @typedef {Object} KnownStatsModuleTraceDependency\n * @property {string=} loc\n */\n\n/** @typedef {KnownStatsError & Record<string, any>} StatsError */\n/**\n * @typedef {Object} KnownStatsError\n * @property {string} message\n * @property {string=} chunkName\n * @property {boolean=} chunkEntry\n * @property {boolean=} chunkInitial\n * @property {string=} file\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {string=} loc\n * @property {string|number=} chunkId\n * @property {string|number=} moduleId\n * @property {StatsModuleTraceItem[]=} moduleTrace\n * @property {any=} details\n * @property {string=} stack\n */\n\n/** @typedef {Asset & { type: string, related: PreprocessedAsset[] }} PreprocessedAsset */\n\n/**\n * @template T\n * @template O\n * @typedef {Record<string, (object: O, data: T, context: StatsFactoryContext, options: NormalizedStatsOptions, factory: StatsFactory) => void>} ExtractorsByOption\n */\n\n/**\n * @typedef {Object} SimpleExtractors\n * @property {ExtractorsByOption<Compilation, StatsCompilation>} compilation\n * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>} asset\n * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>} asset$visible\n * @property {ExtractorsByOption<{ name: string, chunkGroup: ChunkGroup }, StatsChunkGroup>} chunkGroup\n * @property {ExtractorsByOption<Module, StatsModule>} module\n * @property {ExtractorsByOption<Module, StatsModule>} module$visible\n * @property {ExtractorsByOption<Module, StatsModuleIssuer>} moduleIssuer\n * @property {ExtractorsByOption<ModuleProfile, StatsProfile>} profile\n * @property {ExtractorsByOption<ModuleGraphConnection, StatsModuleReason>} moduleReason\n * @property {ExtractorsByOption<Chunk, StatsChunk>} chunk\n * @property {ExtractorsByOption<OriginRecord, StatsChunkOrigin>} chunkOrigin\n * @property {ExtractorsByOption<WebpackError, StatsError>} error\n * @property {ExtractorsByOption<WebpackError, StatsError>} warning\n * @property {ExtractorsByOption<{ origin: Module, module: Module }, StatsModuleTraceItem>} moduleTraceItem\n * @property {ExtractorsByOption<Dependency, StatsModuleTraceDependency>} moduleTraceDependency\n */\n\n/**\n * @template T\n * @template I\n * @param {Iterable<T>} items items to select from\n * @param {function(T): Iterable<I>} selector selector function to select values from item\n * @returns {I[]} array of values\n */\nconst uniqueArray = (items, selector) => {\n\t/** @type {Set<I>} */\n\tconst set = new Set();\n\tfor (const item of items) {\n\t\tfor (const i of selector(item)) {\n\t\t\tset.add(i);\n\t\t}\n\t}\n\treturn Array.from(set);\n};\n\n/**\n * @template T\n * @template I\n * @param {Iterable<T>} items items to select from\n * @param {function(T): Iterable<I>} selector selector function to select values from item\n * @param {Comparator<I>} comparator comparator function\n * @returns {I[]} array of values\n */\nconst uniqueOrderedArray = (items, selector, comparator) => {\n\treturn uniqueArray(items, selector).sort(comparator);\n};\n\n/** @template T @template R @typedef {{ [P in keyof T]: R }} MappedValues<T, R> */\n\n/**\n * @template T\n * @template R\n * @param {T} obj object to be mapped\n * @param {function(T[keyof T], keyof T): R} fn mapping function\n * @returns {MappedValues<T, R>} mapped object\n */\nconst mapObject = (obj, fn) => {\n\tconst newObj = Object.create(null);\n\tfor (const key of Object.keys(obj)) {\n\t\tnewObj[key] = fn(obj[key], /** @type {keyof T} */ (key));\n\t}\n\treturn newObj;\n};\n\n/**\n * @param {Compilation} compilation the compilation\n * @param {function(Compilation, string): any[]} getItems get items\n * @returns {number} total number\n */\nconst countWithChildren = (compilation, getItems) => {\n\tlet count = getItems(compilation, \"\").length;\n\tfor (const child of compilation.children) {\n\t\tcount += countWithChildren(child, (c, type) =>\n\t\t\tgetItems(c, `.children[].compilation${type}`)\n\t\t);\n\t}\n\treturn count;\n};\n\n/** @type {ExtractorsByOption<WebpackError | string, StatsError>} */\nconst EXTRACT_ERROR = {\n\t_: (object, error, context, { requestShortener }) => {\n\t\t// TODO webpack 6 disallow strings in the errors/warnings list\n\t\tif (typeof error === \"string\") {\n\t\t\tobject.message = error;\n\t\t} else {\n\t\t\tif (error.chunk) {\n\t\t\t\tobject.chunkName = error.chunk.name;\n\t\t\t\tobject.chunkEntry = error.chunk.hasRuntime();\n\t\t\t\tobject.chunkInitial = error.chunk.canBeInitial();\n\t\t\t}\n\t\t\tif (error.file) {\n\t\t\t\tobject.file = error.file;\n\t\t\t}\n\t\t\tif (error.module) {\n\t\t\t\tobject.moduleIdentifier = error.module.identifier();\n\t\t\t\tobject.moduleName = error.module.readableIdentifier(requestShortener);\n\t\t\t}\n\t\t\tif (error.loc) {\n\t\t\t\tobject.loc = formatLocation(error.loc);\n\t\t\t}\n\t\t\tobject.message = error.message;\n\t\t}\n\t},\n\tids: (object, error, { compilation: { chunkGraph } }) => {\n\t\tif (typeof error !== \"string\") {\n\t\t\tif (error.chunk) {\n\t\t\t\tobject.chunkId = error.chunk.id;\n\t\t\t}\n\t\t\tif (error.module) {\n\t\t\t\tobject.moduleId = chunkGraph.getModuleId(error.module);\n\t\t\t}\n\t\t}\n\t},\n\tmoduleTrace: (object, error, context, options, factory) => {\n\t\tif (typeof error !== \"string\" && error.module) {\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tcompilation: { moduleGraph }\n\t\t\t} = context;\n\t\t\t/** @type {Set<Module>} */\n\t\t\tconst visitedModules = new Set();\n\t\t\tconst moduleTrace = [];\n\t\t\tlet current = error.module;\n\t\t\twhile (current) {\n\t\t\t\tif (visitedModules.has(current)) break; // circular (technically impossible, but how knows)\n\t\t\t\tvisitedModules.add(current);\n\t\t\t\tconst origin = moduleGraph.getIssuer(current);\n\t\t\t\tif (!origin) break;\n\t\t\t\tmoduleTrace.push({ origin, module: current });\n\t\t\t\tcurrent = origin;\n\t\t\t}\n\t\t\tobject.moduleTrace = factory.create(\n\t\t\t\t`${type}.moduleTrace`,\n\t\t\t\tmoduleTrace,\n\t\t\t\tcontext\n\t\t\t);\n\t\t}\n\t},\n\terrorDetails: (\n\t\tobject,\n\t\terror,\n\t\t{ type, compilation, cachedGetErrors, cachedGetWarnings },\n\t\t{ errorDetails }\n\t) => {\n\t\tif (\n\t\t\ttypeof error !== \"string\" &&\n\t\t\t(errorDetails === true ||\n\t\t\t\t(type.endsWith(\".error\") && cachedGetErrors(compilation).length < 3))\n\t\t) {\n\t\t\tobject.details = error.details;\n\t\t}\n\t},\n\terrorStack: (object, error) => {\n\t\tif (typeof error !== \"string\") {\n\t\t\tobject.stack = error.stack;\n\t\t}\n\t}\n};\n\n/** @type {SimpleExtractors} */\nconst SIMPLE_EXTRACTORS = {\n\tcompilation: {\n\t\t_: (object, compilation, context, options) => {\n\t\t\tif (!context.makePathsRelative) {\n\t\t\t\tcontext.makePathsRelative = makePathsRelative.bindContextCache(\n\t\t\t\t\tcompilation.compiler.context,\n\t\t\t\t\tcompilation.compiler.root\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!context.cachedGetErrors) {\n\t\t\t\tconst map = new WeakMap();\n\t\t\t\tcontext.cachedGetErrors = compilation => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tmap.get(compilation) ||\n\t\t\t\t\t\t(errors => (map.set(compilation, errors), errors))(\n\t\t\t\t\t\t\tcompilation.getErrors()\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (!context.cachedGetWarnings) {\n\t\t\t\tconst map = new WeakMap();\n\t\t\t\tcontext.cachedGetWarnings = compilation => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tmap.get(compilation) ||\n\t\t\t\t\t\t(warnings => (map.set(compilation, warnings), warnings))(\n\t\t\t\t\t\t\tcompilation.getWarnings()\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (compilation.name) {\n\t\t\t\tobject.name = compilation.name;\n\t\t\t}\n\t\t\tif (compilation.needAdditionalPass) {\n\t\t\t\tobject.needAdditionalPass = true;\n\t\t\t}\n\n\t\t\tconst { logging, loggingDebug, loggingTrace } = options;\n\t\t\tif (logging || (loggingDebug && loggingDebug.length > 0)) {\n\t\t\t\tconst util = require(\"util\");\n\t\t\t\tobject.logging = {};\n\t\t\t\tlet acceptedTypes;\n\t\t\t\tlet collapsedGroups = false;\n\t\t\t\tswitch (logging) {\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tacceptedTypes = new Set();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"error\":\n\t\t\t\t\t\tacceptedTypes = new Set([LogType.error]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"warn\":\n\t\t\t\t\t\tacceptedTypes = new Set([LogType.error, LogType.warn]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"info\":\n\t\t\t\t\t\tacceptedTypes = new Set([\n\t\t\t\t\t\t\tLogType.error,\n\t\t\t\t\t\t\tLogType.warn,\n\t\t\t\t\t\t\tLogType.info\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"log\":\n\t\t\t\t\t\tacceptedTypes = new Set([\n\t\t\t\t\t\t\tLogType.error,\n\t\t\t\t\t\t\tLogType.warn,\n\t\t\t\t\t\t\tLogType.info,\n\t\t\t\t\t\t\tLogType.log,\n\t\t\t\t\t\t\tLogType.group,\n\t\t\t\t\t\t\tLogType.groupEnd,\n\t\t\t\t\t\t\tLogType.groupCollapsed,\n\t\t\t\t\t\t\tLogType.clear\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"verbose\":\n\t\t\t\t\t\tacceptedTypes = new Set([\n\t\t\t\t\t\t\tLogType.error,\n\t\t\t\t\t\t\tLogType.warn,\n\t\t\t\t\t\t\tLogType.info,\n\t\t\t\t\t\t\tLogType.log,\n\t\t\t\t\t\t\tLogType.group,\n\t\t\t\t\t\t\tLogType.groupEnd,\n\t\t\t\t\t\t\tLogType.groupCollapsed,\n\t\t\t\t\t\t\tLogType.profile,\n\t\t\t\t\t\t\tLogType.profileEnd,\n\t\t\t\t\t\t\tLogType.time,\n\t\t\t\t\t\t\tLogType.status,\n\t\t\t\t\t\t\tLogType.clear\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tcollapsedGroups = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tconst cachedMakePathsRelative = makePathsRelative.bindContextCache(\n\t\t\t\t\toptions.context,\n\t\t\t\t\tcompilation.compiler.root\n\t\t\t\t);\n\t\t\t\tlet depthInCollapsedGroup = 0;\n\t\t\t\tfor (const [origin, logEntries] of compilation.logging) {\n\t\t\t\t\tconst debugMode = loggingDebug.some(fn => fn(origin));\n\t\t\t\t\tif (logging === false && !debugMode) continue;\n\t\t\t\t\t/** @type {KnownStatsLoggingEntry[]} */\n\t\t\t\t\tconst groupStack = [];\n\t\t\t\t\t/** @type {KnownStatsLoggingEntry[]} */\n\t\t\t\t\tconst rootList = [];\n\t\t\t\t\tlet currentList = rootList;\n\t\t\t\t\tlet processedLogEntries = 0;\n\t\t\t\t\tfor (const entry of logEntries) {\n\t\t\t\t\t\tlet type = entry.type;\n\t\t\t\t\t\tif (!debugMode && !acceptedTypes.has(type)) continue;\n\n\t\t\t\t\t\t// Expand groups in verbose and debug modes\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttype === LogType.groupCollapsed &&\n\t\t\t\t\t\t\t(debugMode || collapsedGroups)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\ttype = LogType.group;\n\n\t\t\t\t\t\tif (depthInCollapsedGroup === 0) {\n\t\t\t\t\t\t\tprocessedLogEntries++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (type === LogType.groupEnd) {\n\t\t\t\t\t\t\tgroupStack.pop();\n\t\t\t\t\t\t\tif (groupStack.length > 0) {\n\t\t\t\t\t\t\t\tcurrentList = groupStack[groupStack.length - 1].children;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcurrentList = rootList;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (depthInCollapsedGroup > 0) depthInCollapsedGroup--;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet message = undefined;\n\t\t\t\t\t\tif (entry.type === LogType.time) {\n\t\t\t\t\t\t\tmessage = `${entry.args[0]}: ${\n\t\t\t\t\t\t\t\tentry.args[1] * 1000 + entry.args[2] / 1000000\n\t\t\t\t\t\t\t} ms`;\n\t\t\t\t\t\t} else if (entry.args && entry.args.length > 0) {\n\t\t\t\t\t\t\tmessage = util.format(entry.args[0], ...entry.args.slice(1));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/** @type {KnownStatsLoggingEntry} */\n\t\t\t\t\t\tconst newEntry = {\n\t\t\t\t\t\t\t...entry,\n\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\ttrace: loggingTrace ? entry.trace : undefined,\n\t\t\t\t\t\t\tchildren:\n\t\t\t\t\t\t\t\ttype === LogType.group || type === LogType.groupCollapsed\n\t\t\t\t\t\t\t\t\t? []\n\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t};\n\t\t\t\t\t\tcurrentList.push(newEntry);\n\t\t\t\t\t\tif (newEntry.children) {\n\t\t\t\t\t\t\tgroupStack.push(newEntry);\n\t\t\t\t\t\t\tcurrentList = newEntry.children;\n\t\t\t\t\t\t\tif (depthInCollapsedGroup > 0) {\n\t\t\t\t\t\t\t\tdepthInCollapsedGroup++;\n\t\t\t\t\t\t\t} else if (type === LogType.groupCollapsed) {\n\t\t\t\t\t\t\t\tdepthInCollapsedGroup = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlet name = cachedMakePathsRelative(origin).replace(/\\|/g, \" \");\n\t\t\t\t\tif (name in object.logging) {\n\t\t\t\t\t\tlet i = 1;\n\t\t\t\t\t\twhile (`${name}#${i}` in object.logging) {\n\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname = `${name}#${i}`;\n\t\t\t\t\t}\n\t\t\t\t\tobject.logging[name] = {\n\t\t\t\t\t\tentries: rootList,\n\t\t\t\t\t\tfilteredEntries: logEntries.length - processedLogEntries,\n\t\t\t\t\t\tdebug: debugMode\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\thash: (object, compilation) => {\n\t\t\tobject.hash = compilation.hash;\n\t\t},\n\t\tversion: object => {\n\t\t\tobject.version = require(\"../../package.json\").version;\n\t\t},\n\t\tenv: (object, compilation, context, { _env }) => {\n\t\t\tobject.env = _env;\n\t\t},\n\t\ttimings: (object, compilation) => {\n\t\t\tobject.time = compilation.endTime - compilation.startTime;\n\t\t},\n\t\tbuiltAt: (object, compilation) => {\n\t\t\tobject.builtAt = compilation.endTime;\n\t\t},\n\t\tpublicPath: (object, compilation) => {\n\t\t\tobject.publicPath = compilation.getPath(\n\t\t\t\tcompilation.outputOptions.publicPath\n\t\t\t);\n\t\t},\n\t\toutputPath: (object, compilation) => {\n\t\t\tobject.outputPath = compilation.outputOptions.path;\n\t\t},\n\t\tassets: (object, compilation, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\t/** @type {Map<string, Chunk[]>} */\n\t\t\tconst compilationFileToChunks = new Map();\n\t\t\t/** @type {Map<string, Chunk[]>} */\n\t\t\tconst compilationAuxiliaryFileToChunks = new Map();\n\t\t\tfor (const chunk of compilation.chunks) {\n\t\t\t\tfor (const file of chunk.files) {\n\t\t\t\t\tlet array = compilationFileToChunks.get(file);\n\t\t\t\t\tif (array === undefined) {\n\t\t\t\t\t\tarray = [];\n\t\t\t\t\t\tcompilationFileToChunks.set(file, array);\n\t\t\t\t\t}\n\t\t\t\t\tarray.push(chunk);\n\t\t\t\t}\n\t\t\t\tfor (const file of chunk.auxiliaryFiles) {\n\t\t\t\t\tlet array = compilationAuxiliaryFileToChunks.get(file);\n\t\t\t\t\tif (array === undefined) {\n\t\t\t\t\t\tarray = [];\n\t\t\t\t\t\tcompilationAuxiliaryFileToChunks.set(file, array);\n\t\t\t\t\t}\n\t\t\t\t\tarray.push(chunk);\n\t\t\t\t}\n\t\t\t}\n\t\t\t/** @type {Map<string, PreprocessedAsset>} */\n\t\t\tconst assetMap = new Map();\n\t\t\t/** @type {Set<PreprocessedAsset>} */\n\t\t\tconst assets = new Set();\n\t\t\tfor (const asset of compilation.getAssets()) {\n\t\t\t\t/** @type {PreprocessedAsset} */\n\t\t\t\tconst item = {\n\t\t\t\t\t...asset,\n\t\t\t\t\ttype: \"asset\",\n\t\t\t\t\trelated: undefined\n\t\t\t\t};\n\t\t\t\tassets.add(item);\n\t\t\t\tassetMap.set(asset.name, item);\n\t\t\t}\n\t\t\tfor (const item of assetMap.values()) {\n\t\t\t\tconst related = item.info.related;\n\t\t\t\tif (!related) continue;\n\t\t\t\tfor (const type of Object.keys(related)) {\n\t\t\t\t\tconst relatedEntry = related[type];\n\t\t\t\t\tconst deps = Array.isArray(relatedEntry)\n\t\t\t\t\t\t? relatedEntry\n\t\t\t\t\t\t: [relatedEntry];\n\t\t\t\t\tfor (const dep of deps) {\n\t\t\t\t\t\tconst depItem = assetMap.get(dep);\n\t\t\t\t\t\tif (!depItem) continue;\n\t\t\t\t\t\tassets.delete(depItem);\n\t\t\t\t\t\tdepItem.type = type;\n\t\t\t\t\t\titem.related = item.related || [];\n\t\t\t\t\t\titem.related.push(depItem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobject.assetsByChunkName = {};\n\t\t\tfor (const [file, chunks] of compilationFileToChunks) {\n\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\tconst name = chunk.name;\n\t\t\t\t\tif (!name) continue;\n\t\t\t\t\tif (\n\t\t\t\t\t\t!Object.prototype.hasOwnProperty.call(\n\t\t\t\t\t\t\tobject.assetsByChunkName,\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tobject.assetsByChunkName[name] = [];\n\t\t\t\t\t}\n\t\t\t\t\tobject.assetsByChunkName[name].push(file);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst groupedAssets = factory.create(\n\t\t\t\t`${type}.assets`,\n\t\t\t\tArray.from(assets),\n\t\t\t\t{\n\t\t\t\t\t...context,\n\t\t\t\t\tcompilationFileToChunks,\n\t\t\t\t\tcompilationAuxiliaryFileToChunks\n\t\t\t\t}\n\t\t\t);\n\t\t\tconst limited = spaceLimited(groupedAssets, options.assetsSpace);\n\t\t\tobject.assets = limited.children;\n\t\t\tobject.filteredAssets = limited.filteredChildren;\n\t\t},\n\t\tchunks: (object, compilation, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tobject.chunks = factory.create(\n\t\t\t\t`${type}.chunks`,\n\t\t\t\tArray.from(compilation.chunks),\n\t\t\t\tcontext\n\t\t\t);\n\t\t},\n\t\tmodules: (object, compilation, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tconst array = Array.from(compilation.modules);\n\t\t\tconst groupedModules = factory.create(`${type}.modules`, array, context);\n\t\t\tconst limited = spaceLimited(groupedModules, options.modulesSpace);\n\t\t\tobject.modules = limited.children;\n\t\t\tobject.filteredModules = limited.filteredChildren;\n\t\t},\n\t\tentrypoints: (\n\t\t\tobject,\n\t\t\tcompilation,\n\t\t\tcontext,\n\t\t\t{ entrypoints, chunkGroups, chunkGroupAuxiliary, chunkGroupChildren },\n\t\t\tfactory\n\t\t) => {\n\t\t\tconst { type } = context;\n\t\t\tconst array = Array.from(compilation.entrypoints, ([key, value]) => ({\n\t\t\t\tname: key,\n\t\t\t\tchunkGroup: value\n\t\t\t}));\n\t\t\tif (entrypoints === \"auto\" && !chunkGroups) {\n\t\t\t\tif (array.length > 5) return;\n\t\t\t\tif (\n\t\t\t\t\t!chunkGroupChildren &&\n\t\t\t\t\tarray.every(({ chunkGroup }) => {\n\t\t\t\t\t\tif (chunkGroup.chunks.length !== 1) return false;\n\t\t\t\t\t\tconst chunk = chunkGroup.chunks[0];\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\tchunk.files.size === 1 &&\n\t\t\t\t\t\t\t(!chunkGroupAuxiliary || chunk.auxiliaryFiles.size === 0)\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tobject.entrypoints = factory.create(\n\t\t\t\t`${type}.entrypoints`,\n\t\t\t\tarray,\n\t\t\t\tcontext\n\t\t\t);\n\t\t},\n\t\tchunkGroups: (object, compilation, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tconst array = Array.from(\n\t\t\t\tcompilation.namedChunkGroups,\n\t\t\t\t([key, value]) => ({\n\t\t\t\t\tname: key,\n\t\t\t\t\tchunkGroup: value\n\t\t\t\t})\n\t\t\t);\n\t\t\tobject.namedChunkGroups = factory.create(\n\t\t\t\t`${type}.namedChunkGroups`,\n\t\t\t\tarray,\n\t\t\t\tcontext\n\t\t\t);\n\t\t},\n\t\terrors: (object, compilation, context, options, factory) => {\n\t\t\tconst { type, cachedGetErrors } = context;\n\t\t\tconst rawErrors = cachedGetErrors(compilation);\n\t\t\tconst factorizedErrors = factory.create(\n\t\t\t\t`${type}.errors`,\n\t\t\t\tcachedGetErrors(compilation),\n\t\t\t\tcontext\n\t\t\t);\n\t\t\tlet filtered = 0;\n\t\t\tif (options.errorDetails === \"auto\" && rawErrors.length >= 3) {\n\t\t\t\tfiltered = rawErrors\n\t\t\t\t\t.map(e => typeof e !== \"string\" && e.details)\n\t\t\t\t\t.filter(Boolean).length;\n\t\t\t}\n\t\t\tif (\n\t\t\t\toptions.errorDetails === true ||\n\t\t\t\t!Number.isFinite(options.errorsSpace)\n\t\t\t) {\n\t\t\t\tobject.errors = factorizedErrors;\n\t\t\t\tif (filtered) object.filteredErrorDetailsCount = filtered;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst [errors, filteredBySpace] = errorsSpaceLimit(\n\t\t\t\tfactorizedErrors,\n\t\t\t\toptions.errorsSpace\n\t\t\t);\n\t\t\tobject.filteredErrorDetailsCount = filtered + filteredBySpace;\n\t\t\tobject.errors = errors;\n\t\t},\n\t\terrorsCount: (object, compilation, { cachedGetErrors }) => {\n\t\t\tobject.errorsCount = countWithChildren(compilation, c =>\n\t\t\t\tcachedGetErrors(c)\n\t\t\t);\n\t\t},\n\t\twarnings: (object, compilation, context, options, factory) => {\n\t\t\tconst { type, cachedGetWarnings } = context;\n\t\t\tconst rawWarnings = factory.create(\n\t\t\t\t`${type}.warnings`,\n\t\t\t\tcachedGetWarnings(compilation),\n\t\t\t\tcontext\n\t\t\t);\n\t\t\tlet filtered = 0;\n\t\t\tif (options.errorDetails === \"auto\") {\n\t\t\t\tfiltered = cachedGetWarnings(compilation)\n\t\t\t\t\t.map(e => typeof e !== \"string\" && e.details)\n\t\t\t\t\t.filter(Boolean).length;\n\t\t\t}\n\t\t\tif (\n\t\t\t\toptions.errorDetails === true ||\n\t\t\t\t!Number.isFinite(options.warningsSpace)\n\t\t\t) {\n\t\t\t\tobject.warnings = rawWarnings;\n\t\t\t\tif (filtered) object.filteredWarningDetailsCount = filtered;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst [warnings, filteredBySpace] = errorsSpaceLimit(\n\t\t\t\trawWarnings,\n\t\t\t\toptions.warningsSpace\n\t\t\t);\n\t\t\tobject.filteredWarningDetailsCount = filtered + filteredBySpace;\n\t\t\tobject.warnings = warnings;\n\t\t},\n\t\twarningsCount: (\n\t\t\tobject,\n\t\t\tcompilation,\n\t\t\tcontext,\n\t\t\t{ warningsFilter },\n\t\t\tfactory\n\t\t) => {\n\t\t\tconst { type, cachedGetWarnings } = context;\n\t\t\tobject.warningsCount = countWithChildren(compilation, (c, childType) => {\n\t\t\t\tif (!warningsFilter && warningsFilter.length === 0)\n\t\t\t\t\treturn cachedGetWarnings(c);\n\t\t\t\treturn factory\n\t\t\t\t\t.create(`${type}${childType}.warnings`, cachedGetWarnings(c), context)\n\t\t\t\t\t.filter(warning => {\n\t\t\t\t\t\tconst warningString = Object.keys(warning)\n\t\t\t\t\t\t\t.map(key => `${warning[key]}`)\n\t\t\t\t\t\t\t.join(\"\\n\");\n\t\t\t\t\t\treturn !warningsFilter.some(filter =>\n\t\t\t\t\t\t\tfilter(warning, warningString)\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\tchildren: (object, compilation, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tobject.children = factory.create(\n\t\t\t\t`${type}.children`,\n\t\t\t\tcompilation.children,\n\t\t\t\tcontext\n\t\t\t);\n\t\t}\n\t},\n\tasset: {\n\t\t_: (object, asset, context, options, factory) => {\n\t\t\tconst { compilation } = context;\n\t\t\tobject.type = asset.type;\n\t\t\tobject.name = asset.name;\n\t\t\tobject.size = asset.source.size();\n\t\t\tobject.emitted = compilation.emittedAssets.has(asset.name);\n\t\t\tobject.comparedForEmit = compilation.comparedForEmitAssets.has(\n\t\t\t\tasset.name\n\t\t\t);\n\t\t\tconst cached = !object.emitted && !object.comparedForEmit;\n\t\t\tobject.cached = cached;\n\t\t\tobject.info = asset.info;\n\t\t\tif (!cached || options.cachedAssets) {\n\t\t\t\tObject.assign(\n\t\t\t\t\tobject,\n\t\t\t\t\tfactory.create(`${context.type}$visible`, asset, context)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n\tasset$visible: {\n\t\t_: (\n\t\t\tobject,\n\t\t\tasset,\n\t\t\t{ compilation, compilationFileToChunks, compilationAuxiliaryFileToChunks }\n\t\t) => {\n\t\t\tconst chunks = compilationFileToChunks.get(asset.name) || [];\n\t\t\tconst auxiliaryChunks =\n\t\t\t\tcompilationAuxiliaryFileToChunks.get(asset.name) || [];\n\t\t\tobject.chunkNames = uniqueOrderedArray(\n\t\t\t\tchunks,\n\t\t\t\tc => (c.name ? [c.name] : []),\n\t\t\t\tcompareIds\n\t\t\t);\n\t\t\tobject.chunkIdHints = uniqueOrderedArray(\n\t\t\t\tchunks,\n\t\t\t\tc => Array.from(c.idNameHints),\n\t\t\t\tcompareIds\n\t\t\t);\n\t\t\tobject.auxiliaryChunkNames = uniqueOrderedArray(\n\t\t\t\tauxiliaryChunks,\n\t\t\t\tc => (c.name ? [c.name] : []),\n\t\t\t\tcompareIds\n\t\t\t);\n\t\t\tobject.auxiliaryChunkIdHints = uniqueOrderedArray(\n\t\t\t\tauxiliaryChunks,\n\t\t\t\tc => Array.from(c.idNameHints),\n\t\t\t\tcompareIds\n\t\t\t);\n\t\t\tobject.filteredRelated = asset.related ? asset.related.length : undefined;\n\t\t},\n\t\trelatedAssets: (object, asset, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tobject.related = factory.create(\n\t\t\t\t`${type.slice(0, -8)}.related`,\n\t\t\t\tasset.related,\n\t\t\t\tcontext\n\t\t\t);\n\t\t\tobject.filteredRelated = asset.related\n\t\t\t\t? asset.related.length - object.related.length\n\t\t\t\t: undefined;\n\t\t},\n\t\tids: (\n\t\t\tobject,\n\t\t\tasset,\n\t\t\t{ compilationFileToChunks, compilationAuxiliaryFileToChunks }\n\t\t) => {\n\t\t\tconst chunks = compilationFileToChunks.get(asset.name) || [];\n\t\t\tconst auxiliaryChunks =\n\t\t\t\tcompilationAuxiliaryFileToChunks.get(asset.name) || [];\n\t\t\tobject.chunks = uniqueOrderedArray(chunks, c => c.ids, compareIds);\n\t\t\tobject.auxiliaryChunks = uniqueOrderedArray(\n\t\t\t\tauxiliaryChunks,\n\t\t\t\tc => c.ids,\n\t\t\t\tcompareIds\n\t\t\t);\n\t\t},\n\t\tperformance: (object, asset) => {\n\t\t\tobject.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(asset.source);\n\t\t}\n\t},\n\tchunkGroup: {\n\t\t_: (\n\t\t\tobject,\n\t\t\t{ name, chunkGroup },\n\t\t\t{ compilation, compilation: { moduleGraph, chunkGraph } },\n\t\t\t{ ids, chunkGroupAuxiliary, chunkGroupChildren, chunkGroupMaxAssets }\n\t\t) => {\n\t\t\tconst children =\n\t\t\t\tchunkGroupChildren &&\n\t\t\t\tchunkGroup.getChildrenByOrders(moduleGraph, chunkGraph);\n\t\t\t/**\n\t\t\t * @param {string} name Name\n\t\t\t * @returns {{ name: string, size: number }} Asset object\n\t\t\t */\n\t\t\tconst toAsset = name => {\n\t\t\t\tconst asset = compilation.getAsset(name);\n\t\t\t\treturn {\n\t\t\t\t\tname,\n\t\t\t\t\tsize: asset ? asset.info.size : -1\n\t\t\t\t};\n\t\t\t};\n\t\t\t/** @type {(total: number, asset: { size: number }) => number} */\n\t\t\tconst sizeReducer = (total, { size }) => total + size;\n\t\t\tconst assets = uniqueArray(chunkGroup.chunks, c => c.files).map(toAsset);\n\t\t\tconst auxiliaryAssets = uniqueOrderedArray(\n\t\t\t\tchunkGroup.chunks,\n\t\t\t\tc => c.auxiliaryFiles,\n\t\t\t\tcompareIds\n\t\t\t).map(toAsset);\n\t\t\tconst assetsSize = assets.reduce(sizeReducer, 0);\n\t\t\tconst auxiliaryAssetsSize = auxiliaryAssets.reduce(sizeReducer, 0);\n\t\t\t/** @type {KnownStatsChunkGroup} */\n\t\t\tconst statsChunkGroup = {\n\t\t\t\tname,\n\t\t\t\tchunks: ids ? chunkGroup.chunks.map(c => c.id) : undefined,\n\t\t\t\tassets: assets.length <= chunkGroupMaxAssets ? assets : undefined,\n\t\t\t\tfilteredAssets:\n\t\t\t\t\tassets.length <= chunkGroupMaxAssets ? 0 : assets.length,\n\t\t\t\tassetsSize,\n\t\t\t\tauxiliaryAssets:\n\t\t\t\t\tchunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets\n\t\t\t\t\t\t? auxiliaryAssets\n\t\t\t\t\t\t: undefined,\n\t\t\t\tfilteredAuxiliaryAssets:\n\t\t\t\t\tchunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets\n\t\t\t\t\t\t? 0\n\t\t\t\t\t\t: auxiliaryAssets.length,\n\t\t\t\tauxiliaryAssetsSize,\n\t\t\t\tchildren: children\n\t\t\t\t\t? mapObject(children, groups =>\n\t\t\t\t\t\t\tgroups.map(group => {\n\t\t\t\t\t\t\t\tconst assets = uniqueArray(group.chunks, c => c.files).map(\n\t\t\t\t\t\t\t\t\ttoAsset\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst auxiliaryAssets = uniqueOrderedArray(\n\t\t\t\t\t\t\t\t\tgroup.chunks,\n\t\t\t\t\t\t\t\t\tc => c.auxiliaryFiles,\n\t\t\t\t\t\t\t\t\tcompareIds\n\t\t\t\t\t\t\t\t).map(toAsset);\n\n\t\t\t\t\t\t\t\t/** @type {KnownStatsChunkGroup} */\n\t\t\t\t\t\t\t\tconst childStatsChunkGroup = {\n\t\t\t\t\t\t\t\t\tname: group.name,\n\t\t\t\t\t\t\t\t\tchunks: ids ? group.chunks.map(c => c.id) : undefined,\n\t\t\t\t\t\t\t\t\tassets:\n\t\t\t\t\t\t\t\t\t\tassets.length <= chunkGroupMaxAssets ? assets : undefined,\n\t\t\t\t\t\t\t\t\tfilteredAssets:\n\t\t\t\t\t\t\t\t\t\tassets.length <= chunkGroupMaxAssets ? 0 : assets.length,\n\t\t\t\t\t\t\t\t\tauxiliaryAssets:\n\t\t\t\t\t\t\t\t\t\tchunkGroupAuxiliary &&\n\t\t\t\t\t\t\t\t\t\tauxiliaryAssets.length <= chunkGroupMaxAssets\n\t\t\t\t\t\t\t\t\t\t\t? auxiliaryAssets\n\t\t\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\t\tfilteredAuxiliaryAssets:\n\t\t\t\t\t\t\t\t\t\tchunkGroupAuxiliary &&\n\t\t\t\t\t\t\t\t\t\tauxiliaryAssets.length <= chunkGroupMaxAssets\n\t\t\t\t\t\t\t\t\t\t\t? 0\n\t\t\t\t\t\t\t\t\t\t\t: auxiliaryAssets.length\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\treturn childStatsChunkGroup;\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined,\n\t\t\t\tchildAssets: children\n\t\t\t\t\t? mapObject(children, groups => {\n\t\t\t\t\t\t\t/** @type {Set<string>} */\n\t\t\t\t\t\t\tconst set = new Set();\n\t\t\t\t\t\t\tfor (const group of groups) {\n\t\t\t\t\t\t\t\tfor (const chunk of group.chunks) {\n\t\t\t\t\t\t\t\t\tfor (const asset of chunk.files) {\n\t\t\t\t\t\t\t\t\t\tset.add(asset);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn Array.from(set);\n\t\t\t\t\t\t})\n\t\t\t\t\t: undefined\n\t\t\t};\n\t\t\tObject.assign(object, statsChunkGroup);\n\t\t},\n\t\tperformance: (object, { chunkGroup }) => {\n\t\t\tobject.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(chunkGroup);\n\t\t}\n\t},\n\tmodule: {\n\t\t_: (object, module, context, options, factory) => {\n\t\t\tconst { compilation, type } = context;\n\t\t\tconst built = compilation.builtModules.has(module);\n\t\t\tconst codeGenerated = compilation.codeGeneratedModules.has(module);\n\t\t\tconst buildTimeExecuted =\n\t\t\t\tcompilation.buildTimeExecutedModules.has(module);\n\t\t\t/** @type {{[x: string]: number}} */\n\t\t\tconst sizes = {};\n\t\t\tfor (const sourceType of module.getSourceTypes()) {\n\t\t\t\tsizes[sourceType] = module.size(sourceType);\n\t\t\t}\n\t\t\t/** @type {KnownStatsModule} */\n\t\t\tconst statsModule = {\n\t\t\t\ttype: \"module\",\n\t\t\t\tmoduleType: module.type,\n\t\t\t\tlayer: module.layer,\n\t\t\t\tsize: module.size(),\n\t\t\t\tsizes,\n\t\t\t\tbuilt,\n\t\t\t\tcodeGenerated,\n\t\t\t\tbuildTimeExecuted,\n\t\t\t\tcached: !built && !codeGenerated\n\t\t\t};\n\t\t\tObject.assign(object, statsModule);\n\n\t\t\tif (built || codeGenerated || options.cachedModules) {\n\t\t\t\tObject.assign(\n\t\t\t\t\tobject,\n\t\t\t\t\tfactory.create(`${type}$visible`, module, context)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n\tmodule$visible: {\n\t\t_: (object, module, context, { requestShortener }, factory) => {\n\t\t\tconst { compilation, type, rootModules } = context;\n\t\t\tconst { moduleGraph } = compilation;\n\t\t\t/** @type {Module[]} */\n\t\t\tconst path = [];\n\t\t\tconst issuer = moduleGraph.getIssuer(module);\n\t\t\tlet current = issuer;\n\t\t\twhile (current) {\n\t\t\t\tpath.push(current);\n\t\t\t\tcurrent = moduleGraph.getIssuer(current);\n\t\t\t}\n\t\t\tpath.reverse();\n\t\t\tconst profile = moduleGraph.getProfile(module);\n\t\t\tconst errors = module.getErrors();\n\t\t\tconst errorsCount = errors !== undefined ? countIterable(errors) : 0;\n\t\t\tconst warnings = module.getWarnings();\n\t\t\tconst warningsCount =\n\t\t\t\twarnings !== undefined ? countIterable(warnings) : 0;\n\t\t\t/** @type {{[x: string]: number}} */\n\t\t\tconst sizes = {};\n\t\t\tfor (const sourceType of module.getSourceTypes()) {\n\t\t\t\tsizes[sourceType] = module.size(sourceType);\n\t\t\t}\n\t\t\t/** @type {KnownStatsModule} */\n\t\t\tconst statsModule = {\n\t\t\t\tidentifier: module.identifier(),\n\t\t\t\tname: module.readableIdentifier(requestShortener),\n\t\t\t\tnameForCondition: module.nameForCondition(),\n\t\t\t\tindex: moduleGraph.getPreOrderIndex(module),\n\t\t\t\tpreOrderIndex: moduleGraph.getPreOrderIndex(module),\n\t\t\t\tindex2: moduleGraph.getPostOrderIndex(module),\n\t\t\t\tpostOrderIndex: moduleGraph.getPostOrderIndex(module),\n\t\t\t\tcacheable: module.buildInfo.cacheable,\n\t\t\t\toptional: module.isOptional(moduleGraph),\n\t\t\t\torphan:\n\t\t\t\t\t!type.endsWith(\"module.modules[].module$visible\") &&\n\t\t\t\t\tcompilation.chunkGraph.getNumberOfModuleChunks(module) === 0,\n\t\t\t\tdependent: rootModules ? !rootModules.has(module) : undefined,\n\t\t\t\tissuer: issuer && issuer.identifier(),\n\t\t\t\tissuerName: issuer && issuer.readableIdentifier(requestShortener),\n\t\t\t\tissuerPath:\n\t\t\t\t\tissuer &&\n\t\t\t\t\tfactory.create(`${type.slice(0, -8)}.issuerPath`, path, context),\n\t\t\t\tfailed: errorsCount > 0,\n\t\t\t\terrors: errorsCount,\n\t\t\t\twarnings: warningsCount\n\t\t\t};\n\t\t\tObject.assign(object, statsModule);\n\t\t\tif (profile) {\n\t\t\t\tobject.profile = factory.create(\n\t\t\t\t\t`${type.slice(0, -8)}.profile`,\n\t\t\t\t\tprofile,\n\t\t\t\t\tcontext\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\tids: (object, module, { compilation: { chunkGraph, moduleGraph } }) => {\n\t\t\tobject.id = chunkGraph.getModuleId(module);\n\t\t\tconst issuer = moduleGraph.getIssuer(module);\n\t\t\tobject.issuerId = issuer && chunkGraph.getModuleId(issuer);\n\t\t\tobject.chunks = Array.from(\n\t\t\t\tchunkGraph.getOrderedModuleChunksIterable(module, compareChunksById),\n\t\t\t\tchunk => chunk.id\n\t\t\t);\n\t\t},\n\t\tmoduleAssets: (object, module) => {\n\t\t\tobject.assets = module.buildInfo.assets\n\t\t\t\t? Object.keys(module.buildInfo.assets)\n\t\t\t\t: [];\n\t\t},\n\t\treasons: (object, module, context, options, factory) => {\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tcompilation: { moduleGraph }\n\t\t\t} = context;\n\t\t\tconst groupsReasons = factory.create(\n\t\t\t\t`${type.slice(0, -8)}.reasons`,\n\t\t\t\tArray.from(moduleGraph.getIncomingConnections(module)),\n\t\t\t\tcontext\n\t\t\t);\n\t\t\tconst limited = spaceLimited(groupsReasons, options.reasonsSpace);\n\t\t\tobject.reasons = limited.children;\n\t\t\tobject.filteredReasons = limited.filteredChildren;\n\t\t},\n\t\tusedExports: (\n\t\t\tobject,\n\t\t\tmodule,\n\t\t\t{ runtime, compilation: { moduleGraph } }\n\t\t) => {\n\t\t\tconst usedExports = moduleGraph.getUsedExports(module, runtime);\n\t\t\tif (usedExports === null) {\n\t\t\t\tobject.usedExports = null;\n\t\t\t} else if (typeof usedExports === \"boolean\") {\n\t\t\t\tobject.usedExports = usedExports;\n\t\t\t} else {\n\t\t\t\tobject.usedExports = Array.from(usedExports);\n\t\t\t}\n\t\t},\n\t\tprovidedExports: (object, module, { compilation: { moduleGraph } }) => {\n\t\t\tconst providedExports = moduleGraph.getProvidedExports(module);\n\t\t\tobject.providedExports = Array.isArray(providedExports)\n\t\t\t\t? providedExports\n\t\t\t\t: null;\n\t\t},\n\t\toptimizationBailout: (\n\t\t\tobject,\n\t\t\tmodule,\n\t\t\t{ compilation: { moduleGraph } },\n\t\t\t{ requestShortener }\n\t\t) => {\n\t\t\tobject.optimizationBailout = moduleGraph\n\t\t\t\t.getOptimizationBailout(module)\n\t\t\t\t.map(item => {\n\t\t\t\t\tif (typeof item === \"function\") return item(requestShortener);\n\t\t\t\t\treturn item;\n\t\t\t\t});\n\t\t},\n\t\tdepth: (object, module, { compilation: { moduleGraph } }) => {\n\t\t\tobject.depth = moduleGraph.getDepth(module);\n\t\t},\n\t\tnestedModules: (object, module, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tconst innerModules = /** @type {Module & { modules?: Module[] }} */ (\n\t\t\t\tmodule\n\t\t\t).modules;\n\t\t\tif (Array.isArray(innerModules)) {\n\t\t\t\tconst groupedModules = factory.create(\n\t\t\t\t\t`${type.slice(0, -8)}.modules`,\n\t\t\t\t\tinnerModules,\n\t\t\t\t\tcontext\n\t\t\t\t);\n\t\t\t\tconst limited = spaceLimited(\n\t\t\t\t\tgroupedModules,\n\t\t\t\t\toptions.nestedModulesSpace\n\t\t\t\t);\n\t\t\t\tobject.modules = limited.children;\n\t\t\t\tobject.filteredModules = limited.filteredChildren;\n\t\t\t}\n\t\t},\n\t\tsource: (object, module) => {\n\t\t\tconst originalSource = module.originalSource();\n\t\t\tif (originalSource) {\n\t\t\t\tobject.source = originalSource.source();\n\t\t\t}\n\t\t}\n\t},\n\tprofile: {\n\t\t_: (object, profile) => {\n\t\t\t/** @type {KnownStatsProfile} */\n\t\t\tconst statsProfile = {\n\t\t\t\ttotal:\n\t\t\t\t\tprofile.factory +\n\t\t\t\t\tprofile.restoring +\n\t\t\t\t\tprofile.integration +\n\t\t\t\t\tprofile.building +\n\t\t\t\t\tprofile.storing,\n\t\t\t\tresolving: profile.factory,\n\t\t\t\trestoring: profile.restoring,\n\t\t\t\tbuilding: profile.building,\n\t\t\t\tintegration: profile.integration,\n\t\t\t\tstoring: profile.storing,\n\t\t\t\tadditionalResolving: profile.additionalFactories,\n\t\t\t\tadditionalIntegration: profile.additionalIntegration,\n\t\t\t\t// TODO remove this in webpack 6\n\t\t\t\tfactory: profile.factory,\n\t\t\t\t// TODO remove this in webpack 6\n\t\t\t\tdependencies: profile.additionalFactories\n\t\t\t};\n\t\t\tObject.assign(object, statsProfile);\n\t\t}\n\t},\n\tmoduleIssuer: {\n\t\t_: (object, module, context, { requestShortener }, factory) => {\n\t\t\tconst { compilation, type } = context;\n\t\t\tconst { moduleGraph } = compilation;\n\t\t\tconst profile = moduleGraph.getProfile(module);\n\t\t\t/** @type {KnownStatsModuleIssuer} */\n\t\t\tconst statsModuleIssuer = {\n\t\t\t\tidentifier: module.identifier(),\n\t\t\t\tname: module.readableIdentifier(requestShortener)\n\t\t\t};\n\t\t\tObject.assign(object, statsModuleIssuer);\n\t\t\tif (profile) {\n\t\t\t\tobject.profile = factory.create(`${type}.profile`, profile, context);\n\t\t\t}\n\t\t},\n\t\tids: (object, module, { compilation: { chunkGraph } }) => {\n\t\t\tobject.id = chunkGraph.getModuleId(module);\n\t\t}\n\t},\n\tmoduleReason: {\n\t\t_: (object, reason, { runtime }, { requestShortener }) => {\n\t\t\tconst dep = reason.dependency;\n\t\t\tconst moduleDep =\n\t\t\t\tdep && dep instanceof ModuleDependency ? dep : undefined;\n\t\t\t/** @type {KnownStatsModuleReason} */\n\t\t\tconst statsModuleReason = {\n\t\t\t\tmoduleIdentifier: reason.originModule\n\t\t\t\t\t? reason.originModule.identifier()\n\t\t\t\t\t: null,\n\t\t\t\tmodule: reason.originModule\n\t\t\t\t\t? reason.originModule.readableIdentifier(requestShortener)\n\t\t\t\t\t: null,\n\t\t\t\tmoduleName: reason.originModule\n\t\t\t\t\t? reason.originModule.readableIdentifier(requestShortener)\n\t\t\t\t\t: null,\n\t\t\t\tresolvedModuleIdentifier: reason.resolvedOriginModule\n\t\t\t\t\t? reason.resolvedOriginModule.identifier()\n\t\t\t\t\t: null,\n\t\t\t\tresolvedModule: reason.resolvedOriginModule\n\t\t\t\t\t? reason.resolvedOriginModule.readableIdentifier(requestShortener)\n\t\t\t\t\t: null,\n\t\t\t\ttype: reason.dependency ? reason.dependency.type : null,\n\t\t\t\tactive: reason.isActive(runtime),\n\t\t\t\texplanation: reason.explanation,\n\t\t\t\tuserRequest: (moduleDep && moduleDep.userRequest) || null\n\t\t\t};\n\t\t\tObject.assign(object, statsModuleReason);\n\t\t\tif (reason.dependency) {\n\t\t\t\tconst locInfo = formatLocation(reason.dependency.loc);\n\t\t\t\tif (locInfo) {\n\t\t\t\t\tobject.loc = locInfo;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tids: (object, reason, { compilation: { chunkGraph } }) => {\n\t\t\tobject.moduleId = reason.originModule\n\t\t\t\t? chunkGraph.getModuleId(reason.originModule)\n\t\t\t\t: null;\n\t\t\tobject.resolvedModuleId = reason.resolvedOriginModule\n\t\t\t\t? chunkGraph.getModuleId(reason.resolvedOriginModule)\n\t\t\t\t: null;\n\t\t}\n\t},\n\tchunk: {\n\t\t_: (object, chunk, { makePathsRelative, compilation: { chunkGraph } }) => {\n\t\t\tconst childIdByOrder = chunk.getChildIdsByOrders(chunkGraph);\n\n\t\t\t/** @type {KnownStatsChunk} */\n\t\t\tconst statsChunk = {\n\t\t\t\trendered: chunk.rendered,\n\t\t\t\tinitial: chunk.canBeInitial(),\n\t\t\t\tentry: chunk.hasRuntime(),\n\t\t\t\trecorded: AggressiveSplittingPlugin.wasChunkRecorded(chunk),\n\t\t\t\treason: chunk.chunkReason,\n\t\t\t\tsize: chunkGraph.getChunkModulesSize(chunk),\n\t\t\t\tsizes: chunkGraph.getChunkModulesSizes(chunk),\n\t\t\t\tnames: chunk.name ? [chunk.name] : [],\n\t\t\t\tidHints: Array.from(chunk.idNameHints),\n\t\t\t\truntime:\n\t\t\t\t\tchunk.runtime === undefined\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: typeof chunk.runtime === \"string\"\n\t\t\t\t\t\t\t? [makePathsRelative(chunk.runtime)]\n\t\t\t\t\t\t\t: Array.from(chunk.runtime.sort(), makePathsRelative),\n\t\t\t\tfiles: Array.from(chunk.files),\n\t\t\t\tauxiliaryFiles: Array.from(chunk.auxiliaryFiles).sort(compareIds),\n\t\t\t\thash: chunk.renderedHash,\n\t\t\t\tchildrenByOrder: childIdByOrder\n\t\t\t};\n\t\t\tObject.assign(object, statsChunk);\n\t\t},\n\t\tids: (object, chunk) => {\n\t\t\tobject.id = chunk.id;\n\t\t},\n\t\tchunkRelations: (object, chunk, { compilation: { chunkGraph } }) => {\n\t\t\t/** @type {Set<string|number>} */\n\t\t\tconst parents = new Set();\n\t\t\t/** @type {Set<string|number>} */\n\t\t\tconst children = new Set();\n\t\t\t/** @type {Set<string|number>} */\n\t\t\tconst siblings = new Set();\n\n\t\t\tfor (const chunkGroup of chunk.groupsIterable) {\n\t\t\t\tfor (const parentGroup of chunkGroup.parentsIterable) {\n\t\t\t\t\tfor (const chunk of parentGroup.chunks) {\n\t\t\t\t\t\tparents.add(chunk.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const childGroup of chunkGroup.childrenIterable) {\n\t\t\t\t\tfor (const chunk of childGroup.chunks) {\n\t\t\t\t\t\tchildren.add(chunk.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const sibling of chunkGroup.chunks) {\n\t\t\t\t\tif (sibling !== chunk) siblings.add(sibling.id);\n\t\t\t\t}\n\t\t\t}\n\t\t\tobject.siblings = Array.from(siblings).sort(compareIds);\n\t\t\tobject.parents = Array.from(parents).sort(compareIds);\n\t\t\tobject.children = Array.from(children).sort(compareIds);\n\t\t},\n\t\tchunkModules: (object, chunk, context, options, factory) => {\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tcompilation: { chunkGraph }\n\t\t\t} = context;\n\t\t\tconst array = chunkGraph.getChunkModules(chunk);\n\t\t\tconst groupedModules = factory.create(`${type}.modules`, array, {\n\t\t\t\t...context,\n\t\t\t\truntime: chunk.runtime,\n\t\t\t\trootModules: new Set(chunkGraph.getChunkRootModules(chunk))\n\t\t\t});\n\t\t\tconst limited = spaceLimited(groupedModules, options.chunkModulesSpace);\n\t\t\tobject.modules = limited.children;\n\t\t\tobject.filteredModules = limited.filteredChildren;\n\t\t},\n\t\tchunkOrigins: (object, chunk, context, options, factory) => {\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tcompilation: { chunkGraph }\n\t\t\t} = context;\n\t\t\t/** @type {Set<string>} */\n\t\t\tconst originsKeySet = new Set();\n\t\t\tconst origins = [];\n\t\t\tfor (const g of chunk.groupsIterable) {\n\t\t\t\torigins.push(...g.origins);\n\t\t\t}\n\t\t\tconst array = origins.filter(origin => {\n\t\t\t\tconst key = [\n\t\t\t\t\torigin.module ? chunkGraph.getModuleId(origin.module) : undefined,\n\t\t\t\t\tformatLocation(origin.loc),\n\t\t\t\t\torigin.request\n\t\t\t\t].join();\n\t\t\t\tif (originsKeySet.has(key)) return false;\n\t\t\t\toriginsKeySet.add(key);\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\tobject.origins = factory.create(`${type}.origins`, array, context);\n\t\t}\n\t},\n\tchunkOrigin: {\n\t\t_: (object, origin, context, { requestShortener }) => {\n\t\t\t/** @type {KnownStatsChunkOrigin} */\n\t\t\tconst statsChunkOrigin = {\n\t\t\t\tmodule: origin.module ? origin.module.identifier() : \"\",\n\t\t\t\tmoduleIdentifier: origin.module ? origin.module.identifier() : \"\",\n\t\t\t\tmoduleName: origin.module\n\t\t\t\t\t? origin.module.readableIdentifier(requestShortener)\n\t\t\t\t\t: \"\",\n\t\t\t\tloc: formatLocation(origin.loc),\n\t\t\t\trequest: origin.request\n\t\t\t};\n\t\t\tObject.assign(object, statsChunkOrigin);\n\t\t},\n\t\tids: (object, origin, { compilation: { chunkGraph } }) => {\n\t\t\tobject.moduleId = origin.module\n\t\t\t\t? chunkGraph.getModuleId(origin.module)\n\t\t\t\t: undefined;\n\t\t}\n\t},\n\terror: EXTRACT_ERROR,\n\twarning: EXTRACT_ERROR,\n\tmoduleTraceItem: {\n\t\t_: (object, { origin, module }, context, { requestShortener }, factory) => {\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tcompilation: { moduleGraph }\n\t\t\t} = context;\n\t\t\tobject.originIdentifier = origin.identifier();\n\t\t\tobject.originName = origin.readableIdentifier(requestShortener);\n\t\t\tobject.moduleIdentifier = module.identifier();\n\t\t\tobject.moduleName = module.readableIdentifier(requestShortener);\n\t\t\tconst dependencies = Array.from(\n\t\t\t\tmoduleGraph.getIncomingConnections(module)\n\t\t\t)\n\t\t\t\t.filter(c => c.resolvedOriginModule === origin && c.dependency)\n\t\t\t\t.map(c => c.dependency);\n\t\t\tobject.dependencies = factory.create(\n\t\t\t\t`${type}.dependencies`,\n\t\t\t\tArray.from(new Set(dependencies)),\n\t\t\t\tcontext\n\t\t\t);\n\t\t},\n\t\tids: (object, { origin, module }, { compilation: { chunkGraph } }) => {\n\t\t\tobject.originId = chunkGraph.getModuleId(origin);\n\t\t\tobject.moduleId = chunkGraph.getModuleId(module);\n\t\t}\n\t},\n\tmoduleTraceDependency: {\n\t\t_: (object, dependency) => {\n\t\t\tobject.loc = formatLocation(dependency.loc);\n\t\t}\n\t}\n};\n\n/** @type {Record<string, Record<string, (thing: any, context: StatsFactoryContext, options: NormalizedStatsOptions) => boolean | undefined>>} */\nconst FILTER = {\n\t\"module.reasons\": {\n\t\t\"!orphanModules\": (reason, { compilation: { chunkGraph } }) => {\n\t\t\tif (\n\t\t\t\treason.originModule &&\n\t\t\t\tchunkGraph.getNumberOfModuleChunks(reason.originModule) === 0\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/** @type {Record<string, Record<string, (thing: Object, context: StatsFactoryContext, options: NormalizedStatsOptions) => boolean | undefined>>} */\nconst FILTER_RESULTS = {\n\t\"compilation.warnings\": {\n\t\twarningsFilter: util.deprecate(\n\t\t\t(warning, context, { warningsFilter }) => {\n\t\t\t\tconst warningString = Object.keys(warning)\n\t\t\t\t\t.map(key => `${warning[key]}`)\n\t\t\t\t\t.join(\"\\n\");\n\t\t\t\treturn !warningsFilter.some(filter => filter(warning, warningString));\n\t\t\t},\n\t\t\t\"config.stats.warningsFilter is deprecated in favor of config.ignoreWarnings\",\n\t\t\t\"DEP_WEBPACK_STATS_WARNINGS_FILTER\"\n\t\t)\n\t}\n};\n\n/** @type {Record<string, (comparators: Function[], context: StatsFactoryContext) => void>} */\nconst MODULES_SORTER = {\n\t_: (comparators, { compilation: { moduleGraph } }) => {\n\t\tcomparators.push(\n\t\t\tcompareSelect(\n\t\t\t\t/**\n\t\t\t\t * @param {Module} m module\n\t\t\t\t * @returns {number} depth\n\t\t\t\t */\n\t\t\t\tm => moduleGraph.getDepth(m),\n\t\t\t\tcompareNumbers\n\t\t\t),\n\t\t\tcompareSelect(\n\t\t\t\t/**\n\t\t\t\t * @param {Module} m module\n\t\t\t\t * @returns {number} index\n\t\t\t\t */\n\t\t\t\tm => moduleGraph.getPreOrderIndex(m),\n\t\t\t\tcompareNumbers\n\t\t\t),\n\t\t\tcompareSelect(\n\t\t\t\t/**\n\t\t\t\t * @param {Module} m module\n\t\t\t\t * @returns {string} identifier\n\t\t\t\t */\n\t\t\t\tm => m.identifier(),\n\t\t\t\tcompareIds\n\t\t\t)\n\t\t);\n\t}\n};\n\n/** @type {Record<string, Record<string, (comparators: Function[], context: StatsFactoryContext) => void>>} */\nconst SORTERS = {\n\t\"compilation.chunks\": {\n\t\t_: comparators => {\n\t\t\tcomparators.push(compareSelect(c => c.id, compareIds));\n\t\t}\n\t},\n\t\"compilation.modules\": MODULES_SORTER,\n\t\"chunk.rootModules\": MODULES_SORTER,\n\t\"chunk.modules\": MODULES_SORTER,\n\t\"module.modules\": MODULES_SORTER,\n\t\"module.reasons\": {\n\t\t_: (comparators, { compilation: { chunkGraph } }) => {\n\t\t\tcomparators.push(\n\t\t\t\tcompareSelect(x => x.originModule, compareModulesByIdentifier)\n\t\t\t);\n\t\t\tcomparators.push(\n\t\t\t\tcompareSelect(x => x.resolvedOriginModule, compareModulesByIdentifier)\n\t\t\t);\n\t\t\tcomparators.push(\n\t\t\t\tcompareSelect(\n\t\t\t\t\tx => x.dependency,\n\t\t\t\t\tconcatComparators(\n\t\t\t\t\t\tcompareSelect(\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @param {Dependency} x dependency\n\t\t\t\t\t\t\t * @returns {DependencyLocation} location\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tx => x.loc,\n\t\t\t\t\t\t\tcompareLocations\n\t\t\t\t\t\t),\n\t\t\t\t\t\tcompareSelect(x => x.type, compareIds)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t},\n\t\"chunk.origins\": {\n\t\t_: (comparators, { compilation: { chunkGraph } }) => {\n\t\t\tcomparators.push(\n\t\t\t\tcompareSelect(\n\t\t\t\t\torigin =>\n\t\t\t\t\t\torigin.module ? chunkGraph.getModuleId(origin.module) : undefined,\n\t\t\t\t\tcompareIds\n\t\t\t\t),\n\t\t\t\tcompareSelect(origin => formatLocation(origin.loc), compareIds),\n\t\t\t\tcompareSelect(origin => origin.request, compareIds)\n\t\t\t);\n\t\t}\n\t}\n};\n\nconst getItemSize = item => {\n\t// Each item takes 1 line\n\t// + the size of the children\n\t// + 1 extra line when it has children and filteredChildren\n\treturn !item.children\n\t\t? 1\n\t\t: item.filteredChildren\n\t\t\t? 2 + getTotalSize(item.children)\n\t\t\t: 1 + getTotalSize(item.children);\n};\n\nconst getTotalSize = children => {\n\tlet size = 0;\n\tfor (const child of children) {\n\t\tsize += getItemSize(child);\n\t}\n\treturn size;\n};\n\nconst getTotalItems = children => {\n\tlet count = 0;\n\tfor (const child of children) {\n\t\tif (!child.children && !child.filteredChildren) {\n\t\t\tcount++;\n\t\t} else {\n\t\t\tif (child.children) count += getTotalItems(child.children);\n\t\t\tif (child.filteredChildren) count += child.filteredChildren;\n\t\t}\n\t}\n\treturn count;\n};\n\nconst collapse = children => {\n\t// After collapse each child must take exactly one line\n\tconst newChildren = [];\n\tfor (const child of children) {\n\t\tif (child.children) {\n\t\t\tlet filteredChildren = child.filteredChildren || 0;\n\t\t\tfilteredChildren += getTotalItems(child.children);\n\t\t\tnewChildren.push({\n\t\t\t\t...child,\n\t\t\t\tchildren: undefined,\n\t\t\t\tfilteredChildren\n\t\t\t});\n\t\t} else {\n\t\t\tnewChildren.push(child);\n\t\t}\n\t}\n\treturn newChildren;\n};\n\nconst spaceLimited = (\n\titemsAndGroups,\n\tmax,\n\tfilteredChildrenLineReserved = false\n) => {\n\tif (max < 1) {\n\t\treturn {\n\t\t\tchildren: undefined,\n\t\t\tfilteredChildren: getTotalItems(itemsAndGroups)\n\t\t};\n\t}\n\t/** @type {any[] | undefined} */\n\tlet children = undefined;\n\t/** @type {number | undefined} */\n\tlet filteredChildren = undefined;\n\t// This are the groups, which take 1+ lines each\n\tconst groups = [];\n\t// The sizes of the groups are stored in groupSizes\n\tconst groupSizes = [];\n\t// This are the items, which take 1 line each\n\tconst items = [];\n\t// The total of group sizes\n\tlet groupsSize = 0;\n\n\tfor (const itemOrGroup of itemsAndGroups) {\n\t\t// is item\n\t\tif (!itemOrGroup.children && !itemOrGroup.filteredChildren) {\n\t\t\titems.push(itemOrGroup);\n\t\t} else {\n\t\t\tgroups.push(itemOrGroup);\n\t\t\tconst size = getItemSize(itemOrGroup);\n\t\t\tgroupSizes.push(size);\n\t\t\tgroupsSize += size;\n\t\t}\n\t}\n\n\tif (groupsSize + items.length <= max) {\n\t\t// The total size in the current state fits into the max\n\t\t// keep all\n\t\tchildren = groups.length > 0 ? groups.concat(items) : items;\n\t} else if (groups.length === 0) {\n\t\t// slice items to max\n\t\t// inner space marks that lines for filteredChildren already reserved\n\t\tconst limit = max - (filteredChildrenLineReserved ? 0 : 1);\n\t\tfilteredChildren = items.length - limit;\n\t\titems.length = limit;\n\t\tchildren = items;\n\t} else {\n\t\t// limit is the size when all groups are collapsed\n\t\tconst limit =\n\t\t\tgroups.length +\n\t\t\t(filteredChildrenLineReserved || items.length === 0 ? 0 : 1);\n\t\tif (limit < max) {\n\t\t\t// calculate how much we are over the size limit\n\t\t\t// this allows to approach the limit faster\n\t\t\tlet oversize;\n\t\t\t// If each group would take 1 line the total would be below the maximum\n\t\t\t// collapse some groups, keep items\n\t\t\twhile (\n\t\t\t\t(oversize =\n\t\t\t\t\tgroupsSize +\n\t\t\t\t\titems.length +\n\t\t\t\t\t(filteredChildren && !filteredChildrenLineReserved ? 1 : 0) -\n\t\t\t\t\tmax) > 0\n\t\t\t) {\n\t\t\t\t// Find the maximum group and process only this one\n\t\t\t\tconst maxGroupSize = Math.max(...groupSizes);\n\t\t\t\tif (maxGroupSize < items.length) {\n\t\t\t\t\tfilteredChildren = items.length;\n\t\t\t\t\titems.length = 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < groups.length; i++) {\n\t\t\t\t\tif (groupSizes[i] === maxGroupSize) {\n\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t// run this algorithm recursively and limit the size of the children to\n\t\t\t\t\t\t// current size - oversize / number of groups\n\t\t\t\t\t\t// So it should always end up being smaller\n\t\t\t\t\t\tconst headerSize = group.filteredChildren ? 2 : 1;\n\t\t\t\t\t\tconst limited = spaceLimited(\n\t\t\t\t\t\t\tgroup.children,\n\t\t\t\t\t\t\tmaxGroupSize -\n\t\t\t\t\t\t\t\t// we should use ceil to always feet in max\n\t\t\t\t\t\t\t\tMath.ceil(oversize / groups.length) -\n\t\t\t\t\t\t\t\t// we substitute size of group head\n\t\t\t\t\t\t\t\theaderSize,\n\t\t\t\t\t\t\theaderSize === 2\n\t\t\t\t\t\t);\n\t\t\t\t\t\tgroups[i] = {\n\t\t\t\t\t\t\t...group,\n\t\t\t\t\t\t\tchildren: limited.children,\n\t\t\t\t\t\t\tfilteredChildren: limited.filteredChildren\n\t\t\t\t\t\t\t\t? (group.filteredChildren || 0) + limited.filteredChildren\n\t\t\t\t\t\t\t\t: group.filteredChildren\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst newSize = getItemSize(groups[i]);\n\t\t\t\t\t\tgroupsSize -= maxGroupSize - newSize;\n\t\t\t\t\t\tgroupSizes[i] = newSize;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tchildren = groups.concat(items);\n\t\t} else if (limit === max) {\n\t\t\t// If we have only enough space to show one line per group and one line for the filtered items\n\t\t\t// collapse all groups and items\n\t\t\tchildren = collapse(groups);\n\t\t\tfilteredChildren = items.length;\n\t\t} else {\n\t\t\t// If we have no space\n\t\t\t// collapse complete group\n\t\t\tfilteredChildren = getTotalItems(itemsAndGroups);\n\t\t}\n\t}\n\n\treturn {\n\t\tchildren,\n\t\tfilteredChildren\n\t};\n};\n\nconst errorsSpaceLimit = (errors, max) => {\n\tlet filtered = 0;\n\t// Can not fit into limit\n\t// print only messages\n\tif (errors.length + 1 >= max)\n\t\treturn [\n\t\t\terrors.map(error => {\n\t\t\t\tif (typeof error === \"string\" || !error.details) return error;\n\t\t\t\tfiltered++;\n\t\t\t\treturn { ...error, details: \"\" };\n\t\t\t}),\n\t\t\tfiltered\n\t\t];\n\tlet fullLength = errors.length;\n\tlet result = errors;\n\n\tlet i = 0;\n\tfor (; i < errors.length; i++) {\n\t\tconst error = errors[i];\n\t\tif (typeof error !== \"string\" && error.details) {\n\t\t\tconst splitted = error.details.split(\"\\n\");\n\t\t\tconst len = splitted.length;\n\t\t\tfullLength += len;\n\t\t\tif (fullLength > max) {\n\t\t\t\tresult = i > 0 ? errors.slice(0, i) : [];\n\t\t\t\tconst overLimit = fullLength - max + 1;\n\t\t\t\tconst error = errors[i++];\n\t\t\t\tresult.push({\n\t\t\t\t\t...error,\n\t\t\t\t\tdetails: error.details.split(\"\\n\").slice(0, -overLimit).join(\"\\n\"),\n\t\t\t\t\tfilteredDetails: overLimit\n\t\t\t\t});\n\t\t\t\tfiltered = errors.length - i;\n\t\t\t\tfor (; i < errors.length; i++) {\n\t\t\t\t\tconst error = errors[i];\n\t\t\t\t\tif (typeof error === \"string\" || !error.details) result.push(error);\n\t\t\t\t\tresult.push({ ...error, details: \"\" });\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} else if (fullLength === max) {\n\t\t\t\tresult = errors.slice(0, ++i);\n\t\t\t\tfiltered = errors.length - i;\n\t\t\t\tfor (; i < errors.length; i++) {\n\t\t\t\t\tconst error = errors[i];\n\t\t\t\t\tif (typeof error === \"string\" || !error.details) result.push(error);\n\t\t\t\t\tresult.push({ ...error, details: \"\" });\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [result, filtered];\n};\n\nconst assetGroup = (children, assets) => {\n\tlet size = 0;\n\tfor (const asset of children) {\n\t\tsize += asset.size;\n\t}\n\treturn {\n\t\tsize\n\t};\n};\n\nconst moduleGroup = (children, modules) => {\n\tlet size = 0;\n\tconst sizes = {};\n\tfor (const module of children) {\n\t\tsize += module.size;\n\t\tfor (const key of Object.keys(module.sizes)) {\n\t\t\tsizes[key] = (sizes[key] || 0) + module.sizes[key];\n\t\t}\n\t}\n\treturn {\n\t\tsize,\n\t\tsizes\n\t};\n};\n\nconst reasonGroup = (children, reasons) => {\n\tlet active = false;\n\tfor (const reason of children) {\n\t\tactive = active || reason.active;\n\t}\n\treturn {\n\t\tactive\n\t};\n};\n\nconst GROUP_EXTENSION_REGEXP = /(\\.[^.]+?)(?:\\?|(?: \\+ \\d+ modules?)?$)/;\nconst GROUP_PATH_REGEXP = /(.+)[/\\\\][^/\\\\]+?(?:\\?|(?: \\+ \\d+ modules?)?$)/;\n\n/** @type {Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>} */\nconst ASSETS_GROUPERS = {\n\t_: (groupConfigs, context, options) => {\n\t\tconst groupByFlag = (name, exclude) => {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: asset => {\n\t\t\t\t\treturn asset[name] ? [\"1\"] : undefined;\n\t\t\t\t},\n\t\t\t\tgetOptions: () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgroupChildren: !exclude,\n\t\t\t\t\t\tforce: exclude\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, assets) => {\n\t\t\t\t\treturn exclude\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\ttype: \"assets by status\",\n\t\t\t\t\t\t\t\t[name]: !!key,\n\t\t\t\t\t\t\t\tfilteredChildren: assets.length,\n\t\t\t\t\t\t\t\t...assetGroup(children, assets)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\ttype: \"assets by status\",\n\t\t\t\t\t\t\t\t[name]: !!key,\n\t\t\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t\t\t...assetGroup(children, assets)\n\t\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tconst {\n\t\t\tgroupAssetsByEmitStatus,\n\t\t\tgroupAssetsByPath,\n\t\t\tgroupAssetsByExtension\n\t\t} = options;\n\t\tif (groupAssetsByEmitStatus) {\n\t\t\tgroupByFlag(\"emitted\");\n\t\t\tgroupByFlag(\"comparedForEmit\");\n\t\t\tgroupByFlag(\"isOverSizeLimit\");\n\t\t}\n\t\tif (groupAssetsByEmitStatus || !options.cachedAssets) {\n\t\t\tgroupByFlag(\"cached\", !options.cachedAssets);\n\t\t}\n\t\tif (groupAssetsByPath || groupAssetsByExtension) {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: asset => {\n\t\t\t\t\tconst extensionMatch =\n\t\t\t\t\t\tgroupAssetsByExtension && GROUP_EXTENSION_REGEXP.exec(asset.name);\n\t\t\t\t\tconst extension = extensionMatch ? extensionMatch[1] : \"\";\n\t\t\t\t\tconst pathMatch =\n\t\t\t\t\t\tgroupAssetsByPath && GROUP_PATH_REGEXP.exec(asset.name);\n\t\t\t\t\tconst path = pathMatch ? pathMatch[1].split(/[/\\\\]/) : [];\n\t\t\t\t\tconst keys = [];\n\t\t\t\t\tif (groupAssetsByPath) {\n\t\t\t\t\t\tkeys.push(\".\");\n\t\t\t\t\t\tif (extension)\n\t\t\t\t\t\t\tkeys.push(\n\t\t\t\t\t\t\t\tpath.length\n\t\t\t\t\t\t\t\t\t? `${path.join(\"/\")}/*${extension}`\n\t\t\t\t\t\t\t\t\t: `*${extension}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\twhile (path.length > 0) {\n\t\t\t\t\t\t\tkeys.push(path.join(\"/\") + \"/\");\n\t\t\t\t\t\t\tpath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (extension) keys.push(`*${extension}`);\n\t\t\t\t\t}\n\t\t\t\t\treturn keys;\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, assets) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: groupAssetsByPath ? \"assets by path\" : \"assets by extension\",\n\t\t\t\t\t\tname: key,\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...assetGroup(children, assets)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\tgroupAssetsByInfo: (groupConfigs, context, options) => {\n\t\tconst groupByAssetInfoFlag = name => {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: asset => {\n\t\t\t\t\treturn asset.info && asset.info[name] ? [\"1\"] : undefined;\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, assets) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"assets by info\",\n\t\t\t\t\t\tinfo: {\n\t\t\t\t\t\t\t[name]: !!key\n\t\t\t\t\t\t},\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...assetGroup(children, assets)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tgroupByAssetInfoFlag(\"immutable\");\n\t\tgroupByAssetInfoFlag(\"development\");\n\t\tgroupByAssetInfoFlag(\"hotModuleReplacement\");\n\t},\n\tgroupAssetsByChunk: (groupConfigs, context, options) => {\n\t\tconst groupByNames = name => {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: asset => {\n\t\t\t\t\treturn asset[name];\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, assets) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"assets by chunk\",\n\t\t\t\t\t\t[name]: [key],\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...assetGroup(children, assets)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tgroupByNames(\"chunkNames\");\n\t\tgroupByNames(\"auxiliaryChunkNames\");\n\t\tgroupByNames(\"chunkIdHints\");\n\t\tgroupByNames(\"auxiliaryChunkIdHints\");\n\t},\n\texcludeAssets: (groupConfigs, context, { excludeAssets }) => {\n\t\tgroupConfigs.push({\n\t\t\tgetKeys: asset => {\n\t\t\t\tconst ident = asset.name;\n\t\t\t\tconst excluded = excludeAssets.some(fn => fn(ident, asset));\n\t\t\t\tif (excluded) return [\"excluded\"];\n\t\t\t},\n\t\t\tgetOptions: () => ({\n\t\t\t\tgroupChildren: false,\n\t\t\t\tforce: true\n\t\t\t}),\n\t\t\tcreateGroup: (key, children, assets) => ({\n\t\t\t\ttype: \"hidden assets\",\n\t\t\t\tfilteredChildren: assets.length,\n\t\t\t\t...assetGroup(children, assets)\n\t\t\t})\n\t\t});\n\t}\n};\n\n/** @type {function(\"module\" | \"chunk\" | \"root-of-chunk\" | \"nested\"): Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>} */\nconst MODULES_GROUPERS = type => ({\n\t_: (groupConfigs, context, options) => {\n\t\tconst groupByFlag = (name, type, exclude) => {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: module => {\n\t\t\t\t\treturn module[name] ? [\"1\"] : undefined;\n\t\t\t\t},\n\t\t\t\tgetOptions: () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgroupChildren: !exclude,\n\t\t\t\t\t\tforce: exclude\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, modules) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\t[name]: !!key,\n\t\t\t\t\t\t...(exclude ? { filteredChildren: modules.length } : { children }),\n\t\t\t\t\t\t...moduleGroup(children, modules)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tconst {\n\t\t\tgroupModulesByCacheStatus,\n\t\t\tgroupModulesByLayer,\n\t\t\tgroupModulesByAttributes,\n\t\t\tgroupModulesByType,\n\t\t\tgroupModulesByPath,\n\t\t\tgroupModulesByExtension\n\t\t} = options;\n\t\tif (groupModulesByAttributes) {\n\t\t\tgroupByFlag(\"errors\", \"modules with errors\");\n\t\t\tgroupByFlag(\"warnings\", \"modules with warnings\");\n\t\t\tgroupByFlag(\"assets\", \"modules with assets\");\n\t\t\tgroupByFlag(\"optional\", \"optional modules\");\n\t\t}\n\t\tif (groupModulesByCacheStatus) {\n\t\t\tgroupByFlag(\"cacheable\", \"cacheable modules\");\n\t\t\tgroupByFlag(\"built\", \"built modules\");\n\t\t\tgroupByFlag(\"codeGenerated\", \"code generated modules\");\n\t\t}\n\t\tif (groupModulesByCacheStatus || !options.cachedModules) {\n\t\t\tgroupByFlag(\"cached\", \"cached modules\", !options.cachedModules);\n\t\t}\n\t\tif (groupModulesByAttributes || !options.orphanModules) {\n\t\t\tgroupByFlag(\"orphan\", \"orphan modules\", !options.orphanModules);\n\t\t}\n\t\tif (groupModulesByAttributes || !options.dependentModules) {\n\t\t\tgroupByFlag(\"dependent\", \"dependent modules\", !options.dependentModules);\n\t\t}\n\t\tif (groupModulesByType || !options.runtimeModules) {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: module => {\n\t\t\t\t\tif (!module.moduleType) return;\n\t\t\t\t\tif (groupModulesByType) {\n\t\t\t\t\t\treturn [module.moduleType.split(\"/\", 1)[0]];\n\t\t\t\t\t} else if (module.moduleType === WEBPACK_MODULE_TYPE_RUNTIME) {\n\t\t\t\t\t\treturn [WEBPACK_MODULE_TYPE_RUNTIME];\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tgetOptions: key => {\n\t\t\t\t\tconst exclude =\n\t\t\t\t\t\tkey === WEBPACK_MODULE_TYPE_RUNTIME && !options.runtimeModules;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgroupChildren: !exclude,\n\t\t\t\t\t\tforce: exclude\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, modules) => {\n\t\t\t\t\tconst exclude =\n\t\t\t\t\t\tkey === WEBPACK_MODULE_TYPE_RUNTIME && !options.runtimeModules;\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: `${key} modules`,\n\t\t\t\t\t\tmoduleType: key,\n\t\t\t\t\t\t...(exclude ? { filteredChildren: modules.length } : { children }),\n\t\t\t\t\t\t...moduleGroup(children, modules)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (groupModulesByLayer) {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: module => {\n\t\t\t\t\treturn [module.layer];\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, modules) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"modules by layer\",\n\t\t\t\t\t\tlayer: key,\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...moduleGroup(children, modules)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (groupModulesByPath || groupModulesByExtension) {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: module => {\n\t\t\t\t\tif (!module.name) return;\n\t\t\t\t\tconst resource = parseResource(module.name.split(\"!\").pop()).path;\n\t\t\t\t\tconst dataUrl = /^data:[^,;]+/.exec(resource);\n\t\t\t\t\tif (dataUrl) return [dataUrl[0]];\n\t\t\t\t\tconst extensionMatch =\n\t\t\t\t\t\tgroupModulesByExtension && GROUP_EXTENSION_REGEXP.exec(resource);\n\t\t\t\t\tconst extension = extensionMatch ? extensionMatch[1] : \"\";\n\t\t\t\t\tconst pathMatch =\n\t\t\t\t\t\tgroupModulesByPath && GROUP_PATH_REGEXP.exec(resource);\n\t\t\t\t\tconst path = pathMatch ? pathMatch[1].split(/[/\\\\]/) : [];\n\t\t\t\t\tconst keys = [];\n\t\t\t\t\tif (groupModulesByPath) {\n\t\t\t\t\t\tif (extension)\n\t\t\t\t\t\t\tkeys.push(\n\t\t\t\t\t\t\t\tpath.length\n\t\t\t\t\t\t\t\t\t? `${path.join(\"/\")}/*${extension}`\n\t\t\t\t\t\t\t\t\t: `*${extension}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\twhile (path.length > 0) {\n\t\t\t\t\t\t\tkeys.push(path.join(\"/\") + \"/\");\n\t\t\t\t\t\t\tpath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (extension) keys.push(`*${extension}`);\n\t\t\t\t\t}\n\t\t\t\t\treturn keys;\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, modules) => {\n\t\t\t\t\tconst isDataUrl = key.startsWith(\"data:\");\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: isDataUrl\n\t\t\t\t\t\t\t? \"modules by mime type\"\n\t\t\t\t\t\t\t: groupModulesByPath\n\t\t\t\t\t\t\t\t? \"modules by path\"\n\t\t\t\t\t\t\t\t: \"modules by extension\",\n\t\t\t\t\t\tname: isDataUrl ? key.slice(/* 'data:'.length */ 5) : key,\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...moduleGroup(children, modules)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\texcludeModules: (groupConfigs, context, { excludeModules }) => {\n\t\tgroupConfigs.push({\n\t\t\tgetKeys: module => {\n\t\t\t\tconst name = module.name;\n\t\t\t\tif (name) {\n\t\t\t\t\tconst excluded = excludeModules.some(fn => fn(name, module, type));\n\t\t\t\t\tif (excluded) return [\"1\"];\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetOptions: () => ({\n\t\t\t\tgroupChildren: false,\n\t\t\t\tforce: true\n\t\t\t}),\n\t\t\tcreateGroup: (key, children, modules) => ({\n\t\t\t\ttype: \"hidden modules\",\n\t\t\t\tfilteredChildren: children.length,\n\t\t\t\t...moduleGroup(children, modules)\n\t\t\t})\n\t\t});\n\t}\n});\n\n/** @type {Record<string, Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>} */\nconst RESULT_GROUPERS = {\n\t\"compilation.assets\": ASSETS_GROUPERS,\n\t\"asset.related\": ASSETS_GROUPERS,\n\t\"compilation.modules\": MODULES_GROUPERS(\"module\"),\n\t\"chunk.modules\": MODULES_GROUPERS(\"chunk\"),\n\t\"chunk.rootModules\": MODULES_GROUPERS(\"root-of-chunk\"),\n\t\"module.modules\": MODULES_GROUPERS(\"nested\"),\n\t\"module.reasons\": {\n\t\tgroupReasonsByOrigin: groupConfigs => {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: reason => {\n\t\t\t\t\treturn [reason.module];\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, reasons) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"from origin\",\n\t\t\t\t\t\tmodule: key,\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...reasonGroup(children, reasons)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n};\n\n// remove a prefixed \"!\" that can be specified to reverse sort order\nconst normalizeFieldKey = field => {\n\tif (field[0] === \"!\") {\n\t\treturn field.slice(1);\n\t}\n\treturn field;\n};\n\n// if a field is prefixed by a \"!\" reverse sort order\nconst sortOrderRegular = field => {\n\tif (field[0] === \"!\") {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n/**\n * @param {string} field field name\n * @returns {function(Object, Object): number} comparators\n */\nconst sortByField = field => {\n\tif (!field) {\n\t\t/**\n\t\t * @param {any} a first\n\t\t * @param {any} b second\n\t\t * @returns {-1|0|1} zero\n\t\t */\n\t\tconst noSort = (a, b) => 0;\n\t\treturn noSort;\n\t}\n\n\tconst fieldKey = normalizeFieldKey(field);\n\n\tlet sortFn = compareSelect(m => m[fieldKey], compareIds);\n\n\t// if a field is prefixed with a \"!\" the sort is reversed!\n\tconst sortIsRegular = sortOrderRegular(field);\n\n\tif (!sortIsRegular) {\n\t\tconst oldSortFn = sortFn;\n\t\tsortFn = (a, b) => oldSortFn(b, a);\n\t}\n\n\treturn sortFn;\n};\n\nconst ASSET_SORTERS = {\n\t/** @type {(comparators: Function[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void} */\n\tassetsSort: (comparators, context, { assetsSort }) => {\n\t\tcomparators.push(sortByField(assetsSort));\n\t},\n\t_: comparators => {\n\t\tcomparators.push(compareSelect(a => a.name, compareIds));\n\t}\n};\n\n/** @type {Record<string, Record<string, (comparators: Function[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>} */\nconst RESULT_SORTERS = {\n\t\"compilation.chunks\": {\n\t\tchunksSort: (comparators, context, { chunksSort }) => {\n\t\t\tcomparators.push(sortByField(chunksSort));\n\t\t}\n\t},\n\t\"compilation.modules\": {\n\t\tmodulesSort: (comparators, context, { modulesSort }) => {\n\t\t\tcomparators.push(sortByField(modulesSort));\n\t\t}\n\t},\n\t\"chunk.modules\": {\n\t\tchunkModulesSort: (comparators, context, { chunkModulesSort }) => {\n\t\t\tcomparators.push(sortByField(chunkModulesSort));\n\t\t}\n\t},\n\t\"module.modules\": {\n\t\tnestedModulesSort: (comparators, context, { nestedModulesSort }) => {\n\t\t\tcomparators.push(sortByField(nestedModulesSort));\n\t\t}\n\t},\n\t\"compilation.assets\": ASSET_SORTERS,\n\t\"asset.related\": ASSET_SORTERS\n};\n\n/**\n * @param {Record<string, Record<string, Function>>} config the config see above\n * @param {NormalizedStatsOptions} options stats options\n * @param {function(string, Function): void} fn handler function called for every active line in config\n * @returns {void}\n */\nconst iterateConfig = (config, options, fn) => {\n\tfor (const hookFor of Object.keys(config)) {\n\t\tconst subConfig = config[hookFor];\n\t\tfor (const option of Object.keys(subConfig)) {\n\t\t\tif (option !== \"_\") {\n\t\t\t\tif (option.startsWith(\"!\")) {\n\t\t\t\t\tif (options[option.slice(1)]) continue;\n\t\t\t\t} else {\n\t\t\t\t\tconst value = options[option];\n\t\t\t\t\tif (\n\t\t\t\t\t\tvalue === false ||\n\t\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t\t(Array.isArray(value) && value.length === 0)\n\t\t\t\t\t)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfn(hookFor, subConfig[option]);\n\t\t}\n\t}\n};\n\n/** @type {Record<string, string>} */\nconst ITEM_NAMES = {\n\t\"compilation.children[]\": \"compilation\",\n\t\"compilation.modules[]\": \"module\",\n\t\"compilation.entrypoints[]\": \"chunkGroup\",\n\t\"compilation.namedChunkGroups[]\": \"chunkGroup\",\n\t\"compilation.errors[]\": \"error\",\n\t\"compilation.warnings[]\": \"warning\",\n\t\"chunk.modules[]\": \"module\",\n\t\"chunk.rootModules[]\": \"module\",\n\t\"chunk.origins[]\": \"chunkOrigin\",\n\t\"compilation.chunks[]\": \"chunk\",\n\t\"compilation.assets[]\": \"asset\",\n\t\"asset.related[]\": \"asset\",\n\t\"module.issuerPath[]\": \"moduleIssuer\",\n\t\"module.reasons[]\": \"moduleReason\",\n\t\"module.modules[]\": \"module\",\n\t\"module.children[]\": \"module\",\n\t\"moduleTrace[]\": \"moduleTraceItem\",\n\t\"moduleTraceItem.dependencies[]\": \"moduleTraceDependency\"\n};\n\n/**\n * @param {Object[]} items items to be merged\n * @returns {Object} an object\n */\nconst mergeToObject = items => {\n\tconst obj = Object.create(null);\n\tfor (const item of items) {\n\t\tobj[item.name] = item;\n\t}\n\treturn obj;\n};\n\n/** @type {Record<string, (items: Object[]) => any>} */\nconst MERGER = {\n\t\"compilation.entrypoints\": mergeToObject,\n\t\"compilation.namedChunkGroups\": mergeToObject\n};\n\nclass DefaultStatsFactoryPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"DefaultStatsFactoryPlugin\", compilation => {\n\t\t\tcompilation.hooks.statsFactory.tap(\n\t\t\t\t\"DefaultStatsFactoryPlugin\",\n\t\t\t\t(stats, options, context) => {\n\t\t\t\t\titerateConfig(SIMPLE_EXTRACTORS, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.extract\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (obj, data, ctx) =>\n\t\t\t\t\t\t\t\tfn(obj, data, ctx, options, stats)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\titerateConfig(FILTER, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.filter\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (item, ctx, idx, i) =>\n\t\t\t\t\t\t\t\tfn(item, ctx, options, idx, i)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\titerateConfig(FILTER_RESULTS, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.filterResults\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (item, ctx, idx, i) =>\n\t\t\t\t\t\t\t\tfn(item, ctx, options, idx, i)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\titerateConfig(SORTERS, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.sort\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (comparators, ctx) =>\n\t\t\t\t\t\t\t\tfn(comparators, ctx, options)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\titerateConfig(RESULT_SORTERS, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.sortResults\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (comparators, ctx) =>\n\t\t\t\t\t\t\t\tfn(comparators, ctx, options)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\titerateConfig(RESULT_GROUPERS, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.groupResults\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (groupConfigs, ctx) =>\n\t\t\t\t\t\t\t\tfn(groupConfigs, ctx, options)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\tfor (const key of Object.keys(ITEM_NAMES)) {\n\t\t\t\t\t\tconst itemName = ITEM_NAMES[key];\n\t\t\t\t\t\tstats.hooks.getItemName\n\t\t\t\t\t\t\t.for(key)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", () => itemName);\n\t\t\t\t\t}\n\t\t\t\t\tfor (const key of Object.keys(MERGER)) {\n\t\t\t\t\t\tconst merger = MERGER[key];\n\t\t\t\t\t\tstats.hooks.merge.for(key).tap(\"DefaultStatsFactoryPlugin\", merger);\n\t\t\t\t\t}\n\t\t\t\t\tif (options.children) {\n\t\t\t\t\t\tif (Array.isArray(options.children)) {\n\t\t\t\t\t\t\tstats.hooks.getItemFactory\n\t\t\t\t\t\t\t\t.for(\"compilation.children[].compilation\")\n\t\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (comp, { _index: idx }) => {\n\t\t\t\t\t\t\t\t\tif (idx < options.children.length) {\n\t\t\t\t\t\t\t\t\t\treturn compilation.createStatsFactory(\n\t\t\t\t\t\t\t\t\t\t\tcompilation.createStatsOptions(\n\t\t\t\t\t\t\t\t\t\t\t\toptions.children[idx],\n\t\t\t\t\t\t\t\t\t\t\t\tcontext\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (options.children !== true) {\n\t\t\t\t\t\t\tconst childFactory = compilation.createStatsFactory(\n\t\t\t\t\t\t\t\tcompilation.createStatsOptions(options.children, context)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tstats.hooks.getItemFactory\n\t\t\t\t\t\t\t\t.for(\"compilation.children[].compilation\")\n\t\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", () => {\n\t\t\t\t\t\t\t\t\treturn childFactory;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\nmodule.exports = DefaultStatsFactoryPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEC;AAA4B,CAAC,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AACzE,MAAME,gBAAgB,GAAGF,OAAO,CAAC,kCAAkC,CAAC;AACpE,MAAMG,cAAc,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAM;EAAEI;AAAQ,CAAC,GAAGJ,OAAO,CAAC,mBAAmB,CAAC;AAChD,MAAMK,yBAAyB,GAAGL,OAAO,CAAC,uCAAuC,CAAC;AAClF,MAAMM,gBAAgB,GAAGN,OAAO,CAAC,iCAAiC,CAAC;AACnE,MAAM;EAAEO;AAAc,CAAC,GAAGP,OAAO,CAAC,yBAAyB,CAAC;AAC5D,MAAM;EACLQ,gBAAgB;EAChBC,iBAAiB;EACjBC,cAAc;EACdC,UAAU;EACVC,iBAAiB;EACjBC,aAAa;EACbC;AACD,CAAC,GAAGd,OAAO,CAAC,qBAAqB,CAAC;AAClC,MAAM;EAAEe,iBAAiB;EAAEC;AAAc,CAAC,GAAGhB,OAAO,CAAC,oBAAoB,CAAC;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMiB,WAAW,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACxC;EACA,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,CAAC;EACrB,KAAK,MAAMC,IAAI,IAAIJ,KAAK,EAAE;IACzB,KAAK,MAAMK,CAAC,IAAIJ,QAAQ,CAACG,IAAI,CAAC,EAAE;MAC/BF,GAAG,CAACI,GAAG,CAACD,CAAC,CAAC;IACX;EACD;EACA,OAAOE,KAAK,CAACC,IAAI,CAACN,GAAG,CAAC;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMO,kBAAkB,GAA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}