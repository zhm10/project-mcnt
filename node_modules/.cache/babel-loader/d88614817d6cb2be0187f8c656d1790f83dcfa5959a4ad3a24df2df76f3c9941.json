{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\nconst {\n  WEBASSEMBLY_MODULE_TYPE_SYNC\n} = require(\"../ModuleTypeConstants\");\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nconst {\n  compareModulesByIdentifier\n} = require(\"../util/comparators\");\nconst memoize = require(\"../util/memoize\");\nconst WebAssemblyInInitialChunkError = require(\"./WebAssemblyInInitialChunkError\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").OutputNormalized} OutputOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleTemplate\")} ModuleTemplate */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n\nconst getWebAssemblyGenerator = memoize(() => require(\"./WebAssemblyGenerator\"));\nconst getWebAssemblyJavascriptGenerator = memoize(() => require(\"./WebAssemblyJavascriptGenerator\"));\nconst getWebAssemblyParser = memoize(() => require(\"./WebAssemblyParser\"));\nconst PLUGIN_NAME = \"WebAssemblyModulesPlugin\";\n\n/**\n * @typedef {Object} WebAssemblyModulesPluginOptions\n * @property {boolean} [mangleImports] mangle imports\n */\n\nclass WebAssemblyModulesPlugin {\n  /**\n   * @param {WebAssemblyModulesPluginOptions} options options\n   */\n  constructor(options) {\n    this.options = options;\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation, {\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(WebAssemblyImportDependency, normalModuleFactory);\n      compilation.dependencyFactories.set(WebAssemblyExportImportedDependency, normalModuleFactory);\n      normalModuleFactory.hooks.createParser.for(WEBASSEMBLY_MODULE_TYPE_SYNC).tap(PLUGIN_NAME, () => {\n        const WebAssemblyParser = getWebAssemblyParser();\n        return new WebAssemblyParser();\n      });\n      normalModuleFactory.hooks.createGenerator.for(WEBASSEMBLY_MODULE_TYPE_SYNC).tap(PLUGIN_NAME, () => {\n        const WebAssemblyJavascriptGenerator = getWebAssemblyJavascriptGenerator();\n        const WebAssemblyGenerator = getWebAssemblyGenerator();\n        return Generator.byType({\n          javascript: new WebAssemblyJavascriptGenerator(),\n          webassembly: new WebAssemblyGenerator(this.options)\n        });\n      });\n      compilation.hooks.renderManifest.tap(PLUGIN_NAME, (result, options) => {\n        const {\n          chunkGraph\n        } = compilation;\n        const {\n          chunk,\n          outputOptions,\n          codeGenerationResults\n        } = options;\n        for (const module of chunkGraph.getOrderedChunkModulesIterable(chunk, compareModulesByIdentifier)) {\n          if (module.type === WEBASSEMBLY_MODULE_TYPE_SYNC) {\n            const filenameTemplate = /** @type {NonNullable<OutputOptions[\"webassemblyModuleFilename\"]>} */\n            outputOptions.webassemblyModuleFilename;\n            result.push({\n              render: () => codeGenerationResults.getSource(module, chunk.runtime, \"webassembly\"),\n              filenameTemplate,\n              pathOptions: {\n                module,\n                runtime: chunk.runtime,\n                chunkGraph\n              },\n              auxiliary: true,\n              identifier: `webassemblyModule${chunkGraph.getModuleId(module)}`,\n              hash: chunkGraph.getModuleHash(module, chunk.runtime)\n            });\n          }\n        }\n        return result;\n      });\n      compilation.hooks.afterChunks.tap(PLUGIN_NAME, () => {\n        const chunkGraph = compilation.chunkGraph;\n        const initialWasmModules = new Set();\n        for (const chunk of compilation.chunks) {\n          if (chunk.canBeInitial()) {\n            for (const module of chunkGraph.getChunkModulesIterable(chunk)) {\n              if (module.type === WEBASSEMBLY_MODULE_TYPE_SYNC) {\n                initialWasmModules.add(module);\n              }\n            }\n          }\n        }\n        for (const module of initialWasmModules) {\n          compilation.errors.push(new WebAssemblyInInitialChunkError(module, compilation.moduleGraph, compilation.chunkGraph, compilation.requestShortener));\n        }\n      });\n    });\n  }\n}\nmodule.exports = WebAssemblyModulesPlugin;","map":{"version":3,"names":["Generator","require","WEBASSEMBLY_MODULE_TYPE_SYNC","WebAssemblyExportImportedDependency","WebAssemblyImportDependency","compareModulesByIdentifier","memoize","WebAssemblyInInitialChunkError","getWebAssemblyGenerator","getWebAssemblyJavascriptGenerator","getWebAssemblyParser","PLUGIN_NAME","WebAssemblyModulesPlugin","constructor","options","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","createParser","for","WebAssemblyParser","createGenerator","WebAssemblyJavascriptGenerator","WebAssemblyGenerator","byType","javascript","webassembly","renderManifest","result","chunkGraph","chunk","outputOptions","codeGenerationResults","module","getOrderedChunkModulesIterable","type","filenameTemplate","webassemblyModuleFilename","push","render","getSource","runtime","pathOptions","auxiliary","identifier","getModuleId","hash","getModuleHash","afterChunks","initialWasmModules","Set","chunks","canBeInitial","getChunkModulesIterable","add","errors","moduleGraph","requestShortener","exports"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/wasm-sync/WebAssemblyModulesPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\nconst { WEBASSEMBLY_MODULE_TYPE_SYNC } = require(\"../ModuleTypeConstants\");\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nconst { compareModulesByIdentifier } = require(\"../util/comparators\");\nconst memoize = require(\"../util/memoize\");\nconst WebAssemblyInInitialChunkError = require(\"./WebAssemblyInInitialChunkError\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").OutputNormalized} OutputOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleTemplate\")} ModuleTemplate */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n\nconst getWebAssemblyGenerator = memoize(() =>\n\trequire(\"./WebAssemblyGenerator\")\n);\nconst getWebAssemblyJavascriptGenerator = memoize(() =>\n\trequire(\"./WebAssemblyJavascriptGenerator\")\n);\nconst getWebAssemblyParser = memoize(() => require(\"./WebAssemblyParser\"));\n\nconst PLUGIN_NAME = \"WebAssemblyModulesPlugin\";\n\n/**\n * @typedef {Object} WebAssemblyModulesPluginOptions\n * @property {boolean} [mangleImports] mangle imports\n */\n\nclass WebAssemblyModulesPlugin {\n\t/**\n\t * @param {WebAssemblyModulesPluginOptions} options options\n\t */\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\tPLUGIN_NAME,\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tWebAssemblyImportDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tWebAssemblyExportImportedDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(WEBASSEMBLY_MODULE_TYPE_SYNC)\n\t\t\t\t\t.tap(PLUGIN_NAME, () => {\n\t\t\t\t\t\tconst WebAssemblyParser = getWebAssemblyParser();\n\n\t\t\t\t\t\treturn new WebAssemblyParser();\n\t\t\t\t\t});\n\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t.for(WEBASSEMBLY_MODULE_TYPE_SYNC)\n\t\t\t\t\t.tap(PLUGIN_NAME, () => {\n\t\t\t\t\t\tconst WebAssemblyJavascriptGenerator =\n\t\t\t\t\t\t\tgetWebAssemblyJavascriptGenerator();\n\t\t\t\t\t\tconst WebAssemblyGenerator = getWebAssemblyGenerator();\n\n\t\t\t\t\t\treturn Generator.byType({\n\t\t\t\t\t\t\tjavascript: new WebAssemblyJavascriptGenerator(),\n\t\t\t\t\t\t\twebassembly: new WebAssemblyGenerator(this.options)\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.renderManifest.tap(PLUGIN_NAME, (result, options) => {\n\t\t\t\t\tconst { chunkGraph } = compilation;\n\t\t\t\t\tconst { chunk, outputOptions, codeGenerationResults } = options;\n\n\t\t\t\t\tfor (const module of chunkGraph.getOrderedChunkModulesIterable(\n\t\t\t\t\t\tchunk,\n\t\t\t\t\t\tcompareModulesByIdentifier\n\t\t\t\t\t)) {\n\t\t\t\t\t\tif (module.type === WEBASSEMBLY_MODULE_TYPE_SYNC) {\n\t\t\t\t\t\t\tconst filenameTemplate =\n\t\t\t\t\t\t\t\t/** @type {NonNullable<OutputOptions[\"webassemblyModuleFilename\"]>} */\n\t\t\t\t\t\t\t\t(outputOptions.webassemblyModuleFilename);\n\n\t\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\t\trender: () =>\n\t\t\t\t\t\t\t\t\tcodeGenerationResults.getSource(\n\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\tchunk.runtime,\n\t\t\t\t\t\t\t\t\t\t\"webassembly\"\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tfilenameTemplate,\n\t\t\t\t\t\t\t\tpathOptions: {\n\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\truntime: chunk.runtime,\n\t\t\t\t\t\t\t\t\tchunkGraph\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tauxiliary: true,\n\t\t\t\t\t\t\t\tidentifier: `webassemblyModule${chunkGraph.getModuleId(\n\t\t\t\t\t\t\t\t\tmodule\n\t\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\t\thash: chunkGraph.getModuleHash(module, chunk.runtime)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result;\n\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.afterChunks.tap(PLUGIN_NAME, () => {\n\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\tconst initialWasmModules = new Set();\n\t\t\t\t\tfor (const chunk of compilation.chunks) {\n\t\t\t\t\t\tif (chunk.canBeInitial()) {\n\t\t\t\t\t\t\tfor (const module of chunkGraph.getChunkModulesIterable(chunk)) {\n\t\t\t\t\t\t\t\tif (module.type === WEBASSEMBLY_MODULE_TYPE_SYNC) {\n\t\t\t\t\t\t\t\t\tinitialWasmModules.add(module);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const module of initialWasmModules) {\n\t\t\t\t\t\tcompilation.errors.push(\n\t\t\t\t\t\t\tnew WebAssemblyInInitialChunkError(\n\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\tcompilation.moduleGraph,\n\t\t\t\t\t\t\t\tcompilation.chunkGraph,\n\t\t\t\t\t\t\t\tcompilation.requestShortener\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = WebAssemblyModulesPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}