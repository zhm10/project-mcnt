{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst {\n  RawSource\n} = require(\"webpack-sources\");\nconst ConcatenationScope = require(\"../ConcatenationScope\");\nconst Generator = require(\"../Generator\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\nconst TYPES = new Set([\"javascript\"]);\nclass AssetSourceGenerator extends Generator {\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source} generated code\n   */\n  generate(module, {\n    concatenationScope,\n    chunkGraph,\n    runtimeTemplate,\n    runtimeRequirements\n  }) {\n    const originalSource = module.originalSource();\n    if (!originalSource) {\n      return new RawSource(\"\");\n    }\n    const content = originalSource.source();\n    let encodedSource;\n    if (typeof content === \"string\") {\n      encodedSource = content;\n    } else {\n      encodedSource = content.toString(\"utf-8\");\n    }\n    let sourceContent;\n    if (concatenationScope) {\n      concatenationScope.registerNamespaceExport(ConcatenationScope.NAMESPACE_OBJECT_EXPORT);\n      sourceContent = `${runtimeTemplate.supportsConst() ? \"const\" : \"var\"} ${ConcatenationScope.NAMESPACE_OBJECT_EXPORT} = ${JSON.stringify(encodedSource)};`;\n    } else {\n      runtimeRequirements.add(RuntimeGlobals.module);\n      sourceContent = `${RuntimeGlobals.module}.exports = ${JSON.stringify(encodedSource)};`;\n    }\n    return new RawSource(sourceContent);\n  }\n\n  /**\n   * @param {NormalModule} module module for which the bailout reason should be determined\n   * @param {ConcatenationBailoutReasonContext} context context\n   * @returns {string | undefined} reason why this module can't be concatenated, undefined when it can be concatenated\n   */\n  getConcatenationBailoutReason(module, context) {\n    return undefined;\n  }\n\n  /**\n   * @param {NormalModule} module fresh module\n   * @returns {Set<string>} available types (do not mutate)\n   */\n  getTypes(module) {\n    return TYPES;\n  }\n\n  /**\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n  getSize(module, type) {\n    const originalSource = module.originalSource();\n    if (!originalSource) {\n      return 0;\n    }\n\n    // Example: m.exports=\"abcd\"\n    return originalSource.size() + 12;\n  }\n}\nmodule.exports = AssetSourceGenerator;","map":{"version":3,"names":["RawSource","require","ConcatenationScope","Generator","RuntimeGlobals","TYPES","Set","AssetSourceGenerator","generate","module","concatenationScope","chunkGraph","runtimeTemplate","runtimeRequirements","originalSource","content","source","encodedSource","toString","sourceContent","registerNamespaceExport","NAMESPACE_OBJECT_EXPORT","supportsConst","JSON","stringify","add","getConcatenationBailoutReason","context","undefined","getTypes","getSize","type","size","exports"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/asset/AssetSourceGenerator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst { RawSource } = require(\"webpack-sources\");\nconst ConcatenationScope = require(\"../ConcatenationScope\");\nconst Generator = require(\"../Generator\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\nconst TYPES = new Set([\"javascript\"]);\n\nclass AssetSourceGenerator extends Generator {\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(\n\t\tmodule,\n\t\t{ concatenationScope, chunkGraph, runtimeTemplate, runtimeRequirements }\n\t) {\n\t\tconst originalSource = module.originalSource();\n\n\t\tif (!originalSource) {\n\t\t\treturn new RawSource(\"\");\n\t\t}\n\n\t\tconst content = originalSource.source();\n\n\t\tlet encodedSource;\n\t\tif (typeof content === \"string\") {\n\t\t\tencodedSource = content;\n\t\t} else {\n\t\t\tencodedSource = content.toString(\"utf-8\");\n\t\t}\n\n\t\tlet sourceContent;\n\t\tif (concatenationScope) {\n\t\t\tconcatenationScope.registerNamespaceExport(\n\t\t\t\tConcatenationScope.NAMESPACE_OBJECT_EXPORT\n\t\t\t);\n\t\t\tsourceContent = `${runtimeTemplate.supportsConst() ? \"const\" : \"var\"} ${\n\t\t\t\tConcatenationScope.NAMESPACE_OBJECT_EXPORT\n\t\t\t} = ${JSON.stringify(encodedSource)};`;\n\t\t} else {\n\t\t\truntimeRequirements.add(RuntimeGlobals.module);\n\t\t\tsourceContent = `${RuntimeGlobals.module}.exports = ${JSON.stringify(\n\t\t\t\tencodedSource\n\t\t\t)};`;\n\t\t}\n\t\treturn new RawSource(sourceContent);\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the bailout reason should be determined\n\t * @param {ConcatenationBailoutReasonContext} context context\n\t * @returns {string | undefined} reason why this module can't be concatenated, undefined when it can be concatenated\n\t */\n\tgetConcatenationBailoutReason(module, context) {\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn TYPES;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\tconst originalSource = module.originalSource();\n\n\t\tif (!originalSource) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Example: m.exports=\"abcd\"\n\t\treturn originalSource.size() + 12;\n\t}\n}\n\nmodule.exports = AssetSourceGenerator;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAChD,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAC3D,MAAME,SAAS,GAAGF,OAAO,CAAC,cAAc,CAAC;AACzC,MAAMG,cAAc,GAAGH,OAAO,CAAC,mBAAmB,CAAC;;AAEnD;AACA;AACA;AACA;;AAEA,MAAMI,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;AAErC,MAAMC,oBAAoB,SAASJ,SAAS,CAAC;EAC5C;AACD;AACA;AACA;AACA;EACCK,QAAQA,CACPC,MAAM,EACN;IAAEC,kBAAkB;IAAEC,UAAU;IAAEC,eAAe;IAAEC;EAAoB,CAAC,EACvE;IACD,MAAMC,cAAc,GAAGL,MAAM,CAACK,cAAc,CAAC,CAAC;IAE9C,IAAI,CAACA,cAAc,EAAE;MACpB,OAAO,IAAId,SAAS,CAAC,EAAE,CAAC;IACzB;IAEA,MAAMe,OAAO,GAAGD,cAAc,CAACE,MAAM,CAAC,CAAC;IAEvC,IAAIC,aAAa;IACjB,IAAI,OAAOF,OAAO,KAAK,QAAQ,EAAE;MAChCE,aAAa,GAAGF,OAAO;IACxB,CAAC,MAAM;MACNE,aAAa,GAAGF,OAAO,CAACG,QAAQ,CAAC,OAAO,CAAC;IAC1C;IAEA,IAAIC,aAAa;IACjB,IAAIT,kBAAkB,EAAE;MACvBA,kBAAkB,CAACU,uBAAuB,CACzClB,kBAAkB,CAACmB,uBACpB,CAAC;MACDF,aAAa,GAAG,GAAGP,eAAe,CAACU,aAAa,CAAC,CAAC,GAAG,OAAO,GAAG,KAAK,IACnEpB,kBAAkB,CAACmB,uBAAuB,MACrCE,IAAI,CAACC,SAAS,CAACP,aAAa,CAAC,GAAG;IACvC,CAAC,MAAM;MACNJ,mBAAmB,CAACY,GAAG,CAACrB,cAAc,CAACK,MAAM,CAAC;MAC9CU,aAAa,GAAG,GAAGf,cAAc,CAACK,MAAM,cAAcc,IAAI,CAACC,SAAS,CACnEP,aACD,CAAC,GAAG;IACL;IACA,OAAO,IAAIjB,SAAS,CAACmB,aAAa,CAAC;EACpC;;EAEA;AACD;AACA;AACA;AACA;EACCO,6BAA6BA,CAACjB,MAAM,EAAEkB,OAAO,EAAE;IAC9C,OAAOC,SAAS;EACjB;;EAEA;AACD;AACA;AACA;EACCC,QAAQA,CAACpB,MAAM,EAAE;IAChB,OAAOJ,KAAK;EACb;;EAEA;AACD;AACA;AACA;AACA;EACCyB,OAAOA,CAACrB,MAAM,EAAEsB,IAAI,EAAE;IACrB,MAAMjB,cAAc,GAAGL,MAAM,CAACK,cAAc,CAAC,CAAC;IAE9C,IAAI,CAACA,cAAc,EAAE;MACpB,OAAO,CAAC;IACT;;IAEA;IACA,OAAOA,cAAc,CAACkB,IAAI,CAAC,CAAC,GAAG,EAAE;EAClC;AACD;AAEAvB,MAAM,CAACwB,OAAO,GAAG1B,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}