{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n  Parser: AcornParser\n} = require(\"acorn\");\nconst {\n  importAssertions\n} = require(\"acorn-import-assertions\");\nconst {\n  SyncBailHook,\n  HookMap\n} = require(\"tapable\");\nconst vm = require(\"vm\");\nconst Parser = require(\"../Parser\");\nconst StackedMap = require(\"../util/StackedMap\");\nconst binarySearchBounds = require(\"../util/binarySearchBounds\");\nconst memoize = require(\"../util/memoize\");\nconst BasicEvaluatedExpression = require(\"./BasicEvaluatedExpression\");\n\n/** @typedef {import(\"acorn\").Options} AcornOptions */\n/** @typedef {import(\"estree\").AssignmentExpression} AssignmentExpression */\n/** @typedef {import(\"estree\").BinaryExpression} BinaryExpression */\n/** @typedef {import(\"estree\").BlockStatement} BlockStatement */\n/** @typedef {import(\"estree\").SequenceExpression} SequenceExpression */\n/** @typedef {import(\"estree\").CallExpression} CallExpression */\n/** @typedef {import(\"estree\").BaseCallExpression} BaseCallExpression */\n/** @typedef {import(\"estree\").StaticBlock} StaticBlock */\n/** @typedef {import(\"estree\").ImportExpression} ImportExpression */\n/** @typedef {import(\"estree\").ClassDeclaration} ClassDeclaration */\n/** @typedef {import(\"estree\").ForStatement} ForStatement */\n/** @typedef {import(\"estree\").SwitchStatement} SwitchStatement */\n/** @typedef {import(\"estree\").ExportNamedDeclaration} ExportNamedDeclaration */\n/** @typedef {import(\"estree\").ClassExpression} ClassExpression */\n/** @typedef {import(\"estree\").Comment} Comment */\n/** @typedef {import(\"estree\").ConditionalExpression} ConditionalExpression */\n/** @typedef {import(\"estree\").Declaration} Declaration */\n/** @typedef {import(\"estree\").PrivateIdentifier} PrivateIdentifier */\n/** @typedef {import(\"estree\").PropertyDefinition} PropertyDefinition */\n/** @typedef {import(\"estree\").Expression} Expression */\n/** @typedef {import(\"estree\").Identifier} Identifier */\n/** @typedef {import(\"estree\").VariableDeclaration} VariableDeclaration */\n/** @typedef {import(\"estree\").IfStatement} IfStatement */\n/** @typedef {import(\"estree\").LabeledStatement} LabeledStatement */\n/** @typedef {import(\"estree\").Literal} Literal */\n/** @typedef {import(\"estree\").LogicalExpression} LogicalExpression */\n/** @typedef {import(\"estree\").ChainExpression} ChainExpression */\n/** @typedef {import(\"estree\").MemberExpression} MemberExpression */\n/** @typedef {import(\"estree\").YieldExpression} YieldExpression */\n/** @typedef {import(\"estree\").MetaProperty} MetaProperty */\n/** @typedef {import(\"estree\").Property} Property */\n/** @typedef {import(\"estree\").AssignmentPattern} AssignmentPattern */\n/** @typedef {import(\"estree\").ChainElement} ChainElement */\n/** @typedef {import(\"estree\").Pattern} Pattern */\n/** @typedef {import(\"estree\").UpdateExpression} UpdateExpression */\n/** @typedef {import(\"estree\").ObjectExpression} ObjectExpression */\n/** @typedef {import(\"estree\").UnaryExpression} UnaryExpression */\n/** @typedef {import(\"estree\").ArrayExpression} ArrayExpression */\n/** @typedef {import(\"estree\").ArrayPattern} ArrayPattern */\n/** @typedef {import(\"estree\").AwaitExpression} AwaitExpression */\n/** @typedef {import(\"estree\").ThisExpression} ThisExpression */\n/** @typedef {import(\"estree\").RestElement} RestElement */\n/** @typedef {import(\"estree\").ObjectPattern} ObjectPattern */\n/** @typedef {import(\"estree\").SwitchCase} SwitchCase */\n/** @typedef {import(\"estree\").CatchClause} CatchClause */\n/** @typedef {import(\"estree\").VariableDeclarator} VariableDeclarator */\n/** @typedef {import(\"estree\").ForInStatement} ForInStatement */\n/** @typedef {import(\"estree\").ForOfStatement} ForOfStatement */\n/** @typedef {import(\"estree\").ReturnStatement} ReturnStatement */\n/** @typedef {import(\"estree\").WithStatement} WithStatement */\n/** @typedef {import(\"estree\").ThrowStatement} ThrowStatement */\n/** @typedef {import(\"estree\").MethodDefinition} MethodDefinition */\n/** @typedef {import(\"estree\").ModuleDeclaration} ModuleDeclaration */\n/** @typedef {import(\"estree\").NewExpression} NewExpression */\n/** @typedef {import(\"estree\").SpreadElement} SpreadElement */\n/** @typedef {import(\"estree\").FunctionExpression} FunctionExpression */\n/** @typedef {import(\"estree\").WhileStatement} WhileStatement */\n/** @typedef {import(\"estree\").ArrowFunctionExpression} ArrowFunctionExpression */\n/** @typedef {import(\"estree\").ExpressionStatement} ExpressionStatement */\n/** @typedef {import(\"estree\").FunctionDeclaration} FunctionDeclaration */\n/** @typedef {import(\"estree\").DoWhileStatement} DoWhileStatement */\n/** @typedef {import(\"estree\").TryStatement} TryStatement */\n/** @typedef {import(\"estree\").Node} AnyNode */\n/** @typedef {import(\"estree\").Program} Program */\n/** @typedef {import(\"estree\").Directive} Directive */\n/** @typedef {import(\"estree\").Statement} Statement */\n/** @typedef {import(\"estree\").ImportDeclaration} ImportDeclaration */\n/** @typedef {import(\"estree\").ExportDefaultDeclaration} ExportDefaultDeclaration */\n/** @typedef {import(\"estree\").ExportAllDeclaration} ExportAllDeclaration */\n/** @typedef {import(\"estree\").Super} Super */\n/** @typedef {import(\"estree\").TaggedTemplateExpression} TaggedTemplateExpression */\n/** @typedef {import(\"estree\").TemplateLiteral} TemplateLiteral */\n/** @typedef {import(\"estree\").AssignmentProperty} AssignmentProperty */\n/** @typedef {Record<string, any>} Attributes */\n/**\n * @template T\n * @typedef {import(\"tapable\").AsArray<T>} AsArray<T>\n */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n/** @typedef {{declaredScope: ScopeInfo, freeName: string | true, tagInfo: TagInfo | undefined}} VariableInfoInterface */\n/** @typedef {{ name: string | VariableInfo, rootInfo: string | VariableInfo, getMembers: () => string[], getMembersOptionals: () => boolean[], getMemberRanges: () => Range[] }} GetInfoResult */\n/** @typedef {Statement | ModuleDeclaration | Expression} StatementPathItem */\n/** @typedef {TODO} OnIdent */\n\n/** @type {string[]} */\nconst EMPTY_ARRAY = [];\nconst ALLOWED_MEMBER_TYPES_CALL_EXPRESSION = 0b01;\nconst ALLOWED_MEMBER_TYPES_EXPRESSION = 0b10;\nconst ALLOWED_MEMBER_TYPES_ALL = 0b11;\n\n// Syntax: https://developer.mozilla.org/en/SpiderMonkey/Parser_API\n\nconst parser = AcornParser.extend(importAssertions);\nclass VariableInfo {\n  /**\n   * @param {ScopeInfo} declaredScope scope in which the variable is declared\n   * @param {string | true | undefined} freeName which free name the variable aliases, or true when none\n   * @param {TagInfo | undefined} tagInfo info about tags\n   */\n  constructor(declaredScope, freeName, tagInfo) {\n    this.declaredScope = declaredScope;\n    this.freeName = freeName;\n    this.tagInfo = tagInfo;\n  }\n}\n\n/** @typedef {string | ScopeInfo | VariableInfo} ExportedVariableInfo */\n/** @typedef {Literal | string | null | undefined} ImportSource */\n/** @typedef {Omit<AcornOptions, \"sourceType\" | \"ecmaVersion\"> & { sourceType: \"module\" | \"script\" | \"auto\", ecmaVersion?: AcornOptions[\"ecmaVersion\"] }} ParseOptions */\n\n/**\n * @typedef {Object} TagInfo\n * @property {any} tag\n * @property {any} data\n * @property {TagInfo | undefined} next\n */\n\n/**\n * @typedef {Object} ScopeInfo\n * @property {StackedMap<string, VariableInfo | ScopeInfo>} definitions\n * @property {boolean | \"arrow\"} topLevelScope\n * @property {boolean | string} inShorthand\n * @property {boolean} inTaggedTemplateTag\n * @property {boolean} inTry\n * @property {boolean} isStrict\n * @property {boolean} isAsmJs\n */\n\n/** @typedef {[number, number]} Range */\n\n/**\n * Helper function for joining two ranges into a single range. This is useful\n * when working with AST nodes, as it allows you to combine the ranges of child nodes\n * to create the range of the _parent node_.\n *\n * @param {[number, number]} startRange start range to join\n * @param {[number, number]} endRange end range to join\n * @returns {[number, number]} joined range\n *\n * @example\n * ```js\n * \tconst startRange = [0, 5];\n * \tconst endRange = [10, 15];\n * \tconst joinedRange = joinRanges(startRange, endRange);\n * \tconsole.log(joinedRange); // [0, 15]\n * ```\n *\n */\nconst joinRanges = (startRange, endRange) => {\n  if (!endRange) return startRange;\n  if (!startRange) return endRange;\n  return [startRange[0], endRange[1]];\n};\n\n/**\n * Helper function used to generate a string representation of a\n * [member expression](https://github.com/estree/estree/blob/master/es5.md#memberexpression).\n *\n * @param {string} object object to name\n * @param {string[]} membersReversed reversed list of members\n * @returns {string} member expression as a string\n * @example\n * ```js\n * const membersReversed = [\"property1\", \"property2\", \"property3\"]; // Members parsed from the AST\n * const name = objectAndMembersToName(\"myObject\", membersReversed);\n *\n * console.log(name); // \"myObject.property1.property2.property3\"\n * ```\n *\n */\nconst objectAndMembersToName = (object, membersReversed) => {\n  let name = object;\n  for (let i = membersReversed.length - 1; i >= 0; i--) {\n    name = name + \".\" + membersReversed[i];\n  }\n  return name;\n};\n\n/**\n * Grabs the name of a given expression and returns it as a string or undefined. Has particular\n * handling for [Identifiers](https://github.com/estree/estree/blob/master/es5.md#identifier),\n * [ThisExpressions](https://github.com/estree/estree/blob/master/es5.md#identifier), and\n * [MetaProperties](https://github.com/estree/estree/blob/master/es2015.md#metaproperty) which is\n * specifically for handling the `new.target` meta property.\n *\n * @param {Expression | Super} expression expression\n * @returns {string | \"this\" | undefined} name or variable info\n */\nconst getRootName = expression => {\n  switch (expression.type) {\n    case \"Identifier\":\n      return expression.name;\n    case \"ThisExpression\":\n      return \"this\";\n    case \"MetaProperty\":\n      return `${expression.meta.name}.${expression.property.name}`;\n    default:\n      return undefined;\n  }\n};\n\n/** @type {AcornOptions} */\nconst defaultParserOptions = {\n  ranges: true,\n  locations: true,\n  ecmaVersion: \"latest\",\n  sourceType: \"module\",\n  // https://github.com/tc39/proposal-hashbang\n  allowHashBang: true,\n  onComment: null\n};\n\n// regexp to match at least one \"magic comment\"\nconst webpackCommentRegExp = new RegExp(/(^|\\W)webpack[A-Z]{1,}[A-Za-z]{1,}:/);\nconst EMPTY_COMMENT_OPTIONS = {\n  options: null,\n  errors: null\n};\nclass JavascriptParser extends Parser {\n  /**\n   * @param {\"module\" | \"script\" | \"auto\"} sourceType default source type\n   */\n  constructor(sourceType = \"auto\") {\n    super();\n    this.hooks = Object.freeze({\n      /** @type {HookMap<SyncBailHook<[UnaryExpression], BasicEvaluatedExpression | undefined | null>>} */\n      evaluateTypeof: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {HookMap<SyncBailHook<[Expression], BasicEvaluatedExpression | undefined | null>>} */\n      evaluate: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {HookMap<SyncBailHook<[Identifier | ThisExpression | MemberExpression | MetaProperty], BasicEvaluatedExpression | undefined | null>>} */\n      evaluateIdentifier: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {HookMap<SyncBailHook<[Identifier | ThisExpression | MemberExpression], BasicEvaluatedExpression | undefined | null>>} */\n      evaluateDefinedIdentifier: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {HookMap<SyncBailHook<[NewExpression], BasicEvaluatedExpression | undefined | null>>} */\n      evaluateNewExpression: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {HookMap<SyncBailHook<[CallExpression], BasicEvaluatedExpression | undefined | null>>} */\n      evaluateCallExpression: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {HookMap<SyncBailHook<[CallExpression, BasicEvaluatedExpression], BasicEvaluatedExpression | undefined | null>>} */\n      evaluateCallExpressionMember: new HookMap(() => new SyncBailHook([\"expression\", \"param\"])),\n      /** @type {HookMap<SyncBailHook<[Expression | Declaration | PrivateIdentifier, number], boolean | void>>} */\n      isPure: new HookMap(() => new SyncBailHook([\"expression\", \"commentsStartPosition\"])),\n      /** @type {SyncBailHook<[Statement | ModuleDeclaration], boolean | void>} */\n      preStatement: new SyncBailHook([\"statement\"]),\n      /** @type {SyncBailHook<[Statement | ModuleDeclaration], boolean | void>} */\n      blockPreStatement: new SyncBailHook([\"declaration\"]),\n      /** @type {SyncBailHook<[Statement | ModuleDeclaration], boolean | void>} */\n      statement: new SyncBailHook([\"statement\"]),\n      /** @type {SyncBailHook<[IfStatement], boolean | void>} */\n      statementIf: new SyncBailHook([\"statement\"]),\n      /** @type {SyncBailHook<[Expression, ClassExpression | ClassDeclaration], boolean | void>} */\n      classExtendsExpression: new SyncBailHook([\"expression\", \"classDefinition\"]),\n      /** @type {SyncBailHook<[MethodDefinition | PropertyDefinition | StaticBlock, ClassExpression | ClassDeclaration], boolean | void>} */\n      classBodyElement: new SyncBailHook([\"element\", \"classDefinition\"]),\n      /** @type {SyncBailHook<[Expression, MethodDefinition | PropertyDefinition, ClassExpression | ClassDeclaration], boolean | void>} */\n      classBodyValue: new SyncBailHook([\"expression\", \"element\", \"classDefinition\"]),\n      /** @type {HookMap<SyncBailHook<[LabeledStatement], boolean | void>>} */\n      label: new HookMap(() => new SyncBailHook([\"statement\"])),\n      /** @type {SyncBailHook<[ImportDeclaration, ImportSource], boolean | void>} */\n      import: new SyncBailHook([\"statement\", \"source\"]),\n      /** @type {SyncBailHook<[ImportDeclaration, ImportSource, string, string], boolean | void>} */\n      importSpecifier: new SyncBailHook([\"statement\", \"source\", \"exportName\", \"identifierName\"]),\n      /** @type {SyncBailHook<[ExportDefaultDeclaration | ExportNamedDeclaration], boolean | void>} */\n      export: new SyncBailHook([\"statement\"]),\n      /** @type {SyncBailHook<[ExportNamedDeclaration | ExportAllDeclaration, ImportSource], boolean | void>} */\n      exportImport: new SyncBailHook([\"statement\", \"source\"]),\n      /** @type {SyncBailHook<[ExportDefaultDeclaration | ExportNamedDeclaration | ExportAllDeclaration, Declaration], boolean | void>} */\n      exportDeclaration: new SyncBailHook([\"statement\", \"declaration\"]),\n      /** @type {SyncBailHook<[ExportDefaultDeclaration, FunctionDeclaration | ClassDeclaration], boolean | void>} */\n      exportExpression: new SyncBailHook([\"statement\", \"declaration\"]),\n      /** @type {SyncBailHook<[ExportDefaultDeclaration | ExportNamedDeclaration | ExportAllDeclaration, string, string, number | undefined], boolean | void>} */\n      exportSpecifier: new SyncBailHook([\"statement\", \"identifierName\", \"exportName\", \"index\"]),\n      /** @type {SyncBailHook<[ExportNamedDeclaration | ExportAllDeclaration, ImportSource, string, string, number | undefined], boolean | void>} */\n      exportImportSpecifier: new SyncBailHook([\"statement\", \"source\", \"identifierName\", \"exportName\", \"index\"]),\n      /** @type {SyncBailHook<[VariableDeclarator, Statement], boolean | void>} */\n      preDeclarator: new SyncBailHook([\"declarator\", \"statement\"]),\n      /** @type {SyncBailHook<[VariableDeclarator, Statement], boolean | void>} */\n      declarator: new SyncBailHook([\"declarator\", \"statement\"]),\n      /** @type {HookMap<SyncBailHook<[Declaration], boolean | void>>} */\n      varDeclaration: new HookMap(() => new SyncBailHook([\"declaration\"])),\n      /** @type {HookMap<SyncBailHook<[Declaration], boolean | void>>} */\n      varDeclarationLet: new HookMap(() => new SyncBailHook([\"declaration\"])),\n      /** @type {HookMap<SyncBailHook<[Declaration], boolean | void>>} */\n      varDeclarationConst: new HookMap(() => new SyncBailHook([\"declaration\"])),\n      /** @type {HookMap<SyncBailHook<[Declaration], boolean | void>>} */\n      varDeclarationVar: new HookMap(() => new SyncBailHook([\"declaration\"])),\n      /** @type {HookMap<SyncBailHook<[Identifier], boolean | void>>} */\n      pattern: new HookMap(() => new SyncBailHook([\"pattern\"])),\n      /** @type {HookMap<SyncBailHook<[Expression], boolean | void>>} */\n      canRename: new HookMap(() => new SyncBailHook([\"initExpression\"])),\n      /** @type {HookMap<SyncBailHook<[Expression], boolean | void>>} */\n      rename: new HookMap(() => new SyncBailHook([\"initExpression\"])),\n      /** @type {HookMap<SyncBailHook<[AssignmentExpression], boolean | void>>} */\n      assign: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {HookMap<SyncBailHook<[AssignmentExpression, string[]], boolean | void>>} */\n      assignMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"members\"])),\n      /** @type {HookMap<SyncBailHook<[Expression], boolean | void>>} */\n      typeof: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {SyncBailHook<[ImportExpression], boolean | void>} */\n      importCall: new SyncBailHook([\"expression\"]),\n      /** @type {SyncBailHook<[Expression | ForOfStatement], boolean | void>} */\n      topLevelAwait: new SyncBailHook([\"expression\"]),\n      /** @type {HookMap<SyncBailHook<[CallExpression], boolean | void>>} */\n      call: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** Something like \"a.b()\" */\n      /** @type {HookMap<SyncBailHook<[CallExpression, string[], boolean[], Range[]], boolean | void>>} */\n      callMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"members\", \"membersOptionals\", \"memberRanges\"])),\n      /** Something like \"a.b().c.d\" */\n      /** @type {HookMap<SyncBailHook<[Expression, string[], CallExpression, string[], Range[]], boolean | void>>} */\n      memberChainOfCallMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"calleeMembers\", \"callExpression\", \"members\", \"memberRanges\"])),\n      /** Something like \"a.b().c.d()\"\" */\n      /** @type {HookMap<SyncBailHook<[CallExpression, string[], CallExpression, string[], Range[]], boolean | void>>} */\n      callMemberChainOfCallMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"calleeMembers\", \"innerCallExpression\", \"members\", \"memberRanges\"])),\n      /** @type {SyncBailHook<[ChainExpression], boolean | void>} */\n      optionalChaining: new SyncBailHook([\"optionalChaining\"]),\n      /** @type {HookMap<SyncBailHook<[NewExpression], boolean | void>>} */\n      new: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {SyncBailHook<[BinaryExpression], boolean | void>} */\n      binaryExpression: new SyncBailHook([\"binaryExpression\"]),\n      /** @type {HookMap<SyncBailHook<[Expression], boolean | void>>} */\n      expression: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {HookMap<SyncBailHook<[MemberExpression, string[], boolean[], Range[]], boolean | void>>} */\n      expressionMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"members\", \"membersOptionals\", \"memberRanges\"])),\n      /** @type {HookMap<SyncBailHook<[MemberExpression, string[]], boolean | void>>} */\n      unhandledExpressionMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"members\"])),\n      /** @type {SyncBailHook<[ConditionalExpression], boolean | void>} */\n      expressionConditionalOperator: new SyncBailHook([\"expression\"]),\n      /** @type {SyncBailHook<[LogicalExpression], boolean | void>} */\n      expressionLogicalOperator: new SyncBailHook([\"expression\"]),\n      /** @type {SyncBailHook<[Program, Comment[]], boolean | void>} */\n      program: new SyncBailHook([\"ast\", \"comments\"]),\n      /** @type {SyncBailHook<[Program, Comment[]], boolean | void>} */\n      finish: new SyncBailHook([\"ast\", \"comments\"])\n    });\n    this.sourceType = sourceType;\n    /** @type {ScopeInfo} */\n    this.scope = undefined;\n    /** @type {ParserState} */\n    this.state = undefined;\n    /** @type {Comment[] | undefined} */\n    this.comments = undefined;\n    /** @type {Set<number> | undefined} */\n    this.semicolons = undefined;\n    /** @type {StatementPathItem[]} */\n    this.statementPath = undefined;\n    /** @type {Statement | ModuleDeclaration | Expression | undefined} */\n    this.prevStatement = undefined;\n    /** @type {WeakMap<Expression, Set<string>> | undefined} */\n    this.destructuringAssignmentProperties = undefined;\n    this.currentTagData = undefined;\n    this.magicCommentContext = vm.createContext(undefined, {\n      name: \"Webpack Magic Comment Parser\",\n      codeGeneration: {\n        strings: false,\n        wasm: false\n      }\n    });\n    this._initializeEvaluating();\n  }\n  _initializeEvaluating() {\n    this.hooks.evaluate.for(\"Literal\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {Literal} */_expr;\n      switch (typeof expr.value) {\n        case \"number\":\n          return new BasicEvaluatedExpression().setNumber(expr.value).setRange( /** @type {Range} */expr.range);\n        case \"bigint\":\n          return new BasicEvaluatedExpression().setBigInt(expr.value).setRange( /** @type {Range} */expr.range);\n        case \"string\":\n          return new BasicEvaluatedExpression().setString(expr.value).setRange( /** @type {Range} */expr.range);\n        case \"boolean\":\n          return new BasicEvaluatedExpression().setBoolean(expr.value).setRange( /** @type {Range} */expr.range);\n      }\n      if (expr.value === null) {\n        return new BasicEvaluatedExpression().setNull().setRange( /** @type {Range} */expr.range);\n      }\n      if (expr.value instanceof RegExp) {\n        return new BasicEvaluatedExpression().setRegExp(expr.value).setRange( /** @type {Range} */expr.range);\n      }\n    });\n    this.hooks.evaluate.for(\"NewExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {NewExpression} */_expr;\n      const callee = expr.callee;\n      if (callee.type !== \"Identifier\") return;\n      if (callee.name !== \"RegExp\") {\n        return this.callHooksForName(this.hooks.evaluateNewExpression, callee.name, expr);\n      } else if (expr.arguments.length > 2 || this.getVariableInfo(\"RegExp\") !== \"RegExp\") return;\n      let regExp, flags;\n      const arg1 = expr.arguments[0];\n      if (arg1) {\n        if (arg1.type === \"SpreadElement\") return;\n        const evaluatedRegExp = this.evaluateExpression(arg1);\n        if (!evaluatedRegExp) return;\n        regExp = evaluatedRegExp.asString();\n        if (!regExp) return;\n      } else {\n        return new BasicEvaluatedExpression().setRegExp(new RegExp(\"\")).setRange( /** @type {Range} */expr.range);\n      }\n      const arg2 = expr.arguments[1];\n      if (arg2) {\n        if (arg2.type === \"SpreadElement\") return;\n        const evaluatedFlags = this.evaluateExpression(arg2);\n        if (!evaluatedFlags) return;\n        if (!evaluatedFlags.isUndefined()) {\n          flags = evaluatedFlags.asString();\n          if (flags === undefined || !BasicEvaluatedExpression.isValidRegExpFlags(flags)) return;\n        }\n      }\n      return new BasicEvaluatedExpression().setRegExp(flags ? new RegExp(regExp, flags) : new RegExp(regExp)).setRange( /** @type {Range} */expr.range);\n    });\n    this.hooks.evaluate.for(\"LogicalExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {LogicalExpression} */_expr;\n      const left = this.evaluateExpression(expr.left);\n      let returnRight = false;\n      /** @type {boolean|undefined} */\n      let allowedRight;\n      if (expr.operator === \"&&\") {\n        const leftAsBool = left.asBool();\n        if (leftAsBool === false) return left.setRange( /** @type {Range} */expr.range);\n        returnRight = leftAsBool === true;\n        allowedRight = false;\n      } else if (expr.operator === \"||\") {\n        const leftAsBool = left.asBool();\n        if (leftAsBool === true) return left.setRange( /** @type {Range} */expr.range);\n        returnRight = leftAsBool === false;\n        allowedRight = true;\n      } else if (expr.operator === \"??\") {\n        const leftAsNullish = left.asNullish();\n        if (leftAsNullish === false) return left.setRange( /** @type {Range} */expr.range);\n        if (leftAsNullish !== true) return;\n        returnRight = true;\n      } else return;\n      const right = this.evaluateExpression(expr.right);\n      if (returnRight) {\n        if (left.couldHaveSideEffects()) right.setSideEffects();\n        return right.setRange( /** @type {Range} */expr.range);\n      }\n      const asBool = right.asBool();\n      if (allowedRight === true && asBool === true) {\n        return new BasicEvaluatedExpression().setRange( /** @type {Range} */expr.range).setTruthy();\n      } else if (allowedRight === false && asBool === false) {\n        return new BasicEvaluatedExpression().setRange( /** @type {Range} */expr.range).setFalsy();\n      }\n    });\n\n    /**\n     * In simple logical cases, we can use valueAsExpression to assist us in evaluating the expression on\n     * either side of a [BinaryExpression](https://github.com/estree/estree/blob/master/es5.md#binaryexpression).\n     * This supports scenarios in webpack like conditionally `import()`'ing modules based on some simple evaluation:\n     *\n     * ```js\n     * if (1 === 3) {\n     *  import(\"./moduleA\"); // webpack will auto evaluate this and not import the modules\n     * }\n     * ```\n     *\n     * Additional scenarios include evaluation of strings inside of dynamic import statements:\n     *\n     * ```js\n     * const foo = \"foo\";\n     * const bar = \"bar\";\n     *\n     * import(\"./\" + foo + bar); // webpack will auto evaluate this into import(\"./foobar\")\n     * ```\n     * @param {boolean | number | BigInt | string} value the value to convert to an expression\n     * @param {BinaryExpression | UnaryExpression} expr the expression being evaluated\n     * @param {boolean} sideEffects whether the expression has side effects\n     * @returns {BasicEvaluatedExpression | undefined} the evaluated expression\n     * @example\n     *\n     * ```js\n     * const binaryExpr = new BinaryExpression(\"+\",\n     * \t{ type: \"Literal\", value: 2 },\n     * \t{ type: \"Literal\", value: 3 }\n     * );\n     *\n     * const leftValue = 2;\n     * const rightValue = 3;\n     *\n     * const leftExpr = valueAsExpression(leftValue, binaryExpr.left, false);\n     * const rightExpr = valueAsExpression(rightValue, binaryExpr.right, false);\n     * const result = new BasicEvaluatedExpression()\n     * \t.setNumber(leftExpr.number + rightExpr.number)\n     * \t.setRange(binaryExpr.range);\n     *\n     * console.log(result.number); // Output: 5\n     * ```\n     */\n    const valueAsExpression = (value, expr, sideEffects) => {\n      switch (typeof value) {\n        case \"boolean\":\n          return new BasicEvaluatedExpression().setBoolean(value).setSideEffects(sideEffects).setRange( /** @type {Range} */expr.range);\n        case \"number\":\n          return new BasicEvaluatedExpression().setNumber(value).setSideEffects(sideEffects).setRange( /** @type {Range} */expr.range);\n        case \"bigint\":\n          return new BasicEvaluatedExpression().setBigInt(value).setSideEffects(sideEffects).setRange( /** @type {Range} */expr.range);\n        case \"string\":\n          return new BasicEvaluatedExpression().setString(value).setSideEffects(sideEffects).setRange( /** @type {Range} */expr.range);\n      }\n    };\n    this.hooks.evaluate.for(\"BinaryExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {BinaryExpression} */_expr;\n\n      /**\n       * Evaluates a binary expression if and only if it is a const operation (e.g. 1 + 2, \"a\" + \"b\", etc.).\n       *\n       * @template T\n       * @param {(leftOperand: T, rightOperand: T) => boolean | number | BigInt | string} operandHandler the handler for the operation (e.g. (a, b) => a + b)\n       * @returns {BasicEvaluatedExpression | undefined} the evaluated expression\n       */\n      const handleConstOperation = operandHandler => {\n        const left = this.evaluateExpression(expr.left);\n        if (!left.isCompileTimeValue()) return;\n        const right = this.evaluateExpression(expr.right);\n        if (!right.isCompileTimeValue()) return;\n        const result = operandHandler(left.asCompileTimeValue(), right.asCompileTimeValue());\n        return valueAsExpression(result, expr, left.couldHaveSideEffects() || right.couldHaveSideEffects());\n      };\n\n      /**\n       * Helper function to determine if two booleans are always different. This is used in `handleStrictEqualityComparison`\n       * to determine if an expressions boolean or nullish conversion is equal or not.\n       *\n       * @param {boolean} a first boolean to compare\n       * @param {boolean} b second boolean to compare\n       * @returns {boolean} true if the two booleans are always different, false otherwise\n       */\n      const isAlwaysDifferent = (a, b) => a === true && b === false || a === false && b === true;\n\n      /**\n       * @param {BasicEvaluatedExpression} left left\n       * @param {BasicEvaluatedExpression} right right\n       * @param {BasicEvaluatedExpression} res res\n       * @param {boolean} eql true for \"===\" and false for \"!==\"\n       * @returns {BasicEvaluatedExpression | undefined} result\n       */\n      const handleTemplateStringCompare = (left, right, res, eql) => {\n        /**\n         * @param {BasicEvaluatedExpression[]} parts parts\n         * @returns {string} value\n         */\n        const getPrefix = parts => {\n          let value = \"\";\n          for (const p of parts) {\n            const v = p.asString();\n            if (v !== undefined) value += v;else break;\n          }\n          return value;\n        };\n        /**\n         * @param {BasicEvaluatedExpression[]} parts parts\n         * @returns {string} value\n         */\n        const getSuffix = parts => {\n          let value = \"\";\n          for (let i = parts.length - 1; i >= 0; i--) {\n            const v = parts[i].asString();\n            if (v !== undefined) value = v + value;else break;\n          }\n          return value;\n        };\n        const leftPrefix = getPrefix( /** @type {BasicEvaluatedExpression[]} */left.parts);\n        const rightPrefix = getPrefix( /** @type {BasicEvaluatedExpression[]} */right.parts);\n        const leftSuffix = getSuffix( /** @type {BasicEvaluatedExpression[]} */left.parts);\n        const rightSuffix = getSuffix( /** @type {BasicEvaluatedExpression[]} */right.parts);\n        const lenPrefix = Math.min(leftPrefix.length, rightPrefix.length);\n        const lenSuffix = Math.min(leftSuffix.length, rightSuffix.length);\n        const prefixMismatch = lenPrefix > 0 && leftPrefix.slice(0, lenPrefix) !== rightPrefix.slice(0, lenPrefix);\n        const suffixMismatch = lenSuffix > 0 && leftSuffix.slice(-lenSuffix) !== rightSuffix.slice(-lenSuffix);\n        if (prefixMismatch || suffixMismatch) {\n          return res.setBoolean(!eql).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n      };\n\n      /**\n       * Helper function to handle BinaryExpressions using strict equality comparisons (e.g. \"===\" and \"!==\").\n       * @param {boolean} eql true for \"===\" and false for \"!==\"\n       * @returns {BasicEvaluatedExpression | undefined} the evaluated expression\n       */\n      const handleStrictEqualityComparison = eql => {\n        const left = this.evaluateExpression(expr.left);\n        const right = this.evaluateExpression(expr.right);\n        const res = new BasicEvaluatedExpression();\n        res.setRange( /** @type {Range} */expr.range);\n        const leftConst = left.isCompileTimeValue();\n        const rightConst = right.isCompileTimeValue();\n        if (leftConst && rightConst) {\n          return res.setBoolean(eql === (left.asCompileTimeValue() === right.asCompileTimeValue())).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n        if (left.isArray() && right.isArray()) {\n          return res.setBoolean(!eql).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n        if (left.isTemplateString() && right.isTemplateString()) {\n          return handleTemplateStringCompare(left, right, res, eql);\n        }\n        const leftPrimitive = left.isPrimitiveType();\n        const rightPrimitive = right.isPrimitiveType();\n        if (\n        // Primitive !== Object or\n        // compile-time object types are never equal to something at runtime\n        leftPrimitive === false && (leftConst || rightPrimitive === true) || rightPrimitive === false && (rightConst || leftPrimitive === true) ||\n        // Different nullish or boolish status also means not equal\n        isAlwaysDifferent( /** @type {boolean} */left.asBool(), /** @type {boolean} */right.asBool()) || isAlwaysDifferent( /** @type {boolean} */left.asNullish(), /** @type {boolean} */right.asNullish())) {\n          return res.setBoolean(!eql).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n      };\n\n      /**\n       * Helper function to handle BinaryExpressions using abstract equality comparisons (e.g. \"==\" and \"!=\").\n       * @param {boolean} eql true for \"==\" and false for \"!=\"\n       * @returns {BasicEvaluatedExpression | undefined} the evaluated expression\n       */\n      const handleAbstractEqualityComparison = eql => {\n        const left = this.evaluateExpression(expr.left);\n        const right = this.evaluateExpression(expr.right);\n        const res = new BasicEvaluatedExpression();\n        res.setRange( /** @type {Range} */expr.range);\n        const leftConst = left.isCompileTimeValue();\n        const rightConst = right.isCompileTimeValue();\n        if (leftConst && rightConst) {\n          return res.setBoolean(eql === (\n          // eslint-disable-next-line eqeqeq\n          left.asCompileTimeValue() == right.asCompileTimeValue())).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n        if (left.isArray() && right.isArray()) {\n          return res.setBoolean(!eql).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n        if (left.isTemplateString() && right.isTemplateString()) {\n          return handleTemplateStringCompare(left, right, res, eql);\n        }\n      };\n      if (expr.operator === \"+\") {\n        const left = this.evaluateExpression(expr.left);\n        const right = this.evaluateExpression(expr.right);\n        const res = new BasicEvaluatedExpression();\n        if (left.isString()) {\n          if (right.isString()) {\n            res.setString( /** @type {string} */left.string + ( /** @type {string} */right.string));\n          } else if (right.isNumber()) {\n            res.setString( /** @type {string} */left.string + right.number);\n          } else if (right.isWrapped() && right.prefix && right.prefix.isString()) {\n            // \"left\" + (\"prefix\" + inner + \"postfix\")\n            // => (\"leftPrefix\" + inner + \"postfix\")\n            res.setWrapped(new BasicEvaluatedExpression().setString( /** @type {string} */left.string + ( /** @type {string} */right.prefix.string)).setRange(joinRanges( /** @type {Range} */left.range, /** @type {Range} */right.prefix.range)), right.postfix, right.wrappedInnerExpressions);\n          } else if (right.isWrapped()) {\n            // \"left\" + ([null] + inner + \"postfix\")\n            // => (\"left\" + inner + \"postfix\")\n            res.setWrapped(left, right.postfix, right.wrappedInnerExpressions);\n          } else {\n            // \"left\" + expr\n            // => (\"left\" + expr + \"\")\n            res.setWrapped(left, null, [right]);\n          }\n        } else if (left.isNumber()) {\n          if (right.isString()) {\n            res.setString(left.number + ( /** @type {string} */right.string));\n          } else if (right.isNumber()) {\n            res.setNumber( /** @type {number} */left.number + ( /** @type {number} */right.number));\n          } else {\n            return;\n          }\n        } else if (left.isBigInt()) {\n          if (right.isBigInt()) {\n            res.setBigInt( /** @type {bigint} */left.bigint + ( /** @type {bigint} */right.bigint));\n          }\n        } else if (left.isWrapped()) {\n          if (left.postfix && left.postfix.isString() && right.isString()) {\n            // (\"prefix\" + inner + \"postfix\") + \"right\"\n            // => (\"prefix\" + inner + \"postfixRight\")\n            res.setWrapped(left.prefix, new BasicEvaluatedExpression().setString( /** @type {string} */left.postfix.string + ( /** @type {string} */right.string)).setRange(joinRanges( /** @type {Range} */left.postfix.range, /** @type {Range} */right.range)), left.wrappedInnerExpressions);\n          } else if (left.postfix && left.postfix.isString() && right.isNumber()) {\n            // (\"prefix\" + inner + \"postfix\") + 123\n            // => (\"prefix\" + inner + \"postfix123\")\n            res.setWrapped(left.prefix, new BasicEvaluatedExpression().setString( /** @type {string} */left.postfix.string + ( /** @type {number} */right.number)).setRange(joinRanges( /** @type {Range} */left.postfix.range, /** @type {Range} */right.range)), left.wrappedInnerExpressions);\n          } else if (right.isString()) {\n            // (\"prefix\" + inner + [null]) + \"right\"\n            // => (\"prefix\" + inner + \"right\")\n            res.setWrapped(left.prefix, right, left.wrappedInnerExpressions);\n          } else if (right.isNumber()) {\n            // (\"prefix\" + inner + [null]) + 123\n            // => (\"prefix\" + inner + \"123\")\n            res.setWrapped(left.prefix, new BasicEvaluatedExpression().setString(right.number + \"\").setRange( /** @type {Range} */right.range), left.wrappedInnerExpressions);\n          } else if (right.isWrapped()) {\n            // (\"prefix1\" + inner1 + \"postfix1\") + (\"prefix2\" + inner2 + \"postfix2\")\n            // (\"prefix1\" + inner1 + \"postfix1\" + \"prefix2\" + inner2 + \"postfix2\")\n            res.setWrapped(left.prefix, right.postfix, left.wrappedInnerExpressions && right.wrappedInnerExpressions && left.wrappedInnerExpressions.concat(left.postfix ? [left.postfix] : []).concat(right.prefix ? [right.prefix] : []).concat(right.wrappedInnerExpressions));\n          } else {\n            // (\"prefix\" + inner + postfix) + expr\n            // => (\"prefix\" + inner + postfix + expr + [null])\n            res.setWrapped(left.prefix, null, left.wrappedInnerExpressions && left.wrappedInnerExpressions.concat(left.postfix ? [left.postfix, right] : [right]));\n          }\n        } else {\n          if (right.isString()) {\n            // left + \"right\"\n            // => ([null] + left + \"right\")\n            res.setWrapped(null, right, [left]);\n          } else if (right.isWrapped()) {\n            // left + (prefix + inner + \"postfix\")\n            // => ([null] + left + prefix + inner + \"postfix\")\n            res.setWrapped(null, right.postfix, right.wrappedInnerExpressions && (right.prefix ? [left, right.prefix] : [left]).concat(right.wrappedInnerExpressions));\n          } else {\n            return;\n          }\n        }\n        if (left.couldHaveSideEffects() || right.couldHaveSideEffects()) res.setSideEffects();\n        res.setRange( /** @type {Range} */expr.range);\n        return res;\n      } else if (expr.operator === \"-\") {\n        return handleConstOperation((l, r) => l - r);\n      } else if (expr.operator === \"*\") {\n        return handleConstOperation((l, r) => l * r);\n      } else if (expr.operator === \"/\") {\n        return handleConstOperation((l, r) => l / r);\n      } else if (expr.operator === \"**\") {\n        return handleConstOperation((l, r) => l ** r);\n      } else if (expr.operator === \"===\") {\n        return handleStrictEqualityComparison(true);\n      } else if (expr.operator === \"==\") {\n        return handleAbstractEqualityComparison(true);\n      } else if (expr.operator === \"!==\") {\n        return handleStrictEqualityComparison(false);\n      } else if (expr.operator === \"!=\") {\n        return handleAbstractEqualityComparison(false);\n      } else if (expr.operator === \"&\") {\n        return handleConstOperation((l, r) => l & r);\n      } else if (expr.operator === \"|\") {\n        return handleConstOperation((l, r) => l | r);\n      } else if (expr.operator === \"^\") {\n        return handleConstOperation((l, r) => l ^ r);\n      } else if (expr.operator === \">>>\") {\n        return handleConstOperation((l, r) => l >>> r);\n      } else if (expr.operator === \">>\") {\n        return handleConstOperation((l, r) => l >> r);\n      } else if (expr.operator === \"<<\") {\n        return handleConstOperation((l, r) => l << r);\n      } else if (expr.operator === \"<\") {\n        return handleConstOperation((l, r) => l < r);\n      } else if (expr.operator === \">\") {\n        return handleConstOperation((l, r) => l > r);\n      } else if (expr.operator === \"<=\") {\n        return handleConstOperation((l, r) => l <= r);\n      } else if (expr.operator === \">=\") {\n        return handleConstOperation((l, r) => l >= r);\n      }\n    });\n    this.hooks.evaluate.for(\"UnaryExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {UnaryExpression} */_expr;\n\n      /**\n       * Evaluates a UnaryExpression if and only if it is a basic const operator (e.g. +a, -a, ~a).\n       *\n       * @template T\n       * @param {(operand: T) => boolean | number | BigInt | string} operandHandler handler for the operand\n       * @returns {BasicEvaluatedExpression | undefined} evaluated expression\n       */\n      const handleConstOperation = operandHandler => {\n        const argument = this.evaluateExpression(expr.argument);\n        if (!argument.isCompileTimeValue()) return;\n        const result = operandHandler(argument.asCompileTimeValue());\n        return valueAsExpression(result, expr, argument.couldHaveSideEffects());\n      };\n      if (expr.operator === \"typeof\") {\n        switch (expr.argument.type) {\n          case \"Identifier\":\n            {\n              const res = this.callHooksForName(this.hooks.evaluateTypeof, expr.argument.name, expr);\n              if (res !== undefined) return res;\n              break;\n            }\n          case \"MetaProperty\":\n            {\n              const res = this.callHooksForName(this.hooks.evaluateTypeof, getRootName(expr.argument), expr);\n              if (res !== undefined) return res;\n              break;\n            }\n          case \"MemberExpression\":\n            {\n              const res = this.callHooksForExpression(this.hooks.evaluateTypeof, expr.argument, expr);\n              if (res !== undefined) return res;\n              break;\n            }\n          case \"ChainExpression\":\n            {\n              const res = this.callHooksForExpression(this.hooks.evaluateTypeof, expr.argument.expression, expr);\n              if (res !== undefined) return res;\n              break;\n            }\n          case \"FunctionExpression\":\n            {\n              return new BasicEvaluatedExpression().setString(\"function\").setRange( /** @type {Range} */expr.range);\n            }\n        }\n        const arg = this.evaluateExpression(expr.argument);\n        if (arg.isUnknown()) return;\n        if (arg.isString()) {\n          return new BasicEvaluatedExpression().setString(\"string\").setRange( /** @type {Range} */expr.range);\n        }\n        if (arg.isWrapped()) {\n          return new BasicEvaluatedExpression().setString(\"string\").setSideEffects().setRange( /** @type {Range} */expr.range);\n        }\n        if (arg.isUndefined()) {\n          return new BasicEvaluatedExpression().setString(\"undefined\").setRange( /** @type {Range} */expr.range);\n        }\n        if (arg.isNumber()) {\n          return new BasicEvaluatedExpression().setString(\"number\").setRange( /** @type {Range} */expr.range);\n        }\n        if (arg.isBigInt()) {\n          return new BasicEvaluatedExpression().setString(\"bigint\").setRange( /** @type {Range} */expr.range);\n        }\n        if (arg.isBoolean()) {\n          return new BasicEvaluatedExpression().setString(\"boolean\").setRange( /** @type {Range} */expr.range);\n        }\n        if (arg.isConstArray() || arg.isRegExp() || arg.isNull()) {\n          return new BasicEvaluatedExpression().setString(\"object\").setRange( /** @type {Range} */expr.range);\n        }\n        if (arg.isArray()) {\n          return new BasicEvaluatedExpression().setString(\"object\").setSideEffects(arg.couldHaveSideEffects()).setRange( /** @type {Range} */expr.range);\n        }\n      } else if (expr.operator === \"!\") {\n        const argument = this.evaluateExpression(expr.argument);\n        const bool = argument.asBool();\n        if (typeof bool !== \"boolean\") return;\n        return new BasicEvaluatedExpression().setBoolean(!bool).setSideEffects(argument.couldHaveSideEffects()).setRange( /** @type {Range} */expr.range);\n      } else if (expr.operator === \"~\") {\n        return handleConstOperation(v => ~v);\n      } else if (expr.operator === \"+\") {\n        return handleConstOperation(v => +v);\n      } else if (expr.operator === \"-\") {\n        return handleConstOperation(v => -v);\n      }\n    });\n    this.hooks.evaluateTypeof.for(\"undefined\").tap(\"JavascriptParser\", expr => {\n      return new BasicEvaluatedExpression().setString(\"undefined\").setRange( /** @type {Range} */expr.range);\n    });\n    this.hooks.evaluate.for(\"Identifier\").tap(\"JavascriptParser\", expr => {\n      if ( /** @type {Identifier} */expr.name === \"undefined\") {\n        return new BasicEvaluatedExpression().setUndefined().setRange( /** @type {Range} */expr.range);\n      }\n    });\n    /**\n     * @param {string} exprType expression type name\n     * @param {function(Expression): GetInfoResult | undefined} getInfo get info\n     * @returns {void}\n     */\n    const tapEvaluateWithVariableInfo = (exprType, getInfo) => {\n      /** @type {Expression | undefined} */\n      let cachedExpression = undefined;\n      /** @type {GetInfoResult | undefined} */\n      let cachedInfo = undefined;\n      this.hooks.evaluate.for(exprType).tap(\"JavascriptParser\", expr => {\n        const expression = /** @type {MemberExpression} */expr;\n        const info = getInfo(expr);\n        if (info !== undefined) {\n          return this.callHooksForInfoWithFallback(this.hooks.evaluateIdentifier, info.name, name => {\n            cachedExpression = expression;\n            cachedInfo = info;\n          }, name => {\n            const hook = this.hooks.evaluateDefinedIdentifier.get(name);\n            if (hook !== undefined) {\n              return hook.call(expression);\n            }\n          }, expression);\n        }\n      });\n      this.hooks.evaluate.for(exprType).tap({\n        name: \"JavascriptParser\",\n        stage: 100\n      }, expr => {\n        const info = cachedExpression === expr ? cachedInfo : getInfo(expr);\n        if (info !== undefined) {\n          return new BasicEvaluatedExpression().setIdentifier(info.name, info.rootInfo, info.getMembers, info.getMembersOptionals, info.getMemberRanges).setRange( /** @type {Range} */expr.range);\n        }\n      });\n      this.hooks.finish.tap(\"JavascriptParser\", () => {\n        // Cleanup for GC\n        cachedExpression = cachedInfo = undefined;\n      });\n    };\n    tapEvaluateWithVariableInfo(\"Identifier\", expr => {\n      const info = this.getVariableInfo( /** @type {Identifier} */expr.name);\n      if (typeof info === \"string\" || info instanceof VariableInfo && typeof info.freeName === \"string\") {\n        return {\n          name: info,\n          rootInfo: info,\n          getMembers: () => [],\n          getMembersOptionals: () => [],\n          getMemberRanges: () => []\n        };\n      }\n    });\n    tapEvaluateWithVariableInfo(\"ThisExpression\", expr => {\n      const info = this.getVariableInfo(\"this\");\n      if (typeof info === \"string\" || info instanceof VariableInfo && typeof info.freeName === \"string\") {\n        return {\n          name: info,\n          rootInfo: info,\n          getMembers: () => [],\n          getMembersOptionals: () => [],\n          getMemberRanges: () => []\n        };\n      }\n    });\n    this.hooks.evaluate.for(\"MetaProperty\").tap(\"JavascriptParser\", expr => {\n      const metaProperty = /** @type {MetaProperty} */expr;\n      return this.callHooksForName(this.hooks.evaluateIdentifier, getRootName(expr), metaProperty);\n    });\n    tapEvaluateWithVariableInfo(\"MemberExpression\", expr => this.getMemberExpressionInfo( /** @type {MemberExpression} */expr, ALLOWED_MEMBER_TYPES_EXPRESSION));\n    this.hooks.evaluate.for(\"CallExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {CallExpression} */_expr;\n      if (expr.callee.type === \"MemberExpression\" && expr.callee.property.type === (expr.callee.computed ? \"Literal\" : \"Identifier\")) {\n        // type Super also possible here\n        const param = this.evaluateExpression( /** @type {Expression} */expr.callee.object);\n        const property = expr.callee.property.type === \"Literal\" ? `${expr.callee.property.value}` : expr.callee.property.name;\n        const hook = this.hooks.evaluateCallExpressionMember.get(property);\n        if (hook !== undefined) {\n          return hook.call(expr, param);\n        }\n      } else if (expr.callee.type === \"Identifier\") {\n        return this.callHooksForName(this.hooks.evaluateCallExpression, expr.callee.name, expr);\n      }\n    });\n    this.hooks.evaluateCallExpressionMember.for(\"indexOf\").tap(\"JavascriptParser\", (expr, param) => {\n      if (!param.isString()) return;\n      if (expr.arguments.length === 0) return;\n      const [arg1, arg2] = expr.arguments;\n      if (arg1.type === \"SpreadElement\") return;\n      const arg1Eval = this.evaluateExpression(arg1);\n      if (!arg1Eval.isString()) return;\n      const arg1Value = /** @type {string} */arg1Eval.string;\n      let result;\n      if (arg2) {\n        if (arg2.type === \"SpreadElement\") return;\n        const arg2Eval = this.evaluateExpression(arg2);\n        if (!arg2Eval.isNumber()) return;\n        result = /** @type {string} */param.string.indexOf(arg1Value, arg2Eval.number);\n      } else {\n        result = /** @type {string} */param.string.indexOf(arg1Value);\n      }\n      return new BasicEvaluatedExpression().setNumber(result).setSideEffects(param.couldHaveSideEffects()).setRange( /** @type {Range} */expr.range);\n    });\n    this.hooks.evaluateCallExpressionMember.for(\"replace\").tap(\"JavascriptParser\", (expr, param) => {\n      if (!param.isString()) return;\n      if (expr.arguments.length !== 2) return;\n      if (expr.arguments[0].type === \"SpreadElement\") return;\n      if (expr.arguments[1].type === \"SpreadElement\") return;\n      let arg1 = this.evaluateExpression(expr.arguments[0]);\n      let arg2 = this.evaluateExpression(expr.arguments[1]);\n      if (!arg1.isString() && !arg1.isRegExp()) return;\n      const arg1Value = /** @type {string | RegExp} */\n      arg1.regExp || arg1.string;\n      if (!arg2.isString()) return;\n      const arg2Value = /** @type {string} */arg2.string;\n      return new BasicEvaluatedExpression().setString( /** @type {string} */param.string.replace(arg1Value, arg2Value)).setSideEffects(param.couldHaveSideEffects()).setRange( /** @type {Range} */expr.range);\n    });\n    [\"substr\", \"substring\", \"slice\"].forEach(fn => {\n      this.hooks.evaluateCallExpressionMember.for(fn).tap(\"JavascriptParser\", (expr, param) => {\n        if (!param.isString()) return;\n        let arg1;\n        let result,\n          str = /** @type {string} */param.string;\n        switch (expr.arguments.length) {\n          case 1:\n            if (expr.arguments[0].type === \"SpreadElement\") return;\n            arg1 = this.evaluateExpression(expr.arguments[0]);\n            if (!arg1.isNumber()) return;\n            result = str[( /** @type {\"substr\" | \"substring\" | \"slice\"} */fn)]( /** @type {number} */arg1.number);\n            break;\n          case 2:\n            {\n              if (expr.arguments[0].type === \"SpreadElement\") return;\n              if (expr.arguments[1].type === \"SpreadElement\") return;\n              arg1 = this.evaluateExpression(expr.arguments[0]);\n              const arg2 = this.evaluateExpression(expr.arguments[1]);\n              if (!arg1.isNumber()) return;\n              if (!arg2.isNumber()) return;\n              result = str[( /** @type {\"substr\" | \"substring\" | \"slice\"} */fn)]( /** @type {number} */arg1.number, /** @type {number} */arg2.number);\n              break;\n            }\n          default:\n            return;\n        }\n        return new BasicEvaluatedExpression().setString(result).setSideEffects(param.couldHaveSideEffects()).setRange( /** @type {Range} */expr.range);\n      });\n    });\n\n    /**\n     * @param {\"cooked\" | \"raw\"} kind kind of values to get\n     * @param {TemplateLiteral} templateLiteralExpr TemplateLiteral expr\n     * @returns {{quasis: BasicEvaluatedExpression[], parts: BasicEvaluatedExpression[]}} Simplified template\n     */\n    const getSimplifiedTemplateResult = (kind, templateLiteralExpr) => {\n      /** @type {BasicEvaluatedExpression[]} */\n      const quasis = [];\n      /** @type {BasicEvaluatedExpression[]} */\n      const parts = [];\n      for (let i = 0; i < templateLiteralExpr.quasis.length; i++) {\n        const quasiExpr = templateLiteralExpr.quasis[i];\n        const quasi = quasiExpr.value[kind];\n        if (i > 0) {\n          const prevExpr = parts[parts.length - 1];\n          const expr = this.evaluateExpression(templateLiteralExpr.expressions[i - 1]);\n          const exprAsString = expr.asString();\n          if (typeof exprAsString === \"string\" && !expr.couldHaveSideEffects()) {\n            // We can merge quasi + expr + quasi when expr\n            // is a const string\n\n            prevExpr.setString(prevExpr.string + exprAsString + quasi);\n            prevExpr.setRange([/** @type {Range} */prevExpr.range[0], /** @type {Range} */quasiExpr.range[1]]);\n            // We unset the expression as it doesn't match to a single expression\n            prevExpr.setExpression(undefined);\n            continue;\n          }\n          parts.push(expr);\n        }\n        const part = new BasicEvaluatedExpression().setString( /** @type {string} */quasi).setRange( /** @type {Range} */quasiExpr.range).setExpression(quasiExpr);\n        quasis.push(part);\n        parts.push(part);\n      }\n      return {\n        quasis,\n        parts\n      };\n    };\n    this.hooks.evaluate.for(\"TemplateLiteral\").tap(\"JavascriptParser\", _node => {\n      const node = /** @type {TemplateLiteral} */_node;\n      const {\n        quasis,\n        parts\n      } = getSimplifiedTemplateResult(\"cooked\", node);\n      if (parts.length === 1) {\n        return parts[0].setRange( /** @type {Range} */node.range);\n      }\n      return new BasicEvaluatedExpression().setTemplateString(quasis, parts, \"cooked\").setRange( /** @type {Range} */node.range);\n    });\n    this.hooks.evaluate.for(\"TaggedTemplateExpression\").tap(\"JavascriptParser\", _node => {\n      const node = /** @type {TaggedTemplateExpression} */_node;\n      const tag = this.evaluateExpression(node.tag);\n      if (tag.isIdentifier() && tag.identifier === \"String.raw\") {\n        const {\n          quasis,\n          parts\n        } = getSimplifiedTemplateResult(\"raw\", node.quasi);\n        return new BasicEvaluatedExpression().setTemplateString(quasis, parts, \"raw\").setRange( /** @type {Range} */node.range);\n      }\n    });\n    this.hooks.evaluateCallExpressionMember.for(\"concat\").tap(\"JavascriptParser\", (expr, param) => {\n      if (!param.isString() && !param.isWrapped()) return;\n      let stringSuffix = null;\n      let hasUnknownParams = false;\n      const innerExpressions = [];\n      for (let i = expr.arguments.length - 1; i >= 0; i--) {\n        const arg = expr.arguments[i];\n        if (arg.type === \"SpreadElement\") return;\n        const argExpr = this.evaluateExpression(arg);\n        if (hasUnknownParams || !argExpr.isString() && !argExpr.isNumber()) {\n          hasUnknownParams = true;\n          innerExpressions.push(argExpr);\n          continue;\n        }\n\n        /** @type {string} */\n        const value = argExpr.isString() ? ( /** @type {string} */argExpr.string) : \"\" + ( /** @type {number} */argExpr.number);\n\n        /** @type {string} */\n        const newString = value + (stringSuffix ? stringSuffix.string : \"\");\n        const newRange = /** @type {Range} */[/** @type {Range} */argExpr.range[0], /** @type {Range} */(stringSuffix || argExpr).range[1]];\n        stringSuffix = new BasicEvaluatedExpression().setString(newString).setSideEffects(stringSuffix && stringSuffix.couldHaveSideEffects() || argExpr.couldHaveSideEffects()).setRange(newRange);\n      }\n      if (hasUnknownParams) {\n        const prefix = param.isString() ? param : param.prefix;\n        const inner = param.isWrapped() && param.wrappedInnerExpressions ? param.wrappedInnerExpressions.concat(innerExpressions.reverse()) : innerExpressions.reverse();\n        return new BasicEvaluatedExpression().setWrapped(prefix, stringSuffix, inner).setRange( /** @type {Range} */expr.range);\n      } else if (param.isWrapped()) {\n        const postfix = stringSuffix || param.postfix;\n        const inner = param.wrappedInnerExpressions ? param.wrappedInnerExpressions.concat(innerExpressions.reverse()) : innerExpressions.reverse();\n        return new BasicEvaluatedExpression().setWrapped(param.prefix, postfix, inner).setRange( /** @type {Range} */expr.range);\n      } else {\n        const newString = /** @type {string} */param.string + (stringSuffix ? stringSuffix.string : \"\");\n        return new BasicEvaluatedExpression().setString(newString).setSideEffects(stringSuffix && stringSuffix.couldHaveSideEffects() || param.couldHaveSideEffects()).setRange( /** @type {Range} */expr.range);\n      }\n    });\n    this.hooks.evaluateCallExpressionMember.for(\"split\").tap(\"JavascriptParser\", (expr, param) => {\n      if (!param.isString()) return;\n      if (expr.arguments.length !== 1) return;\n      if (expr.arguments[0].type === \"SpreadElement\") return;\n      let result;\n      const arg = this.evaluateExpression(expr.arguments[0]);\n      if (arg.isString()) {\n        result = /** @type {string} */\n        param.string.split( /** @type {string} */arg.string);\n      } else if (arg.isRegExp()) {\n        result = /** @type {string} */param.string.split( /** @type {RegExp} */arg.regExp);\n      } else {\n        return;\n      }\n      return new BasicEvaluatedExpression().setArray(result).setSideEffects(param.couldHaveSideEffects()).setRange( /** @type {Range} */expr.range);\n    });\n    this.hooks.evaluate.for(\"ConditionalExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {ConditionalExpression} */_expr;\n      const condition = this.evaluateExpression(expr.test);\n      const conditionValue = condition.asBool();\n      let res;\n      if (conditionValue === undefined) {\n        const consequent = this.evaluateExpression(expr.consequent);\n        const alternate = this.evaluateExpression(expr.alternate);\n        res = new BasicEvaluatedExpression();\n        if (consequent.isConditional()) {\n          res.setOptions( /** @type {BasicEvaluatedExpression[]} */consequent.options);\n        } else {\n          res.setOptions([consequent]);\n        }\n        if (alternate.isConditional()) {\n          res.addOptions( /** @type {BasicEvaluatedExpression[]} */alternate.options);\n        } else {\n          res.addOptions([alternate]);\n        }\n      } else {\n        res = this.evaluateExpression(conditionValue ? expr.consequent : expr.alternate);\n        if (condition.couldHaveSideEffects()) res.setSideEffects();\n      }\n      res.setRange( /** @type {Range} */expr.range);\n      return res;\n    });\n    this.hooks.evaluate.for(\"ArrayExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {ArrayExpression} */_expr;\n      const items = expr.elements.map(element => {\n        return element !== null && element.type !== \"SpreadElement\" && this.evaluateExpression(element);\n      });\n      if (!items.every(Boolean)) return;\n      return new BasicEvaluatedExpression().setItems( /** @type {BasicEvaluatedExpression[]} */items).setRange( /** @type {Range} */expr.range);\n    });\n    this.hooks.evaluate.for(\"ChainExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {ChainExpression} */_expr;\n      /** @type {Expression[]} */\n      const optionalExpressionsStack = [];\n      /** @type {Expression|Super} */\n      let next = expr.expression;\n      while (next.type === \"MemberExpression\" || next.type === \"CallExpression\") {\n        if (next.type === \"MemberExpression\") {\n          if (next.optional) {\n            // SuperNode can not be optional\n            optionalExpressionsStack.push( /** @type {Expression} */next.object);\n          }\n          next = next.object;\n        } else {\n          if (next.optional) {\n            // SuperNode can not be optional\n            optionalExpressionsStack.push( /** @type {Expression} */next.callee);\n          }\n          next = next.callee;\n        }\n      }\n      while (optionalExpressionsStack.length > 0) {\n        const expression = /** @type {Expression} */\n        optionalExpressionsStack.pop();\n        const evaluated = this.evaluateExpression(expression);\n        if (evaluated.asNullish()) {\n          return evaluated.setRange( /** @type {Range} */_expr.range);\n        }\n      }\n      return this.evaluateExpression(expr.expression);\n    });\n  }\n\n  /**\n   * @param {Expression} node node\n   * @returns {Set<string>|undefined} destructured identifiers\n   */\n  destructuringAssignmentPropertiesFor(node) {\n    if (!this.destructuringAssignmentProperties) return undefined;\n    return this.destructuringAssignmentProperties.get(node);\n  }\n\n  /**\n   * @param {Expression} expr expression\n   * @returns {string | VariableInfoInterface | undefined} identifier\n   */\n  getRenameIdentifier(expr) {\n    const result = this.evaluateExpression(expr);\n    if (result.isIdentifier()) {\n      return result.identifier;\n    }\n  }\n\n  /**\n   * @param {ClassExpression | ClassDeclaration} classy a class node\n   * @returns {void}\n   */\n  walkClass(classy) {\n    if (classy.superClass) {\n      if (!this.hooks.classExtendsExpression.call(classy.superClass, classy)) {\n        this.walkExpression(classy.superClass);\n      }\n    }\n    if (classy.body && classy.body.type === \"ClassBody\") {\n      const scopeParams = [];\n      // Add class name in scope for recursive calls\n      if (classy.id) {\n        scopeParams.push(classy.id);\n      }\n      this.inClassScope(true, scopeParams, () => {\n        for (const classElement of ( /** @type {TODO} */classy.body.body)) {\n          if (!this.hooks.classBodyElement.call(classElement, classy)) {\n            if (classElement.computed && classElement.key) {\n              this.walkExpression(classElement.key);\n            }\n            if (classElement.value) {\n              if (!this.hooks.classBodyValue.call(classElement.value, classElement, classy)) {\n                const wasTopLevel = this.scope.topLevelScope;\n                this.scope.topLevelScope = false;\n                this.walkExpression(classElement.value);\n                this.scope.topLevelScope = wasTopLevel;\n              }\n            } else if (classElement.type === \"StaticBlock\") {\n              const wasTopLevel = this.scope.topLevelScope;\n              this.scope.topLevelScope = false;\n              this.walkBlockStatement(classElement);\n              this.scope.topLevelScope = wasTopLevel;\n            }\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Pre walking iterates the scope for variable declarations\n   *\n   * @param {(Statement | ModuleDeclaration)[]} statements statements\n   */\n  preWalkStatements(statements) {\n    for (let index = 0, len = statements.length; index < len; index++) {\n      const statement = statements[index];\n      this.preWalkStatement(statement);\n    }\n  }\n\n  /**\n   * Block pre walking iterates the scope for block variable declarations\n   *\n   * @param {(Statement | ModuleDeclaration)[]} statements statements\n   */\n  blockPreWalkStatements(statements) {\n    for (let index = 0, len = statements.length; index < len; index++) {\n      const statement = statements[index];\n      this.blockPreWalkStatement(statement);\n    }\n  }\n\n  /**\n   * Walking iterates the statements and expressions and processes them\n   *\n   * @param {(Statement | ModuleDeclaration)[]} statements statements\n   */\n  walkStatements(statements) {\n    for (let index = 0, len = statements.length; index < len; index++) {\n      const statement = statements[index];\n      this.walkStatement(statement);\n    }\n  }\n\n  /**\n   * Walking iterates the statements and expressions and processes them\n   *\n   * @param {Statement | ModuleDeclaration} statement statement\n   */\n  preWalkStatement(statement) {\n    this.statementPath.push(statement);\n    if (this.hooks.preStatement.call(statement)) {\n      this.prevStatement = this.statementPath.pop();\n      return;\n    }\n    switch (statement.type) {\n      case \"BlockStatement\":\n        this.preWalkBlockStatement(statement);\n        break;\n      case \"DoWhileStatement\":\n        this.preWalkDoWhileStatement(statement);\n        break;\n      case \"ForInStatement\":\n        this.preWalkForInStatement(statement);\n        break;\n      case \"ForOfStatement\":\n        this.preWalkForOfStatement(statement);\n        break;\n      case \"ForStatement\":\n        this.preWalkForStatement(statement);\n        break;\n      case \"FunctionDeclaration\":\n        this.preWalkFunctionDeclaration(statement);\n        break;\n      case \"IfStatement\":\n        this.preWalkIfStatement(statement);\n        break;\n      case \"LabeledStatement\":\n        this.preWalkLabeledStatement(statement);\n        break;\n      case \"SwitchStatement\":\n        this.preWalkSwitchStatement(statement);\n        break;\n      case \"TryStatement\":\n        this.preWalkTryStatement(statement);\n        break;\n      case \"VariableDeclaration\":\n        this.preWalkVariableDeclaration(statement);\n        break;\n      case \"WhileStatement\":\n        this.preWalkWhileStatement(statement);\n        break;\n      case \"WithStatement\":\n        this.preWalkWithStatement(statement);\n        break;\n    }\n    this.prevStatement = this.statementPath.pop();\n  }\n\n  /**\n   * @param {Statement | ModuleDeclaration} statement statement\n   */\n  blockPreWalkStatement(statement) {\n    this.statementPath.push(statement);\n    if (this.hooks.blockPreStatement.call(statement)) {\n      this.prevStatement = this.statementPath.pop();\n      return;\n    }\n    switch (statement.type) {\n      case \"ImportDeclaration\":\n        this.blockPreWalkImportDeclaration(statement);\n        break;\n      case \"ExportAllDeclaration\":\n        this.blockPreWalkExportAllDeclaration(statement);\n        break;\n      case \"ExportDefaultDeclaration\":\n        this.blockPreWalkExportDefaultDeclaration(statement);\n        break;\n      case \"ExportNamedDeclaration\":\n        this.blockPreWalkExportNamedDeclaration(statement);\n        break;\n      case \"VariableDeclaration\":\n        this.blockPreWalkVariableDeclaration(statement);\n        break;\n      case \"ClassDeclaration\":\n        this.blockPreWalkClassDeclaration(statement);\n        break;\n      case \"ExpressionStatement\":\n        this.blockPreWalkExpressionStatement(statement);\n    }\n    this.prevStatement = this.statementPath.pop();\n  }\n\n  /**\n   * @param {Statement | ModuleDeclaration} statement statement\n   */\n  walkStatement(statement) {\n    this.statementPath.push(statement);\n    if (this.hooks.statement.call(statement) !== undefined) {\n      this.prevStatement = this.statementPath.pop();\n      return;\n    }\n    switch (statement.type) {\n      case \"BlockStatement\":\n        this.walkBlockStatement(statement);\n        break;\n      case \"ClassDeclaration\":\n        this.walkClassDeclaration(statement);\n        break;\n      case \"DoWhileStatement\":\n        this.walkDoWhileStatement(statement);\n        break;\n      case \"ExportDefaultDeclaration\":\n        this.walkExportDefaultDeclaration(statement);\n        break;\n      case \"ExportNamedDeclaration\":\n        this.walkExportNamedDeclaration(statement);\n        break;\n      case \"ExpressionStatement\":\n        this.walkExpressionStatement(statement);\n        break;\n      case \"ForInStatement\":\n        this.walkForInStatement(statement);\n        break;\n      case \"ForOfStatement\":\n        this.walkForOfStatement(statement);\n        break;\n      case \"ForStatement\":\n        this.walkForStatement(statement);\n        break;\n      case \"FunctionDeclaration\":\n        this.walkFunctionDeclaration(statement);\n        break;\n      case \"IfStatement\":\n        this.walkIfStatement(statement);\n        break;\n      case \"LabeledStatement\":\n        this.walkLabeledStatement(statement);\n        break;\n      case \"ReturnStatement\":\n        this.walkReturnStatement(statement);\n        break;\n      case \"SwitchStatement\":\n        this.walkSwitchStatement(statement);\n        break;\n      case \"ThrowStatement\":\n        this.walkThrowStatement(statement);\n        break;\n      case \"TryStatement\":\n        this.walkTryStatement(statement);\n        break;\n      case \"VariableDeclaration\":\n        this.walkVariableDeclaration(statement);\n        break;\n      case \"WhileStatement\":\n        this.walkWhileStatement(statement);\n        break;\n      case \"WithStatement\":\n        this.walkWithStatement(statement);\n        break;\n    }\n    this.prevStatement = this.statementPath.pop();\n  }\n\n  /**\n   * Walks a statements that is nested within a parent statement\n   * and can potentially be a non-block statement.\n   * This enforces the nested statement to never be in ASI position.\n   *\n   * @param {Statement} statement the nested statement\n   */\n  walkNestedStatement(statement) {\n    this.prevStatement = undefined;\n    this.walkStatement(statement);\n  }\n\n  // Real Statements\n  /**\n   * @param {BlockStatement} statement block statement\n   */\n  preWalkBlockStatement(statement) {\n    this.preWalkStatements(statement.body);\n  }\n\n  /**\n   * @param {BlockStatement} statement block statement\n   */\n  walkBlockStatement(statement) {\n    this.inBlockScope(() => {\n      const body = statement.body;\n      const prev = this.prevStatement;\n      this.blockPreWalkStatements(body);\n      this.prevStatement = prev;\n      this.walkStatements(body);\n    });\n  }\n\n  /**\n   * @param {ExpressionStatement} statement expression statement\n   */\n  walkExpressionStatement(statement) {\n    this.walkExpression(statement.expression);\n  }\n\n  /**\n   * @param {IfStatement} statement if statement\n   */\n  preWalkIfStatement(statement) {\n    this.preWalkStatement(statement.consequent);\n    if (statement.alternate) {\n      this.preWalkStatement(statement.alternate);\n    }\n  }\n\n  /**\n   * @param {IfStatement} statement if statement\n   */\n  walkIfStatement(statement) {\n    const result = this.hooks.statementIf.call(statement);\n    if (result === undefined) {\n      this.walkExpression(statement.test);\n      this.walkNestedStatement(statement.consequent);\n      if (statement.alternate) {\n        this.walkNestedStatement(statement.alternate);\n      }\n    } else {\n      if (result) {\n        this.walkNestedStatement(statement.consequent);\n      } else if (statement.alternate) {\n        this.walkNestedStatement(statement.alternate);\n      }\n    }\n  }\n\n  /**\n   * @param {LabeledStatement} statement with statement\n   */\n  preWalkLabeledStatement(statement) {\n    this.preWalkStatement(statement.body);\n  }\n\n  /**\n   * @param {LabeledStatement} statement with statement\n   */\n  walkLabeledStatement(statement) {\n    const hook = this.hooks.label.get(statement.label.name);\n    if (hook !== undefined) {\n      const result = hook.call(statement);\n      if (result === true) return;\n    }\n    this.walkNestedStatement(statement.body);\n  }\n\n  /**\n   * @param {WithStatement} statement with statement\n   */\n  preWalkWithStatement(statement) {\n    this.preWalkStatement(statement.body);\n  }\n\n  /**\n   * @param {WithStatement} statement with statement\n   */\n  walkWithStatement(statement) {\n    this.walkExpression(statement.object);\n    this.walkNestedStatement(statement.body);\n  }\n\n  /**\n   * @param {SwitchStatement} statement switch statement\n   */\n  preWalkSwitchStatement(statement) {\n    this.preWalkSwitchCases(statement.cases);\n  }\n\n  /**\n   * @param {SwitchStatement} statement switch statement\n   */\n  walkSwitchStatement(statement) {\n    this.walkExpression(statement.discriminant);\n    this.walkSwitchCases(statement.cases);\n  }\n\n  /**\n   * @param {ReturnStatement | ThrowStatement} statement return or throw statement\n   */\n  walkTerminatingStatement(statement) {\n    if (statement.argument) this.walkExpression(statement.argument);\n  }\n\n  /**\n   * @param {ReturnStatement} statement return statement\n   */\n  walkReturnStatement(statement) {\n    this.walkTerminatingStatement(statement);\n  }\n\n  /**\n   * @param {ThrowStatement} statement return statement\n   */\n  walkThrowStatement(statement) {\n    this.walkTerminatingStatement(statement);\n  }\n\n  /**\n   * @param {TryStatement} statement try statement\n   */\n  preWalkTryStatement(statement) {\n    this.preWalkStatement(statement.block);\n    if (statement.handler) this.preWalkCatchClause(statement.handler);\n    if (statement.finalizer) this.preWalkStatement(statement.finalizer);\n  }\n\n  /**\n   * @param {TryStatement} statement try statement\n   */\n  walkTryStatement(statement) {\n    if (this.scope.inTry) {\n      this.walkStatement(statement.block);\n    } else {\n      this.scope.inTry = true;\n      this.walkStatement(statement.block);\n      this.scope.inTry = false;\n    }\n    if (statement.handler) this.walkCatchClause(statement.handler);\n    if (statement.finalizer) this.walkStatement(statement.finalizer);\n  }\n\n  /**\n   * @param {WhileStatement} statement while statement\n   */\n  preWalkWhileStatement(statement) {\n    this.preWalkStatement(statement.body);\n  }\n\n  /**\n   * @param {WhileStatement} statement while statement\n   */\n  walkWhileStatement(statement) {\n    this.walkExpression(statement.test);\n    this.walkNestedStatement(statement.body);\n  }\n\n  /**\n   * @param {DoWhileStatement} statement do while statement\n   */\n  preWalkDoWhileStatement(statement) {\n    this.preWalkStatement(statement.body);\n  }\n\n  /**\n   * @param {DoWhileStatement} statement do while statement\n   */\n  walkDoWhileStatement(statement) {\n    this.walkNestedStatement(statement.body);\n    this.walkExpression(statement.test);\n  }\n\n  /**\n   * @param {ForStatement} statement for statement\n   */\n  preWalkForStatement(statement) {\n    if (statement.init) {\n      if (statement.init.type === \"VariableDeclaration\") {\n        this.preWalkStatement(statement.init);\n      }\n    }\n    this.preWalkStatement(statement.body);\n  }\n\n  /**\n   * @param {ForStatement} statement for statement\n   */\n  walkForStatement(statement) {\n    this.inBlockScope(() => {\n      if (statement.init) {\n        if (statement.init.type === \"VariableDeclaration\") {\n          this.blockPreWalkVariableDeclaration(statement.init);\n          this.prevStatement = undefined;\n          this.walkStatement(statement.init);\n        } else {\n          this.walkExpression(statement.init);\n        }\n      }\n      if (statement.test) {\n        this.walkExpression(statement.test);\n      }\n      if (statement.update) {\n        this.walkExpression(statement.update);\n      }\n      const body = statement.body;\n      if (body.type === \"BlockStatement\") {\n        // no need to add additional scope\n        const prev = this.prevStatement;\n        this.blockPreWalkStatements(body.body);\n        this.prevStatement = prev;\n        this.walkStatements(body.body);\n      } else {\n        this.walkNestedStatement(body);\n      }\n    });\n  }\n\n  /**\n   * @param {ForInStatement} statement for statement\n   */\n  preWalkForInStatement(statement) {\n    if (statement.left.type === \"VariableDeclaration\") {\n      this.preWalkVariableDeclaration(statement.left);\n    }\n    this.preWalkStatement(statement.body);\n  }\n\n  /**\n   * @param {ForInStatement} statement for statement\n   */\n  walkForInStatement(statement) {\n    this.inBlockScope(() => {\n      if (statement.left.type === \"VariableDeclaration\") {\n        this.blockPreWalkVariableDeclaration(statement.left);\n        this.walkVariableDeclaration(statement.left);\n      } else {\n        this.walkPattern(statement.left);\n      }\n      this.walkExpression(statement.right);\n      const body = statement.body;\n      if (body.type === \"BlockStatement\") {\n        // no need to add additional scope\n        const prev = this.prevStatement;\n        this.blockPreWalkStatements(body.body);\n        this.prevStatement = prev;\n        this.walkStatements(body.body);\n      } else {\n        this.walkNestedStatement(body);\n      }\n    });\n  }\n\n  /**\n   * @param {ForOfStatement} statement statement\n   */\n  preWalkForOfStatement(statement) {\n    if (statement.await && this.scope.topLevelScope === true) {\n      this.hooks.topLevelAwait.call(statement);\n    }\n    if (statement.left.type === \"VariableDeclaration\") {\n      this.preWalkVariableDeclaration(statement.left);\n    }\n    this.preWalkStatement(statement.body);\n  }\n\n  /**\n   * @param {ForOfStatement} statement for statement\n   */\n  walkForOfStatement(statement) {\n    this.inBlockScope(() => {\n      if (statement.left.type === \"VariableDeclaration\") {\n        this.blockPreWalkVariableDeclaration(statement.left);\n        this.walkVariableDeclaration(statement.left);\n      } else {\n        this.walkPattern(statement.left);\n      }\n      this.walkExpression(statement.right);\n      const body = statement.body;\n      if (body.type === \"BlockStatement\") {\n        // no need to add additional scope\n        const prev = this.prevStatement;\n        this.blockPreWalkStatements(body.body);\n        this.prevStatement = prev;\n        this.walkStatements(body.body);\n      } else {\n        this.walkNestedStatement(body);\n      }\n    });\n  }\n\n  /**\n   * @param {FunctionDeclaration} statement function declaration\n   */\n  preWalkFunctionDeclaration(statement) {\n    if (statement.id) {\n      this.defineVariable(statement.id.name);\n    }\n  }\n\n  /**\n   * @param {FunctionDeclaration} statement function declaration\n   */\n  walkFunctionDeclaration(statement) {\n    const wasTopLevel = this.scope.topLevelScope;\n    this.scope.topLevelScope = false;\n    this.inFunctionScope(true, statement.params, () => {\n      for (const param of statement.params) {\n        this.walkPattern(param);\n      }\n      if (statement.body.type === \"BlockStatement\") {\n        this.detectMode(statement.body.body);\n        const prev = this.prevStatement;\n        this.preWalkStatement(statement.body);\n        this.prevStatement = prev;\n        this.walkStatement(statement.body);\n      } else {\n        this.walkExpression(statement.body);\n      }\n    });\n    this.scope.topLevelScope = wasTopLevel;\n  }\n\n  /**\n   * @param {ExpressionStatement} statement expression statement\n   */\n  blockPreWalkExpressionStatement(statement) {\n    const expression = statement.expression;\n    switch (expression.type) {\n      case \"AssignmentExpression\":\n        this.preWalkAssignmentExpression(expression);\n    }\n  }\n\n  /**\n   * @param {AssignmentExpression} expression assignment expression\n   */\n  preWalkAssignmentExpression(expression) {\n    if (expression.left.type !== \"ObjectPattern\" || !this.destructuringAssignmentProperties) return;\n    const keys = this._preWalkObjectPattern(expression.left);\n    if (!keys) return;\n\n    // check multiple assignments\n    if (this.destructuringAssignmentProperties.has(expression)) {\n      const set = /** @type {Set<string>} */\n      this.destructuringAssignmentProperties.get(expression);\n      this.destructuringAssignmentProperties.delete(expression);\n      for (const id of set) keys.add(id);\n    }\n    this.destructuringAssignmentProperties.set(expression.right.type === \"AwaitExpression\" ? expression.right.argument : expression.right, keys);\n    if (expression.right.type === \"AssignmentExpression\") {\n      this.preWalkAssignmentExpression(expression.right);\n    }\n  }\n\n  /**\n   * @param {ImportDeclaration} statement statement\n   */\n  blockPreWalkImportDeclaration(statement) {\n    const source = /** @type {ImportSource} */statement.source.value;\n    this.hooks.import.call(statement, source);\n    for (const specifier of statement.specifiers) {\n      const name = specifier.local.name;\n      switch (specifier.type) {\n        case \"ImportDefaultSpecifier\":\n          if (!this.hooks.importSpecifier.call(statement, source, \"default\", name)) {\n            this.defineVariable(name);\n          }\n          break;\n        case \"ImportSpecifier\":\n          if (!this.hooks.importSpecifier.call(statement, source, specifier.imported.name ||\n          // eslint-disable-next-line no-warning-comments\n          // @ts-ignore\n          // Old version of acorn used it\n          // TODO drop it in webpack@6\n          specifier.imported.value, name)) {\n            this.defineVariable(name);\n          }\n          break;\n        case \"ImportNamespaceSpecifier\":\n          if (!this.hooks.importSpecifier.call(statement, source, null, name)) {\n            this.defineVariable(name);\n          }\n          break;\n        default:\n          this.defineVariable(name);\n      }\n    }\n  }\n\n  /**\n   * @param {Declaration} declaration declaration\n   * @param {OnIdent} onIdent on ident callback\n   */\n  enterDeclaration(declaration, onIdent) {\n    switch (declaration.type) {\n      case \"VariableDeclaration\":\n        for (const declarator of declaration.declarations) {\n          switch (declarator.type) {\n            case \"VariableDeclarator\":\n              {\n                this.enterPattern(declarator.id, onIdent);\n                break;\n              }\n          }\n        }\n        break;\n      case \"FunctionDeclaration\":\n        this.enterPattern(declaration.id, onIdent);\n        break;\n      case \"ClassDeclaration\":\n        this.enterPattern(declaration.id, onIdent);\n        break;\n    }\n  }\n\n  /**\n   * @param {ExportNamedDeclaration} statement statement\n   */\n  blockPreWalkExportNamedDeclaration(statement) {\n    let source;\n    if (statement.source) {\n      source = /** @type {ImportSource} */statement.source.value;\n      this.hooks.exportImport.call(statement, source);\n    } else {\n      this.hooks.export.call(statement);\n    }\n    if (statement.declaration) {\n      if (!this.hooks.exportDeclaration.call(statement, statement.declaration)) {\n        const prev = this.prevStatement;\n        this.preWalkStatement(statement.declaration);\n        this.prevStatement = prev;\n        this.blockPreWalkStatement(statement.declaration);\n        let index = 0;\n        this.enterDeclaration(statement.declaration, def => {\n          this.hooks.exportSpecifier.call(statement, def, def, index++);\n        });\n      }\n    }\n    if (statement.specifiers) {\n      for (let specifierIndex = 0; specifierIndex < statement.specifiers.length; specifierIndex++) {\n        const specifier = statement.specifiers[specifierIndex];\n        switch (specifier.type) {\n          case \"ExportSpecifier\":\n            {\n              const name = specifier.exported.name ||\n              // eslint-disable-next-line no-warning-comments\n              // @ts-ignore\n              // Old version of acorn used it\n              // TODO drop it in webpack@6\n              specifier.exported.value;\n              if (source) {\n                this.hooks.exportImportSpecifier.call(statement, source, specifier.local.name, name, specifierIndex);\n              } else {\n                this.hooks.exportSpecifier.call(statement, specifier.local.name, name, specifierIndex);\n              }\n              break;\n            }\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {ExportNamedDeclaration} statement the statement\n   */\n  walkExportNamedDeclaration(statement) {\n    if (statement.declaration) {\n      this.walkStatement(statement.declaration);\n    }\n  }\n\n  /**\n   * @param {TODO} statement statement\n   */\n  blockPreWalkExportDefaultDeclaration(statement) {\n    const prev = this.prevStatement;\n    this.preWalkStatement(statement.declaration);\n    this.prevStatement = prev;\n    this.blockPreWalkStatement(statement.declaration);\n    if ( /** @type {FunctionDeclaration | ClassDeclaration} */statement.declaration.id && statement.declaration.type !== \"FunctionExpression\" && statement.declaration.type !== \"ClassExpression\") {\n      const declaration = /** @type {FunctionDeclaration | ClassDeclaration} */\n      statement.declaration;\n      this.hooks.exportSpecifier.call(statement, declaration.id.name, \"default\", undefined);\n    }\n  }\n\n  /**\n   * @param {ExportDefaultDeclaration} statement statement\n   */\n  walkExportDefaultDeclaration(statement) {\n    this.hooks.export.call(statement);\n    if ( /** @type {FunctionDeclaration | ClassDeclaration} */statement.declaration.id && statement.declaration.type !== \"FunctionExpression\" && statement.declaration.type !== \"ClassExpression\") {\n      const declaration = /** @type {FunctionDeclaration | ClassDeclaration} */\n      statement.declaration;\n      if (!this.hooks.exportDeclaration.call(statement, declaration)) {\n        this.walkStatement(declaration);\n      }\n    } else {\n      // Acorn parses `export default function() {}` as `FunctionDeclaration` and\n      // `export default class {}` as `ClassDeclaration`, both with `id = null`.\n      // These nodes must be treated as expressions.\n      if (statement.declaration.type === \"FunctionDeclaration\" || statement.declaration.type === \"ClassDeclaration\") {\n        this.walkStatement( /** @type {FunctionDeclaration | ClassDeclaration} */\n        statement.declaration);\n      } else {\n        this.walkExpression(statement.declaration);\n      }\n      if (!this.hooks.exportExpression.call(statement, /** @type {TODO} */statement.declaration)) {\n        this.hooks.exportSpecifier.call(statement, /** @type {TODO} */statement.declaration, \"default\", undefined);\n      }\n    }\n  }\n\n  /**\n   * @param {ExportAllDeclaration} statement statement\n   */\n  blockPreWalkExportAllDeclaration(statement) {\n    const source = /** @type {ImportSource} */statement.source.value;\n    const name = statement.exported ? statement.exported.name : null;\n    this.hooks.exportImport.call(statement, source);\n    this.hooks.exportImportSpecifier.call(statement, source, null, name, 0);\n  }\n\n  /**\n   * @param {VariableDeclaration} statement variable declaration\n   */\n  preWalkVariableDeclaration(statement) {\n    if (statement.kind !== \"var\") return;\n    this._preWalkVariableDeclaration(statement, this.hooks.varDeclarationVar);\n  }\n\n  /**\n   * @param {VariableDeclaration} statement variable declaration\n   */\n  blockPreWalkVariableDeclaration(statement) {\n    if (statement.kind === \"var\") return;\n    const hookMap = statement.kind === \"const\" ? this.hooks.varDeclarationConst : this.hooks.varDeclarationLet;\n    this._preWalkVariableDeclaration(statement, hookMap);\n  }\n\n  /**\n   * @param {VariableDeclaration} statement variable declaration\n   * @param {TODO} hookMap map of hooks\n   */\n  _preWalkVariableDeclaration(statement, hookMap) {\n    for (const declarator of statement.declarations) {\n      switch (declarator.type) {\n        case \"VariableDeclarator\":\n          {\n            this.preWalkVariableDeclarator(declarator);\n            if (!this.hooks.preDeclarator.call(declarator, statement)) {\n              this.enterPattern(declarator.id, (name, decl) => {\n                let hook = hookMap.get(name);\n                if (hook === undefined || !hook.call(decl)) {\n                  hook = this.hooks.varDeclaration.get(name);\n                  if (hook === undefined || !hook.call(decl)) {\n                    this.defineVariable(name);\n                  }\n                }\n              });\n            }\n            break;\n          }\n      }\n    }\n  }\n\n  /**\n   * @param {ObjectPattern} objectPattern object pattern\n   * @returns {Set<string> | undefined} set of names or undefined if not all keys are identifiers\n   */\n  _preWalkObjectPattern(objectPattern) {\n    const ids = new Set();\n    const properties = objectPattern.properties;\n    for (let i = 0; i < properties.length; i++) {\n      const property = properties[i];\n      if (property.type !== \"Property\") return;\n      const key = property.key;\n      if (key.type === \"Identifier\") {\n        ids.add(key.name);\n      } else {\n        const id = this.evaluateExpression( /** @type {TODO} */key);\n        const str = id.asString();\n        if (str) {\n          ids.add(str);\n        } else {\n          // could not evaluate key\n          return;\n        }\n      }\n    }\n    return ids;\n  }\n\n  /**\n   * @param {VariableDeclarator} declarator variable declarator\n   */\n  preWalkVariableDeclarator(declarator) {\n    if (!declarator.init || declarator.id.type !== \"ObjectPattern\" || !this.destructuringAssignmentProperties) return;\n    const keys = this._preWalkObjectPattern(declarator.id);\n    if (!keys) return;\n    this.destructuringAssignmentProperties.set(declarator.init.type === \"AwaitExpression\" ? declarator.init.argument : declarator.init, keys);\n    if (declarator.init.type === \"AssignmentExpression\") {\n      this.preWalkAssignmentExpression(declarator.init);\n    }\n  }\n\n  /**\n   * @param {VariableDeclaration} statement variable declaration\n   */\n  walkVariableDeclaration(statement) {\n    for (const declarator of statement.declarations) {\n      switch (declarator.type) {\n        case \"VariableDeclarator\":\n          {\n            const renameIdentifier = declarator.init && this.getRenameIdentifier(declarator.init);\n            if (renameIdentifier && declarator.id.type === \"Identifier\") {\n              const hook = this.hooks.canRename.get(renameIdentifier);\n              if (hook !== undefined && hook.call( /** @type {Expression} */declarator.init)) {\n                // renaming with \"var a = b;\"\n                const hook = this.hooks.rename.get(renameIdentifier);\n                if (hook === undefined || !hook.call( /** @type {Expression} */declarator.init)) {\n                  this.setVariable(declarator.id.name, renameIdentifier);\n                }\n                break;\n              }\n            }\n            if (!this.hooks.declarator.call(declarator, statement)) {\n              this.walkPattern(declarator.id);\n              if (declarator.init) this.walkExpression(declarator.init);\n            }\n            break;\n          }\n      }\n    }\n  }\n\n  /**\n   * @param {ClassDeclaration} statement class declaration\n   */\n  blockPreWalkClassDeclaration(statement) {\n    if (statement.id) {\n      this.defineVariable(statement.id.name);\n    }\n  }\n\n  /**\n   * @param {ClassDeclaration} statement class declaration\n   */\n  walkClassDeclaration(statement) {\n    this.walkClass(statement);\n  }\n\n  /**\n   * @param {SwitchCase[]} switchCases switch statement\n   */\n  preWalkSwitchCases(switchCases) {\n    for (let index = 0, len = switchCases.length; index < len; index++) {\n      const switchCase = switchCases[index];\n      this.preWalkStatements(switchCase.consequent);\n    }\n  }\n\n  /**\n   * @param {SwitchCase[]} switchCases switch statement\n   */\n  walkSwitchCases(switchCases) {\n    this.inBlockScope(() => {\n      const len = switchCases.length;\n\n      // we need to pre walk all statements first since we can have invalid code\n      // import A from \"module\";\n      // switch(1) {\n      //    case 1:\n      //      console.log(A); // should fail at runtime\n      //    case 2:\n      //      const A = 1;\n      // }\n      for (let index = 0; index < len; index++) {\n        const switchCase = switchCases[index];\n        if (switchCase.consequent.length > 0) {\n          const prev = this.prevStatement;\n          this.blockPreWalkStatements(switchCase.consequent);\n          this.prevStatement = prev;\n        }\n      }\n      for (let index = 0; index < len; index++) {\n        const switchCase = switchCases[index];\n        if (switchCase.test) {\n          this.walkExpression(switchCase.test);\n        }\n        if (switchCase.consequent.length > 0) {\n          this.walkStatements(switchCase.consequent);\n        }\n      }\n    });\n  }\n\n  /**\n   * @param {CatchClause} catchClause catch clause\n   */\n  preWalkCatchClause(catchClause) {\n    this.preWalkStatement(catchClause.body);\n  }\n\n  /**\n   * @param {CatchClause} catchClause catch clause\n   */\n  walkCatchClause(catchClause) {\n    this.inBlockScope(() => {\n      // Error binding is optional in catch clause since ECMAScript 2019\n      if (catchClause.param !== null) {\n        this.enterPattern(catchClause.param, ident => {\n          this.defineVariable(ident);\n        });\n        this.walkPattern(catchClause.param);\n      }\n      const prev = this.prevStatement;\n      this.blockPreWalkStatement(catchClause.body);\n      this.prevStatement = prev;\n      this.walkStatement(catchClause.body);\n    });\n  }\n\n  /**\n   * @param {Pattern} pattern pattern\n   */\n  walkPattern(pattern) {\n    switch (pattern.type) {\n      case \"ArrayPattern\":\n        this.walkArrayPattern(pattern);\n        break;\n      case \"AssignmentPattern\":\n        this.walkAssignmentPattern(pattern);\n        break;\n      case \"MemberExpression\":\n        this.walkMemberExpression(pattern);\n        break;\n      case \"ObjectPattern\":\n        this.walkObjectPattern(pattern);\n        break;\n      case \"RestElement\":\n        this.walkRestElement(pattern);\n        break;\n    }\n  }\n\n  /**\n   * @param {AssignmentPattern} pattern assignment pattern\n   */\n  walkAssignmentPattern(pattern) {\n    this.walkExpression(pattern.right);\n    this.walkPattern(pattern.left);\n  }\n\n  /**\n   * @param {ObjectPattern} pattern pattern\n   */\n  walkObjectPattern(pattern) {\n    for (let i = 0, len = pattern.properties.length; i < len; i++) {\n      const prop = pattern.properties[i];\n      if (prop) {\n        if (prop.type === \"RestElement\") {\n          continue;\n        }\n        if (prop.computed) this.walkExpression(prop.key);\n        if (prop.value) this.walkPattern(prop.value);\n      }\n    }\n  }\n\n  /**\n   * @param {ArrayPattern} pattern array pattern\n   */\n  walkArrayPattern(pattern) {\n    for (let i = 0, len = pattern.elements.length; i < len; i++) {\n      const element = pattern.elements[i];\n      if (element) this.walkPattern(element);\n    }\n  }\n\n  /**\n   * @param {RestElement} pattern rest element\n   */\n  walkRestElement(pattern) {\n    this.walkPattern(pattern.argument);\n  }\n\n  /**\n   * @param {(Expression | SpreadElement | null)[]} expressions expressions\n   */\n  walkExpressions(expressions) {\n    for (const expression of expressions) {\n      if (expression) {\n        this.walkExpression(expression);\n      }\n    }\n  }\n\n  /**\n   * @param {TODO} expression expression\n   */\n  walkExpression(expression) {\n    switch (expression.type) {\n      case \"ArrayExpression\":\n        this.walkArrayExpression(expression);\n        break;\n      case \"ArrowFunctionExpression\":\n        this.walkArrowFunctionExpression(expression);\n        break;\n      case \"AssignmentExpression\":\n        this.walkAssignmentExpression(expression);\n        break;\n      case \"AwaitExpression\":\n        this.walkAwaitExpression(expression);\n        break;\n      case \"BinaryExpression\":\n        this.walkBinaryExpression(expression);\n        break;\n      case \"CallExpression\":\n        this.walkCallExpression(expression);\n        break;\n      case \"ChainExpression\":\n        this.walkChainExpression(expression);\n        break;\n      case \"ClassExpression\":\n        this.walkClassExpression(expression);\n        break;\n      case \"ConditionalExpression\":\n        this.walkConditionalExpression(expression);\n        break;\n      case \"FunctionExpression\":\n        this.walkFunctionExpression(expression);\n        break;\n      case \"Identifier\":\n        this.walkIdentifier(expression);\n        break;\n      case \"ImportExpression\":\n        this.walkImportExpression(expression);\n        break;\n      case \"LogicalExpression\":\n        this.walkLogicalExpression(expression);\n        break;\n      case \"MetaProperty\":\n        this.walkMetaProperty(expression);\n        break;\n      case \"MemberExpression\":\n        this.walkMemberExpression(expression);\n        break;\n      case \"NewExpression\":\n        this.walkNewExpression(expression);\n        break;\n      case \"ObjectExpression\":\n        this.walkObjectExpression(expression);\n        break;\n      case \"SequenceExpression\":\n        this.walkSequenceExpression(expression);\n        break;\n      case \"SpreadElement\":\n        this.walkSpreadElement(expression);\n        break;\n      case \"TaggedTemplateExpression\":\n        this.walkTaggedTemplateExpression(expression);\n        break;\n      case \"TemplateLiteral\":\n        this.walkTemplateLiteral(expression);\n        break;\n      case \"ThisExpression\":\n        this.walkThisExpression(expression);\n        break;\n      case \"UnaryExpression\":\n        this.walkUnaryExpression(expression);\n        break;\n      case \"UpdateExpression\":\n        this.walkUpdateExpression(expression);\n        break;\n      case \"YieldExpression\":\n        this.walkYieldExpression(expression);\n        break;\n    }\n  }\n\n  /**\n   * @param {AwaitExpression} expression await expression\n   */\n  walkAwaitExpression(expression) {\n    if (this.scope.topLevelScope === true) this.hooks.topLevelAwait.call(expression);\n    this.walkExpression(expression.argument);\n  }\n\n  /**\n   * @param {ArrayExpression} expression array expression\n   */\n  walkArrayExpression(expression) {\n    if (expression.elements) {\n      this.walkExpressions(expression.elements);\n    }\n  }\n\n  /**\n   * @param {SpreadElement} expression spread element\n   */\n  walkSpreadElement(expression) {\n    if (expression.argument) {\n      this.walkExpression(expression.argument);\n    }\n  }\n\n  /**\n   * @param {ObjectExpression} expression object expression\n   */\n  walkObjectExpression(expression) {\n    for (let propIndex = 0, len = expression.properties.length; propIndex < len; propIndex++) {\n      const prop = expression.properties[propIndex];\n      this.walkProperty(prop);\n    }\n  }\n\n  /**\n   * @param {Property | SpreadElement} prop property or spread element\n   */\n  walkProperty(prop) {\n    if (prop.type === \"SpreadElement\") {\n      this.walkExpression(prop.argument);\n      return;\n    }\n    if (prop.computed) {\n      this.walkExpression(prop.key);\n    }\n    if (prop.shorthand && prop.value && prop.value.type === \"Identifier\") {\n      this.scope.inShorthand = prop.value.name;\n      this.walkIdentifier(prop.value);\n      this.scope.inShorthand = false;\n    } else {\n      this.walkExpression(prop.value);\n    }\n  }\n\n  /**\n   * @param {FunctionExpression} expression arrow function expression\n   */\n  walkFunctionExpression(expression) {\n    const wasTopLevel = this.scope.topLevelScope;\n    this.scope.topLevelScope = false;\n    const scopeParams = [...expression.params];\n\n    // Add function name in scope for recursive calls\n    if (expression.id) {\n      scopeParams.push(expression.id);\n    }\n    this.inFunctionScope(true, scopeParams, () => {\n      for (const param of expression.params) {\n        this.walkPattern(param);\n      }\n      if (expression.body.type === \"BlockStatement\") {\n        this.detectMode(expression.body.body);\n        const prev = this.prevStatement;\n        this.preWalkStatement(expression.body);\n        this.prevStatement = prev;\n        this.walkStatement(expression.body);\n      } else {\n        this.walkExpression(expression.body);\n      }\n    });\n    this.scope.topLevelScope = wasTopLevel;\n  }\n\n  /**\n   * @param {ArrowFunctionExpression} expression arrow function expression\n   */\n  walkArrowFunctionExpression(expression) {\n    const wasTopLevel = this.scope.topLevelScope;\n    this.scope.topLevelScope = wasTopLevel ? \"arrow\" : false;\n    this.inFunctionScope(false, expression.params, () => {\n      for (const param of expression.params) {\n        this.walkPattern(param);\n      }\n      if (expression.body.type === \"BlockStatement\") {\n        this.detectMode(expression.body.body);\n        const prev = this.prevStatement;\n        this.preWalkStatement(expression.body);\n        this.prevStatement = prev;\n        this.walkStatement(expression.body);\n      } else {\n        this.walkExpression(expression.body);\n      }\n    });\n    this.scope.topLevelScope = wasTopLevel;\n  }\n\n  /**\n   * @param {SequenceExpression} expression the sequence\n   */\n  walkSequenceExpression(expression) {\n    if (!expression.expressions) return;\n    // We treat sequence expressions like statements when they are one statement level\n    // This has some benefits for optimizations that only work on statement level\n    const currentStatement = this.statementPath[this.statementPath.length - 1];\n    if (currentStatement === expression || currentStatement.type === \"ExpressionStatement\" && currentStatement.expression === expression) {\n      const old = /** @type {StatementPathItem} */this.statementPath.pop();\n      for (const expr of expression.expressions) {\n        this.statementPath.push(expr);\n        this.walkExpression(expr);\n        this.statementPath.pop();\n      }\n      this.statementPath.push(old);\n    } else {\n      this.walkExpressions(expression.expressions);\n    }\n  }\n\n  /**\n   * @param {UpdateExpression} expression the update expression\n   */\n  walkUpdateExpression(expression) {\n    this.walkExpression(expression.argument);\n  }\n\n  /**\n   * @param {UnaryExpression} expression the unary expression\n   */\n  walkUnaryExpression(expression) {\n    if (expression.operator === \"typeof\") {\n      const result = this.callHooksForExpression(this.hooks.typeof, expression.argument, expression);\n      if (result === true) return;\n      if (expression.argument.type === \"ChainExpression\") {\n        const result = this.callHooksForExpression(this.hooks.typeof, expression.argument.expression, expression);\n        if (result === true) return;\n      }\n    }\n    this.walkExpression(expression.argument);\n  }\n\n  /**\n   * @param {LogicalExpression | BinaryExpression} expression the expression\n   */\n  walkLeftRightExpression(expression) {\n    this.walkExpression(expression.left);\n    this.walkExpression(expression.right);\n  }\n\n  /**\n   * @param {BinaryExpression} expression the binary expression\n   */\n  walkBinaryExpression(expression) {\n    if (this.hooks.binaryExpression.call(expression) === undefined) {\n      this.walkLeftRightExpression(expression);\n    }\n  }\n\n  /**\n   * @param {LogicalExpression} expression the logical expression\n   */\n  walkLogicalExpression(expression) {\n    const result = this.hooks.expressionLogicalOperator.call(expression);\n    if (result === undefined) {\n      this.walkLeftRightExpression(expression);\n    } else {\n      if (result) {\n        this.walkExpression(expression.right);\n      }\n    }\n  }\n\n  /**\n   * @param {AssignmentExpression} expression assignment expression\n   */\n  walkAssignmentExpression(expression) {\n    if (expression.left.type === \"Identifier\") {\n      const renameIdentifier = this.getRenameIdentifier(expression.right);\n      if (renameIdentifier) {\n        if (this.callHooksForInfo(this.hooks.canRename, renameIdentifier, expression.right)) {\n          // renaming \"a = b;\"\n          if (!this.callHooksForInfo(this.hooks.rename, renameIdentifier, expression.right)) {\n            this.setVariable(expression.left.name, typeof renameIdentifier === \"string\" ? this.getVariableInfo(renameIdentifier) : renameIdentifier);\n          }\n          return;\n        }\n      }\n      this.walkExpression(expression.right);\n      this.enterPattern(expression.left, (name, decl) => {\n        if (!this.callHooksForName(this.hooks.assign, name, expression)) {\n          this.walkExpression(expression.left);\n        }\n      });\n      return;\n    }\n    if (expression.left.type.endsWith(\"Pattern\")) {\n      this.walkExpression(expression.right);\n      this.enterPattern(expression.left, (name, decl) => {\n        if (!this.callHooksForName(this.hooks.assign, name, expression)) {\n          this.defineVariable(name);\n        }\n      });\n      this.walkPattern(expression.left);\n    } else if (expression.left.type === \"MemberExpression\") {\n      const exprName = this.getMemberExpressionInfo(expression.left, ALLOWED_MEMBER_TYPES_EXPRESSION);\n      if (exprName) {\n        if (this.callHooksForInfo(this.hooks.assignMemberChain, exprName.rootInfo, expression, exprName.getMembers())) {\n          return;\n        }\n      }\n      this.walkExpression(expression.right);\n      this.walkExpression(expression.left);\n    } else {\n      this.walkExpression(expression.right);\n      this.walkExpression(expression.left);\n    }\n  }\n\n  /**\n   * @param {ConditionalExpression} expression conditional expression\n   */\n  walkConditionalExpression(expression) {\n    const result = this.hooks.expressionConditionalOperator.call(expression);\n    if (result === undefined) {\n      this.walkExpression(expression.test);\n      this.walkExpression(expression.consequent);\n      if (expression.alternate) {\n        this.walkExpression(expression.alternate);\n      }\n    } else {\n      if (result) {\n        this.walkExpression(expression.consequent);\n      } else if (expression.alternate) {\n        this.walkExpression(expression.alternate);\n      }\n    }\n  }\n\n  /**\n   * @param {NewExpression} expression new expression\n   */\n  walkNewExpression(expression) {\n    const result = this.callHooksForExpression(this.hooks.new, expression.callee, expression);\n    if (result === true) return;\n    this.walkExpression(expression.callee);\n    if (expression.arguments) {\n      this.walkExpressions(expression.arguments);\n    }\n  }\n\n  /**\n   * @param {YieldExpression} expression yield expression\n   */\n  walkYieldExpression(expression) {\n    if (expression.argument) {\n      this.walkExpression(expression.argument);\n    }\n  }\n\n  /**\n   * @param {TemplateLiteral} expression template literal\n   */\n  walkTemplateLiteral(expression) {\n    if (expression.expressions) {\n      this.walkExpressions(expression.expressions);\n    }\n  }\n\n  /**\n   * @param {TaggedTemplateExpression} expression tagged template expression\n   */\n  walkTaggedTemplateExpression(expression) {\n    if (expression.tag) {\n      this.scope.inTaggedTemplateTag = true;\n      this.walkExpression(expression.tag);\n      this.scope.inTaggedTemplateTag = false;\n    }\n    if (expression.quasi && expression.quasi.expressions) {\n      this.walkExpressions(expression.quasi.expressions);\n    }\n  }\n\n  /**\n   * @param {ClassExpression} expression the class expression\n   */\n  walkClassExpression(expression) {\n    this.walkClass(expression);\n  }\n\n  /**\n   * @param {ChainExpression} expression expression\n   */\n  walkChainExpression(expression) {\n    const result = this.hooks.optionalChaining.call(expression);\n    if (result === undefined) {\n      if (expression.expression.type === \"CallExpression\") {\n        this.walkCallExpression(expression.expression);\n      } else {\n        this.walkMemberExpression(expression.expression);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {FunctionExpression | ArrowFunctionExpression} functionExpression function expression\n   * @param {(Expression | SpreadElement)[]} options options\n   * @param {Expression | SpreadElement | null} currentThis current this\n   */\n  _walkIIFE(functionExpression, options, currentThis) {\n    /**\n     * @param {Expression | SpreadElement} argOrThis arg or this\n     * @returns {string | VariableInfoInterface | undefined} var info\n     */\n    const getVarInfo = argOrThis => {\n      const renameIdentifier = this.getRenameIdentifier( /** @type {Expression} */argOrThis);\n      if (renameIdentifier) {\n        if (this.callHooksForInfo(this.hooks.canRename, renameIdentifier, argOrThis)) {\n          if (!this.callHooksForInfo(this.hooks.rename, renameIdentifier, argOrThis)) {\n            return typeof renameIdentifier === \"string\" ? ( /** @type {string} */this.getVariableInfo(renameIdentifier)) : renameIdentifier;\n          }\n        }\n      }\n      this.walkExpression(argOrThis);\n    };\n    const {\n      params,\n      type\n    } = functionExpression;\n    const arrow = type === \"ArrowFunctionExpression\";\n    const renameThis = currentThis ? getVarInfo(currentThis) : null;\n    const varInfoForArgs = options.map(getVarInfo);\n    const wasTopLevel = this.scope.topLevelScope;\n    this.scope.topLevelScope = wasTopLevel && arrow ? \"arrow\" : false;\n    const scopeParams = /** @type {(Identifier | string)[]} */\n    params.filter((identifier, idx) => !varInfoForArgs[idx]);\n\n    // Add function name in scope for recursive calls\n    if (functionExpression.type === \"FunctionExpression\" && functionExpression.id) {\n      scopeParams.push(functionExpression.id.name);\n    }\n    this.inFunctionScope(true, scopeParams, () => {\n      if (renameThis && !arrow) {\n        this.setVariable(\"this\", renameThis);\n      }\n      for (let i = 0; i < varInfoForArgs.length; i++) {\n        const varInfo = varInfoForArgs[i];\n        if (!varInfo) continue;\n        if (!params[i] || params[i].type !== \"Identifier\") continue;\n        this.setVariable( /** @type {Identifier} */params[i].name, varInfo);\n      }\n      if (functionExpression.body.type === \"BlockStatement\") {\n        this.detectMode(functionExpression.body.body);\n        const prev = this.prevStatement;\n        this.preWalkStatement(functionExpression.body);\n        this.prevStatement = prev;\n        this.walkStatement(functionExpression.body);\n      } else {\n        this.walkExpression(functionExpression.body);\n      }\n    });\n    this.scope.topLevelScope = wasTopLevel;\n  }\n\n  /**\n   * @param {ImportExpression} expression import expression\n   */\n  walkImportExpression(expression) {\n    let result = this.hooks.importCall.call(expression);\n    if (result === true) return;\n    this.walkExpression(expression.source);\n  }\n\n  /**\n   * @param {CallExpression} expression expression\n   */\n  walkCallExpression(expression) {\n    const isSimpleFunction = fn => {\n      return fn.params.every(p => p.type === \"Identifier\");\n    };\n    if (expression.callee.type === \"MemberExpression\" && expression.callee.object.type.endsWith(\"FunctionExpression\") && !expression.callee.computed && (\n    // eslint-disable-next-line no-warning-comments\n    // @ts-ignore\n    // TODO check me and handle more cases\n    expression.callee.property.name === \"call\" ||\n    // eslint-disable-next-line no-warning-comments\n    // @ts-ignore\n    expression.callee.property.name === \"bind\") && expression.arguments.length > 0 && isSimpleFunction(expression.callee.object)) {\n      // (function(…) { }.call/bind(?, …))\n      this._walkIIFE( /** @type {FunctionExpression | ArrowFunctionExpression} */\n      expression.callee.object, expression.arguments.slice(1), expression.arguments[0]);\n    } else if (expression.callee.type.endsWith(\"FunctionExpression\") && isSimpleFunction(expression.callee)) {\n      // (function(…) { }(…))\n      this._walkIIFE( /** @type {FunctionExpression | ArrowFunctionExpression} */\n      expression.callee, expression.arguments, null);\n    } else {\n      if (expression.callee.type === \"MemberExpression\") {\n        const exprInfo = this.getMemberExpressionInfo(expression.callee, ALLOWED_MEMBER_TYPES_CALL_EXPRESSION);\n        if (exprInfo && exprInfo.type === \"call\") {\n          const result = this.callHooksForInfo(this.hooks.callMemberChainOfCallMemberChain, exprInfo.rootInfo, expression, exprInfo.getCalleeMembers(), exprInfo.call, exprInfo.getMembers(), exprInfo.getMemberRanges());\n          if (result === true) return;\n        }\n      }\n      const callee = this.evaluateExpression( /** @type {TODO} */expression.callee);\n      if (callee.isIdentifier()) {\n        const result1 = this.callHooksForInfo(this.hooks.callMemberChain, callee.rootInfo, expression, callee.getMembers(), callee.getMembersOptionals ? callee.getMembersOptionals() : callee.getMembers().map(() => false), callee.getMemberRanges ? callee.getMemberRanges() : []);\n        if (result1 === true) return;\n        const result2 = this.callHooksForInfo(this.hooks.call, callee.identifier, expression);\n        if (result2 === true) return;\n      }\n      if (expression.callee) {\n        if (expression.callee.type === \"MemberExpression\") {\n          // because of call context we need to walk the call context as expression\n          this.walkExpression(expression.callee.object);\n          if (expression.callee.computed === true) this.walkExpression(expression.callee.property);\n        } else {\n          this.walkExpression(expression.callee);\n        }\n      }\n      if (expression.arguments) this.walkExpressions(expression.arguments);\n    }\n  }\n\n  /**\n   * @param {MemberExpression} expression member expression\n   */\n  walkMemberExpression(expression) {\n    const exprInfo = this.getMemberExpressionInfo(expression, ALLOWED_MEMBER_TYPES_ALL);\n    if (exprInfo) {\n      switch (exprInfo.type) {\n        case \"expression\":\n          {\n            const result1 = this.callHooksForInfo(this.hooks.expression, exprInfo.name, expression);\n            if (result1 === true) return;\n            const members = exprInfo.getMembers();\n            const membersOptionals = exprInfo.getMembersOptionals();\n            const memberRanges = exprInfo.getMemberRanges();\n            const result2 = this.callHooksForInfo(this.hooks.expressionMemberChain, exprInfo.rootInfo, expression, members, membersOptionals, memberRanges);\n            if (result2 === true) return;\n            this.walkMemberExpressionWithExpressionName(expression, exprInfo.name, exprInfo.rootInfo, members.slice(), () => this.callHooksForInfo(this.hooks.unhandledExpressionMemberChain, exprInfo.rootInfo, expression, members));\n            return;\n          }\n        case \"call\":\n          {\n            const result = this.callHooksForInfo(this.hooks.memberChainOfCallMemberChain, exprInfo.rootInfo, expression, exprInfo.getCalleeMembers(), exprInfo.call, exprInfo.getMembers(), exprInfo.getMemberRanges());\n            if (result === true) return;\n            // Fast skip over the member chain as we already called memberChainOfCallMemberChain\n            // and call computed property are literals anyway\n            this.walkExpression(exprInfo.call);\n            return;\n          }\n      }\n    }\n    this.walkExpression(expression.object);\n    if (expression.computed === true) this.walkExpression(expression.property);\n  }\n\n  /**\n   * @param {TODO} expression member expression\n   * @param {string} name name\n   * @param {string | VariableInfo} rootInfo root info\n   * @param {string[]} members members\n   * @param {TODO} onUnhandled on unhandled callback\n   */\n  walkMemberExpressionWithExpressionName(expression, name, rootInfo, members, onUnhandled) {\n    if (expression.object.type === \"MemberExpression\") {\n      // optimize the case where expression.object is a MemberExpression too.\n      // we can keep info here when calling walkMemberExpression directly\n      const property = expression.property.name || `${expression.property.value}`;\n      name = name.slice(0, -property.length - 1);\n      members.pop();\n      const result = this.callHooksForInfo(this.hooks.expression, name, expression.object);\n      if (result === true) return;\n      this.walkMemberExpressionWithExpressionName(expression.object, name, rootInfo, members, onUnhandled);\n    } else if (!onUnhandled || !onUnhandled()) {\n      this.walkExpression(expression.object);\n    }\n    if (expression.computed === true) this.walkExpression(expression.property);\n  }\n\n  /**\n   * @param {ThisExpression} expression this expression\n   */\n  walkThisExpression(expression) {\n    this.callHooksForName(this.hooks.expression, \"this\", expression);\n  }\n\n  /**\n   * @param {Identifier} expression identifier\n   */\n  walkIdentifier(expression) {\n    this.callHooksForName(this.hooks.expression, expression.name, expression);\n  }\n\n  /**\n   * @param {MetaProperty} metaProperty meta property\n   */\n  walkMetaProperty(metaProperty) {\n    this.hooks.expression.for(getRootName(metaProperty)).call(metaProperty);\n  }\n  /**\n   * @template T\n   * @template R\n   * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n   * @param {TODO} expr expression\n   * @param {AsArray<T>} args args for the hook\n   * @returns {R | undefined} result of hook\n   */\n  callHooksForExpression(hookMap, expr, ...args) {\n    return this.callHooksForExpressionWithFallback(hookMap, expr, undefined, undefined, ...args);\n  }\n\n  /**\n   * @template T\n   * @template R\n   * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n   * @param {MemberExpression} expr expression info\n   * @param {(function(string, string | ScopeInfo | VariableInfo, function(): string[]): any) | undefined} fallback callback when variable in not handled by hooks\n   * @param {(function(string): any) | undefined} defined callback when variable is defined\n   * @param {AsArray<T>} args args for the hook\n   * @returns {R | undefined} result of hook\n   */\n  callHooksForExpressionWithFallback(hookMap, expr, fallback, defined, ...args) {\n    const exprName = this.getMemberExpressionInfo(expr, ALLOWED_MEMBER_TYPES_EXPRESSION);\n    if (exprName !== undefined) {\n      const members = exprName.getMembers();\n      return this.callHooksForInfoWithFallback(hookMap, members.length === 0 ? exprName.rootInfo : exprName.name, fallback && (name => fallback(name, exprName.rootInfo, exprName.getMembers)), defined && (() => defined(exprName.name)), ...args);\n    }\n  }\n\n  /**\n   * @template T\n   * @template R\n   * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n   * @param {string} name key in map\n   * @param {AsArray<T>} args args for the hook\n   * @returns {R | undefined} result of hook\n   */\n  callHooksForName(hookMap, name, ...args) {\n    return this.callHooksForNameWithFallback(hookMap, name, undefined, undefined, ...args);\n  }\n\n  /**\n   * @template T\n   * @template R\n   * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks that should be called\n   * @param {ExportedVariableInfo} info variable info\n   * @param  {AsArray<T>} args args for the hook\n   * @returns {R | undefined} result of hook\n   */\n  callHooksForInfo(hookMap, info, ...args) {\n    return this.callHooksForInfoWithFallback(hookMap, info, undefined, undefined, ...args);\n  }\n\n  /**\n   * @template T\n   * @template R\n   * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n   * @param {ExportedVariableInfo} info variable info\n   * @param {(function(string): any) | undefined} fallback callback when variable in not handled by hooks\n   * @param {(function(): any) | undefined} defined callback when variable is defined\n   * @param {AsArray<T>} args args for the hook\n   * @returns {R | undefined} result of hook\n   */\n  callHooksForInfoWithFallback(hookMap, info, fallback, defined, ...args) {\n    let name;\n    if (typeof info === \"string\") {\n      name = info;\n    } else {\n      if (!(info instanceof VariableInfo)) {\n        if (defined !== undefined) {\n          return defined();\n        }\n        return;\n      }\n      let tagInfo = info.tagInfo;\n      while (tagInfo !== undefined) {\n        const hook = hookMap.get(tagInfo.tag);\n        if (hook !== undefined) {\n          this.currentTagData = tagInfo.data;\n          const result = hook.call(...args);\n          this.currentTagData = undefined;\n          if (result !== undefined) return result;\n        }\n        tagInfo = tagInfo.next;\n      }\n      if (info.freeName === true) {\n        if (defined !== undefined) {\n          return defined();\n        }\n        return;\n      }\n      name = info.freeName;\n    }\n    const hook = hookMap.get(name);\n    if (hook !== undefined) {\n      const result = hook.call(...args);\n      if (result !== undefined) return result;\n    }\n    if (fallback !== undefined) {\n      return fallback(name);\n    }\n  }\n\n  /**\n   * @template T\n   * @template R\n   * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n   * @param {string} name key in map\n   * @param {(function(string): any) | undefined} fallback callback when variable in not handled by hooks\n   * @param {(function(): any) | undefined} defined callback when variable is defined\n   * @param {AsArray<T>} args args for the hook\n   * @returns {R | undefined} result of hook\n   */\n  callHooksForNameWithFallback(hookMap, name, fallback, defined, ...args) {\n    return this.callHooksForInfoWithFallback(hookMap, this.getVariableInfo(name), fallback, defined, ...args);\n  }\n\n  /**\n   * @deprecated\n   * @param {any} params scope params\n   * @param {function(): void} fn inner function\n   * @returns {void}\n   */\n  inScope(params, fn) {\n    const oldScope = this.scope;\n    this.scope = {\n      topLevelScope: oldScope.topLevelScope,\n      inTry: false,\n      inShorthand: false,\n      inTaggedTemplateTag: false,\n      isStrict: oldScope.isStrict,\n      isAsmJs: oldScope.isAsmJs,\n      definitions: oldScope.definitions.createChild()\n    };\n    this.undefineVariable(\"this\");\n    this.enterPatterns(params, (ident, pattern) => {\n      this.defineVariable(ident);\n    });\n    fn();\n    this.scope = oldScope;\n  }\n\n  /**\n   * @param {boolean} hasThis true, when this is defined\n   * @param {any} params scope params\n   * @param {function(): void} fn inner function\n   * @returns {void}\n   */\n  inClassScope(hasThis, params, fn) {\n    const oldScope = this.scope;\n    this.scope = {\n      topLevelScope: oldScope.topLevelScope,\n      inTry: false,\n      inShorthand: false,\n      inTaggedTemplateTag: false,\n      isStrict: oldScope.isStrict,\n      isAsmJs: oldScope.isAsmJs,\n      definitions: oldScope.definitions.createChild()\n    };\n    if (hasThis) {\n      this.undefineVariable(\"this\");\n    }\n    this.enterPatterns(params, (ident, pattern) => {\n      this.defineVariable(ident);\n    });\n    fn();\n    this.scope = oldScope;\n  }\n\n  /**\n   * @param {boolean} hasThis true, when this is defined\n   * @param {any} params scope params\n   * @param {function(): void} fn inner function\n   * @returns {void}\n   */\n  inFunctionScope(hasThis, params, fn) {\n    const oldScope = this.scope;\n    this.scope = {\n      topLevelScope: oldScope.topLevelScope,\n      inTry: false,\n      inShorthand: false,\n      inTaggedTemplateTag: false,\n      isStrict: oldScope.isStrict,\n      isAsmJs: oldScope.isAsmJs,\n      definitions: oldScope.definitions.createChild()\n    };\n    if (hasThis) {\n      this.undefineVariable(\"this\");\n    }\n    this.enterPatterns(params, (ident, pattern) => {\n      this.defineVariable(ident);\n    });\n    fn();\n    this.scope = oldScope;\n  }\n\n  /**\n   * @param {function(): void} fn inner function\n   * @returns {void}\n   */\n  inBlockScope(fn) {\n    const oldScope = this.scope;\n    this.scope = {\n      topLevelScope: oldScope.topLevelScope,\n      inTry: oldScope.inTry,\n      inShorthand: false,\n      inTaggedTemplateTag: false,\n      isStrict: oldScope.isStrict,\n      isAsmJs: oldScope.isAsmJs,\n      definitions: oldScope.definitions.createChild()\n    };\n    fn();\n    this.scope = oldScope;\n  }\n\n  /**\n   * @param {Array<Directive | Statement | ModuleDeclaration>} statements statements\n   */\n  detectMode(statements) {\n    const isLiteral = statements.length >= 1 && statements[0].type === \"ExpressionStatement\" && statements[0].expression.type === \"Literal\";\n    if (isLiteral && /** @type {Literal} */\n    ( /** @type {ExpressionStatement} */statements[0].expression).value === \"use strict\") {\n      this.scope.isStrict = true;\n    }\n    if (isLiteral && /** @type {Literal} */\n    ( /** @type {ExpressionStatement} */statements[0].expression).value === \"use asm\") {\n      this.scope.isAsmJs = true;\n    }\n  }\n\n  /**\n   * @param {(string | Pattern | Property)[]} patterns patterns\n   * @param {OnIdent} onIdent on ident callback\n   */\n  enterPatterns(patterns, onIdent) {\n    for (const pattern of patterns) {\n      if (typeof pattern !== \"string\") {\n        this.enterPattern(pattern, onIdent);\n      } else if (pattern) {\n        onIdent(pattern);\n      }\n    }\n  }\n\n  /**\n   * @param {Pattern | Property} pattern pattern\n   * @param {OnIdent} onIdent on ident callback\n   */\n  enterPattern(pattern, onIdent) {\n    if (!pattern) return;\n    switch (pattern.type) {\n      case \"ArrayPattern\":\n        this.enterArrayPattern(pattern, onIdent);\n        break;\n      case \"AssignmentPattern\":\n        this.enterAssignmentPattern(pattern, onIdent);\n        break;\n      case \"Identifier\":\n        this.enterIdentifier(pattern, onIdent);\n        break;\n      case \"ObjectPattern\":\n        this.enterObjectPattern(pattern, onIdent);\n        break;\n      case \"RestElement\":\n        this.enterRestElement(pattern, onIdent);\n        break;\n      case \"Property\":\n        if (pattern.shorthand && pattern.value.type === \"Identifier\") {\n          this.scope.inShorthand = pattern.value.name;\n          this.enterIdentifier(pattern.value, onIdent);\n          this.scope.inShorthand = false;\n        } else {\n          this.enterPattern( /** @type {Identifier} */pattern.value, onIdent);\n        }\n        break;\n    }\n  }\n\n  /**\n   * @param {Identifier} pattern identifier pattern\n   * @param {OnIdent} onIdent callback\n   */\n  enterIdentifier(pattern, onIdent) {\n    if (!this.callHooksForName(this.hooks.pattern, pattern.name, pattern)) {\n      onIdent(pattern.name, pattern);\n    }\n  }\n\n  /**\n   * @param {ObjectPattern} pattern object pattern\n   * @param {OnIdent} onIdent callback\n   */\n  enterObjectPattern(pattern, onIdent) {\n    for (let propIndex = 0, len = pattern.properties.length; propIndex < len; propIndex++) {\n      const prop = pattern.properties[propIndex];\n      this.enterPattern(prop, onIdent);\n    }\n  }\n\n  /**\n   * @param {ArrayPattern} pattern object pattern\n   * @param {OnIdent} onIdent callback\n   */\n  enterArrayPattern(pattern, onIdent) {\n    for (let elementIndex = 0, len = pattern.elements.length; elementIndex < len; elementIndex++) {\n      const element = pattern.elements[elementIndex];\n      if (element) {\n        this.enterPattern(element, onIdent);\n      }\n    }\n  }\n\n  /**\n   * @param {RestElement} pattern object pattern\n   * @param {OnIdent} onIdent callback\n   */\n  enterRestElement(pattern, onIdent) {\n    this.enterPattern(pattern.argument, onIdent);\n  }\n\n  /**\n   * @param {AssignmentPattern} pattern object pattern\n   * @param {OnIdent} onIdent callback\n   */\n  enterAssignmentPattern(pattern, onIdent) {\n    this.enterPattern(pattern.left, onIdent);\n  }\n\n  /**\n   * @param {TODO} expression expression node\n   * @returns {BasicEvaluatedExpression} evaluation result\n   */\n  evaluateExpression(expression) {\n    try {\n      const hook = this.hooks.evaluate.get(expression.type);\n      if (hook !== undefined) {\n        const result = hook.call(expression);\n        if (result !== undefined && result !== null) {\n          result.setExpression(expression);\n          return result;\n        }\n      }\n    } catch (e) {\n      console.warn(e);\n      // ignore error\n    }\n    return new BasicEvaluatedExpression().setRange( /** @type {Range} */expression.range).setExpression(expression);\n  }\n\n  /**\n   * @param {Expression} expression expression\n   * @returns {string} parsed string\n   */\n  parseString(expression) {\n    switch (expression.type) {\n      case \"BinaryExpression\":\n        if (expression.operator === \"+\") {\n          return this.parseString(expression.left) + this.parseString(expression.right);\n        }\n        break;\n      case \"Literal\":\n        return expression.value + \"\";\n    }\n    throw new Error(expression.type + \" is not supported as parameter for require\");\n  }\n\n  /**\n   * @param {Expression} expression expression\n   * @returns {TODO} result\n   */\n  parseCalculatedString(expression) {\n    switch (expression.type) {\n      case \"BinaryExpression\":\n        if (expression.operator === \"+\") {\n          const left = this.parseCalculatedString(expression.left);\n          const right = this.parseCalculatedString(expression.right);\n          if (left.code) {\n            return {\n              range: left.range,\n              value: left.value,\n              code: true,\n              conditional: false\n            };\n          } else if (right.code) {\n            return {\n              range: [left.range[0], right.range ? right.range[1] : left.range[1]],\n              value: left.value + right.value,\n              code: true,\n              conditional: false\n            };\n          } else {\n            return {\n              range: [left.range[0], right.range[1]],\n              value: left.value + right.value,\n              code: false,\n              conditional: false\n            };\n          }\n        }\n        break;\n      case \"ConditionalExpression\":\n        {\n          const consequent = this.parseCalculatedString(expression.consequent);\n          const alternate = this.parseCalculatedString(expression.alternate);\n          const items = [];\n          if (consequent.conditional) {\n            items.push(...consequent.conditional);\n          } else if (!consequent.code) {\n            items.push(consequent);\n          } else {\n            break;\n          }\n          if (alternate.conditional) {\n            items.push(...alternate.conditional);\n          } else if (!alternate.code) {\n            items.push(alternate);\n          } else {\n            break;\n          }\n          return {\n            range: undefined,\n            value: \"\",\n            code: true,\n            conditional: items\n          };\n        }\n      case \"Literal\":\n        return {\n          range: expression.range,\n          value: expression.value + \"\",\n          code: false,\n          conditional: false\n        };\n    }\n    return {\n      range: undefined,\n      value: \"\",\n      code: true,\n      conditional: false\n    };\n  }\n\n  /**\n   * @param {string | Buffer | PreparsedAst} source the source to parse\n   * @param {ParserState} state the parser state\n   * @returns {ParserState} the parser state\n   */\n  parse(source, state) {\n    let ast;\n    let comments;\n    const semicolons = new Set();\n    if (source === null) {\n      throw new Error(\"source must not be null\");\n    }\n    if (Buffer.isBuffer(source)) {\n      source = source.toString(\"utf-8\");\n    }\n    if (typeof source === \"object\") {\n      ast = /** @type {Program} */source;\n      comments = source.comments;\n    } else {\n      comments = [];\n      ast = JavascriptParser._parse(source, {\n        sourceType: this.sourceType,\n        onComment: comments,\n        onInsertedSemicolon: pos => semicolons.add(pos)\n      });\n    }\n    const oldScope = this.scope;\n    const oldState = this.state;\n    const oldComments = this.comments;\n    const oldSemicolons = this.semicolons;\n    const oldStatementPath = this.statementPath;\n    const oldPrevStatement = this.prevStatement;\n    this.scope = {\n      topLevelScope: true,\n      inTry: false,\n      inShorthand: false,\n      inTaggedTemplateTag: false,\n      isStrict: false,\n      isAsmJs: false,\n      definitions: new StackedMap()\n    };\n    /** @type {ParserState} */\n    this.state = state;\n    this.comments = comments;\n    this.semicolons = semicolons;\n    this.statementPath = [];\n    this.prevStatement = undefined;\n    if (this.hooks.program.call(ast, comments) === undefined) {\n      this.destructuringAssignmentProperties = new WeakMap();\n      this.detectMode(ast.body);\n      this.preWalkStatements(ast.body);\n      this.prevStatement = undefined;\n      this.blockPreWalkStatements(ast.body);\n      this.prevStatement = undefined;\n      this.walkStatements(ast.body);\n      this.destructuringAssignmentProperties = undefined;\n    }\n    this.hooks.finish.call(ast, comments);\n    this.scope = oldScope;\n    /** @type {ParserState} */\n    this.state = oldState;\n    this.comments = oldComments;\n    this.semicolons = oldSemicolons;\n    this.statementPath = oldStatementPath;\n    this.prevStatement = oldPrevStatement;\n    return state;\n  }\n\n  /**\n   * @param {string} source source code\n   * @returns {BasicEvaluatedExpression} evaluation result\n   */\n  evaluate(source) {\n    const ast = JavascriptParser._parse(\"(\" + source + \")\", {\n      sourceType: this.sourceType,\n      locations: false\n    });\n    if (ast.body.length !== 1 || ast.body[0].type !== \"ExpressionStatement\") {\n      throw new Error(\"evaluate: Source is not a expression\");\n    }\n    return this.evaluateExpression(ast.body[0].expression);\n  }\n\n  /**\n   * @param {Expression | Declaration | PrivateIdentifier | null | undefined} expr an expression\n   * @param {number} commentsStartPos source position from which annotation comments are checked\n   * @returns {boolean} true, when the expression is pure\n   */\n  isPure(expr, commentsStartPos) {\n    if (!expr) return true;\n    const result = this.hooks.isPure.for(expr.type).call(expr, commentsStartPos);\n    if (typeof result === \"boolean\") return result;\n    switch (expr.type) {\n      // TODO handle more cases\n      case \"ClassDeclaration\":\n      case \"ClassExpression\":\n        {\n          if (expr.body.type !== \"ClassBody\") return false;\n          if (expr.superClass && !this.isPure(expr.superClass, /** @type {Range} */expr.range[0])) {\n            return false;\n          }\n          const items = /** @type {TODO[]} */\n          expr.body.body;\n          return items.every(item => {\n            if (item.computed && item.key && !this.isPure(item.key, item.range[0])) {\n              return false;\n            }\n            if (item.static && item.value && !this.isPure(item.value, item.key ? item.key.range[1] : item.range[0])) {\n              return false;\n            }\n            if (item.type === \"StaticBlock\") {\n              return false;\n            }\n            if (expr.superClass && item.type === \"MethodDefinition\" && item.kind === \"constructor\") {\n              return false;\n            }\n            return true;\n          });\n        }\n      case \"FunctionDeclaration\":\n      case \"FunctionExpression\":\n      case \"ArrowFunctionExpression\":\n      case \"ThisExpression\":\n      case \"Literal\":\n      case \"TemplateLiteral\":\n      case \"Identifier\":\n      case \"PrivateIdentifier\":\n        return true;\n      case \"VariableDeclaration\":\n        return expr.declarations.every(decl => this.isPure(decl.init, /** @type {Range} */decl.range[0]));\n      case \"ConditionalExpression\":\n        return this.isPure(expr.test, commentsStartPos) && this.isPure(expr.consequent, /** @type {Range} */expr.test.range[1]) && this.isPure(expr.alternate, /** @type {Range} */expr.consequent.range[1]);\n      case \"LogicalExpression\":\n        return this.isPure(expr.left, commentsStartPos) && this.isPure(expr.right, /** @type {Range} */expr.left.range[1]);\n      case \"SequenceExpression\":\n        return expr.expressions.every(expr => {\n          const pureFlag = this.isPure(expr, commentsStartPos);\n          commentsStartPos = /** @type {Range} */expr.range[1];\n          return pureFlag;\n        });\n      case \"CallExpression\":\n        {\n          const pureFlag = /** @type {Range} */expr.range[0] - commentsStartPos > 12 && this.getComments([commentsStartPos, /** @type {Range} */expr.range[0]]).some(comment => comment.type === \"Block\" && /^\\s*(#|@)__PURE__\\s*$/.test(comment.value));\n          if (!pureFlag) return false;\n          commentsStartPos = /** @type {Range} */expr.callee.range[1];\n          return expr.arguments.every(arg => {\n            if (arg.type === \"SpreadElement\") return false;\n            const pureFlag = this.isPure(arg, commentsStartPos);\n            commentsStartPos = /** @type {Range} */arg.range[1];\n            return pureFlag;\n          });\n        }\n    }\n    const evaluated = this.evaluateExpression(expr);\n    return !evaluated.couldHaveSideEffects();\n  }\n\n  /**\n   * @param {Range} range range\n   * @returns {Comment[]} comments in the range\n   */\n  getComments(range) {\n    const [rangeStart, rangeEnd] = range;\n    /**\n     * @param {Comment} comment comment\n     * @param {number} needle needle\n     * @returns {number} compared\n     */\n    const compare = (comment, needle) => /** @type {Range} */comment.range[0] - needle;\n    const comments = /** @type {Comment[]} */this.comments;\n    let idx = binarySearchBounds.ge(comments, rangeStart, compare);\n    /** @type {Comment[]} */\n    let commentsInRange = [];\n    while (comments[idx] && /** @type {Range} */comments[idx].range[1] <= rangeEnd) {\n      commentsInRange.push(comments[idx]);\n      idx++;\n    }\n    return commentsInRange;\n  }\n\n  /**\n   * @param {number} pos source code position\n   * @returns {boolean} true when a semicolon has been inserted before this position, false if not\n   */\n  isAsiPosition(pos) {\n    const currentStatement = this.statementPath[this.statementPath.length - 1];\n    if (currentStatement === undefined) throw new Error(\"Not in statement\");\n    return (\n      // Either asking directly for the end position of the current statement\n      currentStatement.range[1] === pos && /** @type {Set<number>} */this.semicolons.has(pos) ||\n      // Or asking for the start position of the current statement,\n      // here we have to check multiple things\n      currentStatement.range[0] === pos &&\n      // is there a previous statement which might be relevant?\n      this.prevStatement !== undefined &&\n      // is the end position of the previous statement an ASI position?\n      /** @type {Set<number>} */\n      this.semicolons.has(this.prevStatement.range[1])\n    );\n  }\n\n  /**\n   * @param {number} pos source code position\n   * @returns {void}\n   */\n  unsetAsiPosition(pos) {\n    /** @type {Set<number>} */this.semicolons.delete(pos);\n  }\n\n  /**\n   * @param {Expression} expr expression\n   * @returns {boolean} true, when the expression is a statement level expression\n   */\n  isStatementLevelExpression(expr) {\n    const currentStatement = this.statementPath[this.statementPath.length - 1];\n    return expr === currentStatement || currentStatement.type === \"ExpressionStatement\" && currentStatement.expression === expr;\n  }\n\n  /**\n   * @param {string} name name\n   * @param {TODO} tag tag info\n   * @returns {TODO} tag data\n   */\n  getTagData(name, tag) {\n    const info = this.scope.definitions.get(name);\n    if (info instanceof VariableInfo) {\n      let tagInfo = info.tagInfo;\n      while (tagInfo !== undefined) {\n        if (tagInfo.tag === tag) return tagInfo.data;\n        tagInfo = tagInfo.next;\n      }\n    }\n  }\n\n  /**\n   * @param {string} name name\n   * @param {TODO} tag tag info\n   * @param {TODO=} data data\n   */\n  tagVariable(name, tag, data) {\n    const oldInfo = this.scope.definitions.get(name);\n    /** @type {VariableInfo} */\n    let newInfo;\n    if (oldInfo === undefined) {\n      newInfo = new VariableInfo(this.scope, name, {\n        tag,\n        data,\n        next: undefined\n      });\n    } else if (oldInfo instanceof VariableInfo) {\n      newInfo = new VariableInfo(oldInfo.declaredScope, oldInfo.freeName, {\n        tag,\n        data,\n        next: oldInfo.tagInfo\n      });\n    } else {\n      newInfo = new VariableInfo(oldInfo, true, {\n        tag,\n        data,\n        next: undefined\n      });\n    }\n    this.scope.definitions.set(name, newInfo);\n  }\n\n  /**\n   * @param {string} name variable name\n   */\n  defineVariable(name) {\n    const oldInfo = this.scope.definitions.get(name);\n    // Don't redefine variable in same scope to keep existing tags\n    if (oldInfo instanceof VariableInfo && oldInfo.declaredScope === this.scope) return;\n    this.scope.definitions.set(name, this.scope);\n  }\n\n  /**\n   * @param {string} name variable name\n   */\n  undefineVariable(name) {\n    this.scope.definitions.delete(name);\n  }\n\n  /**\n   * @param {string} name variable name\n   * @returns {boolean} true, when variable is defined\n   */\n  isVariableDefined(name) {\n    const info = this.scope.definitions.get(name);\n    if (info === undefined) return false;\n    if (info instanceof VariableInfo) {\n      return info.freeName === true;\n    }\n    return true;\n  }\n\n  /**\n   * @param {string} name variable name\n   * @returns {string | ExportedVariableInfo} info for this variable\n   */\n  getVariableInfo(name) {\n    const value = this.scope.definitions.get(name);\n    if (value === undefined) {\n      return name;\n    } else {\n      return value;\n    }\n  }\n\n  /**\n   * @param {string} name variable name\n   * @param {string | ExportedVariableInfo} variableInfo new info for this variable\n   * @returns {void}\n   */\n  setVariable(name, variableInfo) {\n    if (typeof variableInfo === \"string\") {\n      if (variableInfo === name) {\n        this.scope.definitions.delete(name);\n      } else {\n        this.scope.definitions.set(name, new VariableInfo(this.scope, variableInfo, undefined));\n      }\n    } else {\n      this.scope.definitions.set(name, variableInfo);\n    }\n  }\n\n  /**\n   * @param {TagInfo} tagInfo tag info\n   * @returns {VariableInfo} variable info\n   */\n  evaluatedVariable(tagInfo) {\n    return new VariableInfo(this.scope, undefined, tagInfo);\n  }\n\n  /**\n   * @param {Range} range range of the comment\n   * @returns {TODO} TODO\n   */\n  parseCommentOptions(range) {\n    const comments = this.getComments(range);\n    if (comments.length === 0) {\n      return EMPTY_COMMENT_OPTIONS;\n    }\n    let options = {};\n    /** @type {unknown[]} */\n    let errors = [];\n    for (const comment of comments) {\n      const {\n        value\n      } = comment;\n      if (value && webpackCommentRegExp.test(value)) {\n        // try compile only if webpack options comment is present\n        try {\n          for (let [key, val] of Object.entries(vm.runInContext(`(function(){return {${value}};})()`, this.magicCommentContext))) {\n            if (typeof val === \"object\" && val !== null) {\n              if (val.constructor.name === \"RegExp\") val = new RegExp(val);else val = JSON.parse(JSON.stringify(val));\n            }\n            options[key] = val;\n          }\n        } catch (e) {\n          const newErr = new Error(String(e.message));\n          newErr.stack = String(e.stack);\n          Object.assign(newErr, {\n            comment\n          });\n          errors.push(newErr);\n        }\n      }\n    }\n    return {\n      options,\n      errors\n    };\n  }\n\n  /**\n   * @param {MemberExpression} expression a member expression\n   * @returns {{ members: string[], object: Expression | Super, membersOptionals: boolean[], memberRanges: Range[] }} member names (reverse order) and remaining object\n   */\n  extractMemberExpressionChain(expression) {\n    /** @type {AnyNode} */\n    let expr = expression;\n    const members = [];\n    const membersOptionals = [];\n    const memberRanges = [];\n    while (expr.type === \"MemberExpression\") {\n      if (expr.computed) {\n        if (expr.property.type !== \"Literal\") break;\n        members.push(`${expr.property.value}`); // the literal\n        memberRanges.push( /** @type {Range} */expr.object.range); // the range of the expression fragment before the literal\n      } else {\n        if (expr.property.type !== \"Identifier\") break;\n        members.push(expr.property.name); // the identifier\n        memberRanges.push( /** @type {Range} */expr.object.range); // the range of the expression fragment before the identifier\n      }\n      membersOptionals.push(expr.optional);\n      expr = expr.object;\n    }\n    return {\n      members,\n      membersOptionals,\n      memberRanges,\n      object: expr\n    };\n  }\n\n  /**\n   * @param {string} varName variable name\n   * @returns {{name: string, info: VariableInfo | string} | undefined} name of the free variable and variable info for that\n   */\n  getFreeInfoFromVariable(varName) {\n    const info = this.getVariableInfo(varName);\n    let name;\n    if (info instanceof VariableInfo) {\n      name = info.freeName;\n      if (typeof name !== \"string\") return undefined;\n    } else if (typeof info !== \"string\") {\n      return undefined;\n    } else {\n      name = info;\n    }\n    return {\n      info,\n      name\n    };\n  }\n\n  /** @typedef {{ type: \"call\", call: CallExpression, calleeName: string, rootInfo: string | VariableInfo, getCalleeMembers: () => string[], name: string, getMembers: () => string[], getMembersOptionals: () => boolean[], getMemberRanges: () => Range[]}} CallExpressionInfo */\n  /** @typedef {{ type: \"expression\", rootInfo: string | VariableInfo, name: string, getMembers: () => string[], getMembersOptionals: () => boolean[], getMemberRanges: () => Range[]}} ExpressionExpressionInfo */\n\n  /**\n   * @param {MemberExpression} expression a member expression\n   * @param {number} allowedTypes which types should be returned, presented in bit mask\n   * @returns {CallExpressionInfo | ExpressionExpressionInfo | undefined} expression info\n   */\n  getMemberExpressionInfo(expression, allowedTypes) {\n    const {\n      object,\n      members,\n      membersOptionals,\n      memberRanges\n    } = this.extractMemberExpressionChain(expression);\n    switch (object.type) {\n      case \"CallExpression\":\n        {\n          if ((allowedTypes & ALLOWED_MEMBER_TYPES_CALL_EXPRESSION) === 0) return undefined;\n          let callee = object.callee;\n          let rootMembers = EMPTY_ARRAY;\n          if (callee.type === \"MemberExpression\") {\n            ({\n              object: callee,\n              members: rootMembers\n            } = this.extractMemberExpressionChain(callee));\n          }\n          const rootName = getRootName(callee);\n          if (!rootName) return undefined;\n          const result = this.getFreeInfoFromVariable(rootName);\n          if (!result) return undefined;\n          const {\n            info: rootInfo,\n            name: resolvedRoot\n          } = result;\n          const calleeName = objectAndMembersToName(resolvedRoot, rootMembers);\n          return {\n            type: \"call\",\n            call: object,\n            calleeName,\n            rootInfo,\n            getCalleeMembers: memoize(() => rootMembers.reverse()),\n            name: objectAndMembersToName(`${calleeName}()`, members),\n            getMembers: memoize(() => members.reverse()),\n            getMembersOptionals: memoize(() => membersOptionals.reverse()),\n            getMemberRanges: memoize(() => memberRanges.reverse())\n          };\n        }\n      case \"Identifier\":\n      case \"MetaProperty\":\n      case \"ThisExpression\":\n        {\n          if ((allowedTypes & ALLOWED_MEMBER_TYPES_EXPRESSION) === 0) return undefined;\n          const rootName = getRootName(object);\n          if (!rootName) return undefined;\n          const result = this.getFreeInfoFromVariable(rootName);\n          if (!result) return undefined;\n          const {\n            info: rootInfo,\n            name: resolvedRoot\n          } = result;\n          return {\n            type: \"expression\",\n            name: objectAndMembersToName(resolvedRoot, members),\n            rootInfo,\n            getMembers: memoize(() => members.reverse()),\n            getMembersOptionals: memoize(() => membersOptionals.reverse()),\n            getMemberRanges: memoize(() => memberRanges.reverse())\n          };\n        }\n    }\n  }\n\n  /**\n   * @param {MemberExpression} expression an expression\n   * @returns {{ name: string, rootInfo: ExportedVariableInfo, getMembers: () => string[]} | undefined} name info\n   */\n  getNameForExpression(expression) {\n    return this.getMemberExpressionInfo(expression, ALLOWED_MEMBER_TYPES_EXPRESSION);\n  }\n\n  /**\n   * @param {string} code source code\n   * @param {ParseOptions} options parsing options\n   * @returns {Program} parsed ast\n   */\n  static _parse(code, options) {\n    const type = options ? options.sourceType : \"module\";\n    /** @type {AcornOptions} */\n    const parserOptions = {\n      ...defaultParserOptions,\n      allowReturnOutsideFunction: type === \"script\",\n      ...options,\n      sourceType: type === \"auto\" ? \"module\" : type\n    };\n\n    /** @type {AnyNode | undefined} */\n    let ast;\n    let error;\n    let threw = false;\n    try {\n      ast = /** @type {AnyNode} */parser.parse(code, parserOptions);\n    } catch (e) {\n      error = e;\n      threw = true;\n    }\n    if (threw && type === \"auto\") {\n      parserOptions.sourceType = \"script\";\n      if (!(\"allowReturnOutsideFunction\" in options)) {\n        parserOptions.allowReturnOutsideFunction = true;\n      }\n      if (Array.isArray(parserOptions.onComment)) {\n        parserOptions.onComment.length = 0;\n      }\n      try {\n        ast = /** @type {AnyNode} */parser.parse(code, parserOptions);\n        threw = false;\n      } catch (e) {\n        // we use the error from first parse try\n        // so nothing to do here\n      }\n    }\n    if (threw) {\n      throw error;\n    }\n    return /** @type {Program} */ast;\n  }\n}\nmodule.exports = JavascriptParser;\nmodule.exports.ALLOWED_MEMBER_TYPES_ALL = ALLOWED_MEMBER_TYPES_ALL;\nmodule.exports.ALLOWED_MEMBER_TYPES_EXPRESSION = ALLOWED_MEMBER_TYPES_EXPRESSION;\nmodule.exports.ALLOWED_MEMBER_TYPES_CALL_EXPRESSION = ALLOWED_MEMBER_TYPES_CALL_EXPRESSION;","map":{"version":3,"names":["Parser","AcornParser","require","importAssertions","SyncBailHook","HookMap","vm","StackedMap","binarySearchBounds","memoize","BasicEvaluatedExpression","EMPTY_ARRAY","ALLOWED_MEMBER_TYPES_CALL_EXPRESSION","ALLOWED_MEMBER_TYPES_EXPRESSION","ALLOWED_MEMBER_TYPES_ALL","parser","extend","VariableInfo","constructor","declaredScope","freeName","tagInfo","joinRanges","startRange","endRange","objectAndMembersToName","object","membersReversed","name","i","length","getRootName","expression","type","meta","property","undefined","defaultParserOptions","ranges","locations","ecmaVersion","sourceType","allowHashBang","onComment","webpackCommentRegExp","RegExp","EMPTY_COMMENT_OPTIONS","options","errors","JavascriptParser","hooks","Object","freeze","evaluateTypeof","evaluate","evaluateIdentifier","evaluateDefinedIdentifier","evaluateNewExpression","evaluateCallExpression","evaluateCallExpressionMember","isPure","preStatement","blockPreStatement","statement","statementIf","classExtendsExpression","classBodyElement","classBodyValue","label","import","importSpecifier","export","exportImport","exportDeclaration","exportExpression","exportSpecifier","exportImportSpecifier","preDeclarator","declarator","varDeclaration","varDeclarationLet","varDeclarationConst","varDeclarationVar","pattern","canRename","rename","assign","assignMemberChain","typeof","importCall","topLevelAwait","call","callMemberChain","memberChainOfCallMemberChain","callMemberChainOfCallMemberChain","optionalChaining","new","binaryExpression","expressionMemberChain","unhandledExpressionMemberChain","expressionConditionalOperator","expressionLogicalOperator","program","finish","scope","state","comments","semicolons","statementPath","prevStatement","destructuringAssignmentProperties","currentTagData","magicCommentContext","createContext","codeGeneration","strings","wasm","_initializeEvaluating","for","tap","_expr","expr","value","setNumber","setRange","range","setBigInt","setString","setBoolean","setNull","setRegExp","callee","callHooksForName","arguments","getVariableInfo","regExp","flags","arg1","evaluatedRegExp","evaluateExpression","asString","arg2","evaluatedFlags","isUndefined","isValidRegExpFlags","left","returnRight","allowedRight","operator","leftAsBool","asBool","leftAsNullish","asNullish","right","couldHaveSideEffects","setSideEffects","setTruthy","setFalsy","valueAsExpression","sideEffects","handleConstOperation","operandHandler","isCompileTimeValue","result","asCompileTimeValue","isAlwaysDifferent","a","b","handleTemplateStringCompare","res","eql","getPrefix","parts","p","v","getSuffix","leftPrefix","rightPrefix","leftSuffix","rightSuffix","lenPrefix","Math","min","lenSuffix","prefixMismatch","slice","suffixMismatch","handleStrictEqualityComparison","leftConst","rightConst","isArray","isTemplateString","leftPrimitive","isPrimitiveType","rightPrimitive","handleAbstractEqualityComparison","isString","string","isNumber","number","isWrapped","prefix","setWrapped","postfix","wrappedInnerExpressions","isBigInt","bigint","concat","l","r","argument","callHooksForExpression","arg","isUnknown","isBoolean","isConstArray","isRegExp","isNull","bool","setUndefined","tapEvaluateWithVariableInfo","exprType","getInfo","cachedExpression","cachedInfo","info","callHooksForInfoWithFallback","hook","get","stage","setIdentifier","rootInfo","getMembers","getMembersOptionals","getMemberRanges","metaProperty","getMemberExpressionInfo","computed","param","arg1Eval","arg1Value","arg2Eval","indexOf","arg2Value","replace","forEach","fn","str","getSimplifiedTemplateResult","kind","templateLiteralExpr","quasis","quasiExpr","quasi","prevExpr","expressions","exprAsString","setExpression","push","part","_node","node","setTemplateString","tag","isIdentifier","identifier","stringSuffix","hasUnknownParams","innerExpressions","argExpr","newString","newRange","inner","reverse","split","setArray","condition","test","conditionValue","consequent","alternate","isConditional","setOptions","addOptions","items","elements","map","element","every","Boolean","setItems","optionalExpressionsStack","next","optional","pop","evaluated","destructuringAssignmentPropertiesFor","getRenameIdentifier","walkClass","classy","superClass","walkExpression","body","scopeParams","id","inClassScope","classElement","key","wasTopLevel","topLevelScope","walkBlockStatement","preWalkStatements","statements","index","len","preWalkStatement","blockPreWalkStatements","blockPreWalkStatement","walkStatements","walkStatement","preWalkBlockStatement","preWalkDoWhileStatement","preWalkForInStatement","preWalkForOfStatement","preWalkForStatement","preWalkFunctionDeclaration","preWalkIfStatement","preWalkLabeledStatement","preWalkSwitchStatement","preWalkTryStatement","preWalkVariableDeclaration","preWalkWhileStatement","preWalkWithStatement","blockPreWalkImportDeclaration","blockPreWalkExportAllDeclaration","blockPreWalkExportDefaultDeclaration","blockPreWalkExportNamedDeclaration","blockPreWalkVariableDeclaration","blockPreWalkClassDeclaration","blockPreWalkExpressionStatement","walkClassDeclaration","walkDoWhileStatement","walkExportDefaultDeclaration","walkExportNamedDeclaration","walkExpressionStatement","walkForInStatement","walkForOfStatement","walkForStatement","walkFunctionDeclaration","walkIfStatement","walkLabeledStatement","walkReturnStatement","walkSwitchStatement","walkThrowStatement","walkTryStatement","walkVariableDeclaration","walkWhileStatement","walkWithStatement","walkNestedStatement","inBlockScope","prev","preWalkSwitchCases","cases","discriminant","walkSwitchCases","walkTerminatingStatement","block","handler","preWalkCatchClause","finalizer","inTry","walkCatchClause","init","update","walkPattern","await","defineVariable","inFunctionScope","params","detectMode","preWalkAssignmentExpression","keys","_preWalkObjectPattern","has","set","delete","add","source","specifier","specifiers","local","imported","enterDeclaration","declaration","onIdent","declarations","enterPattern","def","specifierIndex","exported","_preWalkVariableDeclaration","hookMap","preWalkVariableDeclarator","decl","objectPattern","ids","Set","properties","renameIdentifier","setVariable","switchCases","switchCase","catchClause","ident","walkArrayPattern","walkAssignmentPattern","walkMemberExpression","walkObjectPattern","walkRestElement","prop","walkExpressions","walkArrayExpression","walkArrowFunctionExpression","walkAssignmentExpression","walkAwaitExpression","walkBinaryExpression","walkCallExpression","walkChainExpression","walkClassExpression","walkConditionalExpression","walkFunctionExpression","walkIdentifier","walkImportExpression","walkLogicalExpression","walkMetaProperty","walkNewExpression","walkObjectExpression","walkSequenceExpression","walkSpreadElement","walkTaggedTemplateExpression","walkTemplateLiteral","walkThisExpression","walkUnaryExpression","walkUpdateExpression","walkYieldExpression","propIndex","walkProperty","shorthand","inShorthand","currentStatement","old","walkLeftRightExpression","callHooksForInfo","endsWith","exprName","inTaggedTemplateTag","_walkIIFE","functionExpression","currentThis","getVarInfo","argOrThis","arrow","renameThis","varInfoForArgs","filter","idx","varInfo","isSimpleFunction","exprInfo","getCalleeMembers","result1","result2","members","membersOptionals","memberRanges","walkMemberExpressionWithExpressionName","onUnhandled","args","callHooksForExpressionWithFallback","fallback","defined","callHooksForNameWithFallback","data","inScope","oldScope","isStrict","isAsmJs","definitions","createChild","undefineVariable","enterPatterns","hasThis","isLiteral","patterns","enterArrayPattern","enterAssignmentPattern","enterIdentifier","enterObjectPattern","enterRestElement","elementIndex","e","console","warn","parseString","Error","parseCalculatedString","code","conditional","parse","ast","Buffer","isBuffer","toString","_parse","onInsertedSemicolon","pos","oldState","oldComments","oldSemicolons","oldStatementPath","oldPrevStatement","WeakMap","commentsStartPos","item","static","pureFlag","getComments","some","comment","rangeStart","rangeEnd","compare","needle","ge","commentsInRange","isAsiPosition","unsetAsiPosition","isStatementLevelExpression","getTagData","tagVariable","oldInfo","newInfo","isVariableDefined","variableInfo","evaluatedVariable","parseCommentOptions","val","entries","runInContext","JSON","stringify","newErr","String","message","stack","extractMemberExpressionChain","getFreeInfoFromVariable","varName","allowedTypes","rootMembers","rootName","resolvedRoot","calleeName","getNameForExpression","parserOptions","allowReturnOutsideFunction","error","threw","Array","module","exports"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/javascript/JavascriptParser.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { Parser: AcornParser } = require(\"acorn\");\nconst { importAssertions } = require(\"acorn-import-assertions\");\nconst { SyncBailHook, HookMap } = require(\"tapable\");\nconst vm = require(\"vm\");\nconst Parser = require(\"../Parser\");\nconst StackedMap = require(\"../util/StackedMap\");\nconst binarySearchBounds = require(\"../util/binarySearchBounds\");\nconst memoize = require(\"../util/memoize\");\nconst BasicEvaluatedExpression = require(\"./BasicEvaluatedExpression\");\n\n/** @typedef {import(\"acorn\").Options} AcornOptions */\n/** @typedef {import(\"estree\").AssignmentExpression} AssignmentExpression */\n/** @typedef {import(\"estree\").BinaryExpression} BinaryExpression */\n/** @typedef {import(\"estree\").BlockStatement} BlockStatement */\n/** @typedef {import(\"estree\").SequenceExpression} SequenceExpression */\n/** @typedef {import(\"estree\").CallExpression} CallExpression */\n/** @typedef {import(\"estree\").BaseCallExpression} BaseCallExpression */\n/** @typedef {import(\"estree\").StaticBlock} StaticBlock */\n/** @typedef {import(\"estree\").ImportExpression} ImportExpression */\n/** @typedef {import(\"estree\").ClassDeclaration} ClassDeclaration */\n/** @typedef {import(\"estree\").ForStatement} ForStatement */\n/** @typedef {import(\"estree\").SwitchStatement} SwitchStatement */\n/** @typedef {import(\"estree\").ExportNamedDeclaration} ExportNamedDeclaration */\n/** @typedef {import(\"estree\").ClassExpression} ClassExpression */\n/** @typedef {import(\"estree\").Comment} Comment */\n/** @typedef {import(\"estree\").ConditionalExpression} ConditionalExpression */\n/** @typedef {import(\"estree\").Declaration} Declaration */\n/** @typedef {import(\"estree\").PrivateIdentifier} PrivateIdentifier */\n/** @typedef {import(\"estree\").PropertyDefinition} PropertyDefinition */\n/** @typedef {import(\"estree\").Expression} Expression */\n/** @typedef {import(\"estree\").Identifier} Identifier */\n/** @typedef {import(\"estree\").VariableDeclaration} VariableDeclaration */\n/** @typedef {import(\"estree\").IfStatement} IfStatement */\n/** @typedef {import(\"estree\").LabeledStatement} LabeledStatement */\n/** @typedef {import(\"estree\").Literal} Literal */\n/** @typedef {import(\"estree\").LogicalExpression} LogicalExpression */\n/** @typedef {import(\"estree\").ChainExpression} ChainExpression */\n/** @typedef {import(\"estree\").MemberExpression} MemberExpression */\n/** @typedef {import(\"estree\").YieldExpression} YieldExpression */\n/** @typedef {import(\"estree\").MetaProperty} MetaProperty */\n/** @typedef {import(\"estree\").Property} Property */\n/** @typedef {import(\"estree\").AssignmentPattern} AssignmentPattern */\n/** @typedef {import(\"estree\").ChainElement} ChainElement */\n/** @typedef {import(\"estree\").Pattern} Pattern */\n/** @typedef {import(\"estree\").UpdateExpression} UpdateExpression */\n/** @typedef {import(\"estree\").ObjectExpression} ObjectExpression */\n/** @typedef {import(\"estree\").UnaryExpression} UnaryExpression */\n/** @typedef {import(\"estree\").ArrayExpression} ArrayExpression */\n/** @typedef {import(\"estree\").ArrayPattern} ArrayPattern */\n/** @typedef {import(\"estree\").AwaitExpression} AwaitExpression */\n/** @typedef {import(\"estree\").ThisExpression} ThisExpression */\n/** @typedef {import(\"estree\").RestElement} RestElement */\n/** @typedef {import(\"estree\").ObjectPattern} ObjectPattern */\n/** @typedef {import(\"estree\").SwitchCase} SwitchCase */\n/** @typedef {import(\"estree\").CatchClause} CatchClause */\n/** @typedef {import(\"estree\").VariableDeclarator} VariableDeclarator */\n/** @typedef {import(\"estree\").ForInStatement} ForInStatement */\n/** @typedef {import(\"estree\").ForOfStatement} ForOfStatement */\n/** @typedef {import(\"estree\").ReturnStatement} ReturnStatement */\n/** @typedef {import(\"estree\").WithStatement} WithStatement */\n/** @typedef {import(\"estree\").ThrowStatement} ThrowStatement */\n/** @typedef {import(\"estree\").MethodDefinition} MethodDefinition */\n/** @typedef {import(\"estree\").ModuleDeclaration} ModuleDeclaration */\n/** @typedef {import(\"estree\").NewExpression} NewExpression */\n/** @typedef {import(\"estree\").SpreadElement} SpreadElement */\n/** @typedef {import(\"estree\").FunctionExpression} FunctionExpression */\n/** @typedef {import(\"estree\").WhileStatement} WhileStatement */\n/** @typedef {import(\"estree\").ArrowFunctionExpression} ArrowFunctionExpression */\n/** @typedef {import(\"estree\").ExpressionStatement} ExpressionStatement */\n/** @typedef {import(\"estree\").FunctionDeclaration} FunctionDeclaration */\n/** @typedef {import(\"estree\").DoWhileStatement} DoWhileStatement */\n/** @typedef {import(\"estree\").TryStatement} TryStatement */\n/** @typedef {import(\"estree\").Node} AnyNode */\n/** @typedef {import(\"estree\").Program} Program */\n/** @typedef {import(\"estree\").Directive} Directive */\n/** @typedef {import(\"estree\").Statement} Statement */\n/** @typedef {import(\"estree\").ImportDeclaration} ImportDeclaration */\n/** @typedef {import(\"estree\").ExportDefaultDeclaration} ExportDefaultDeclaration */\n/** @typedef {import(\"estree\").ExportAllDeclaration} ExportAllDeclaration */\n/** @typedef {import(\"estree\").Super} Super */\n/** @typedef {import(\"estree\").TaggedTemplateExpression} TaggedTemplateExpression */\n/** @typedef {import(\"estree\").TemplateLiteral} TemplateLiteral */\n/** @typedef {import(\"estree\").AssignmentProperty} AssignmentProperty */\n/** @typedef {Record<string, any>} Attributes */\n/**\n * @template T\n * @typedef {import(\"tapable\").AsArray<T>} AsArray<T>\n */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n/** @typedef {{declaredScope: ScopeInfo, freeName: string | true, tagInfo: TagInfo | undefined}} VariableInfoInterface */\n/** @typedef {{ name: string | VariableInfo, rootInfo: string | VariableInfo, getMembers: () => string[], getMembersOptionals: () => boolean[], getMemberRanges: () => Range[] }} GetInfoResult */\n/** @typedef {Statement | ModuleDeclaration | Expression} StatementPathItem */\n/** @typedef {TODO} OnIdent */\n\n/** @type {string[]} */\nconst EMPTY_ARRAY = [];\nconst ALLOWED_MEMBER_TYPES_CALL_EXPRESSION = 0b01;\nconst ALLOWED_MEMBER_TYPES_EXPRESSION = 0b10;\nconst ALLOWED_MEMBER_TYPES_ALL = 0b11;\n\n// Syntax: https://developer.mozilla.org/en/SpiderMonkey/Parser_API\n\nconst parser = AcornParser.extend(importAssertions);\n\nclass VariableInfo {\n\t/**\n\t * @param {ScopeInfo} declaredScope scope in which the variable is declared\n\t * @param {string | true | undefined} freeName which free name the variable aliases, or true when none\n\t * @param {TagInfo | undefined} tagInfo info about tags\n\t */\n\tconstructor(declaredScope, freeName, tagInfo) {\n\t\tthis.declaredScope = declaredScope;\n\t\tthis.freeName = freeName;\n\t\tthis.tagInfo = tagInfo;\n\t}\n}\n\n/** @typedef {string | ScopeInfo | VariableInfo} ExportedVariableInfo */\n/** @typedef {Literal | string | null | undefined} ImportSource */\n/** @typedef {Omit<AcornOptions, \"sourceType\" | \"ecmaVersion\"> & { sourceType: \"module\" | \"script\" | \"auto\", ecmaVersion?: AcornOptions[\"ecmaVersion\"] }} ParseOptions */\n\n/**\n * @typedef {Object} TagInfo\n * @property {any} tag\n * @property {any} data\n * @property {TagInfo | undefined} next\n */\n\n/**\n * @typedef {Object} ScopeInfo\n * @property {StackedMap<string, VariableInfo | ScopeInfo>} definitions\n * @property {boolean | \"arrow\"} topLevelScope\n * @property {boolean | string} inShorthand\n * @property {boolean} inTaggedTemplateTag\n * @property {boolean} inTry\n * @property {boolean} isStrict\n * @property {boolean} isAsmJs\n */\n\n/** @typedef {[number, number]} Range */\n\n/**\n * Helper function for joining two ranges into a single range. This is useful\n * when working with AST nodes, as it allows you to combine the ranges of child nodes\n * to create the range of the _parent node_.\n *\n * @param {[number, number]} startRange start range to join\n * @param {[number, number]} endRange end range to join\n * @returns {[number, number]} joined range\n *\n * @example\n * ```js\n * \tconst startRange = [0, 5];\n * \tconst endRange = [10, 15];\n * \tconst joinedRange = joinRanges(startRange, endRange);\n * \tconsole.log(joinedRange); // [0, 15]\n * ```\n *\n */\nconst joinRanges = (startRange, endRange) => {\n\tif (!endRange) return startRange;\n\tif (!startRange) return endRange;\n\treturn [startRange[0], endRange[1]];\n};\n\n/**\n * Helper function used to generate a string representation of a\n * [member expression](https://github.com/estree/estree/blob/master/es5.md#memberexpression).\n *\n * @param {string} object object to name\n * @param {string[]} membersReversed reversed list of members\n * @returns {string} member expression as a string\n * @example\n * ```js\n * const membersReversed = [\"property1\", \"property2\", \"property3\"]; // Members parsed from the AST\n * const name = objectAndMembersToName(\"myObject\", membersReversed);\n *\n * console.log(name); // \"myObject.property1.property2.property3\"\n * ```\n *\n */\nconst objectAndMembersToName = (object, membersReversed) => {\n\tlet name = object;\n\tfor (let i = membersReversed.length - 1; i >= 0; i--) {\n\t\tname = name + \".\" + membersReversed[i];\n\t}\n\treturn name;\n};\n\n/**\n * Grabs the name of a given expression and returns it as a string or undefined. Has particular\n * handling for [Identifiers](https://github.com/estree/estree/blob/master/es5.md#identifier),\n * [ThisExpressions](https://github.com/estree/estree/blob/master/es5.md#identifier), and\n * [MetaProperties](https://github.com/estree/estree/blob/master/es2015.md#metaproperty) which is\n * specifically for handling the `new.target` meta property.\n *\n * @param {Expression | Super} expression expression\n * @returns {string | \"this\" | undefined} name or variable info\n */\nconst getRootName = expression => {\n\tswitch (expression.type) {\n\t\tcase \"Identifier\":\n\t\t\treturn expression.name;\n\t\tcase \"ThisExpression\":\n\t\t\treturn \"this\";\n\t\tcase \"MetaProperty\":\n\t\t\treturn `${expression.meta.name}.${expression.property.name}`;\n\t\tdefault:\n\t\t\treturn undefined;\n\t}\n};\n\n/** @type {AcornOptions} */\nconst defaultParserOptions = {\n\tranges: true,\n\tlocations: true,\n\tecmaVersion: \"latest\",\n\tsourceType: \"module\",\n\t// https://github.com/tc39/proposal-hashbang\n\tallowHashBang: true,\n\tonComment: null\n};\n\n// regexp to match at least one \"magic comment\"\nconst webpackCommentRegExp = new RegExp(/(^|\\W)webpack[A-Z]{1,}[A-Za-z]{1,}:/);\n\nconst EMPTY_COMMENT_OPTIONS = {\n\toptions: null,\n\terrors: null\n};\n\nclass JavascriptParser extends Parser {\n\t/**\n\t * @param {\"module\" | \"script\" | \"auto\"} sourceType default source type\n\t */\n\tconstructor(sourceType = \"auto\") {\n\t\tsuper();\n\t\tthis.hooks = Object.freeze({\n\t\t\t/** @type {HookMap<SyncBailHook<[UnaryExpression], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluateTypeof: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[Expression], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluate: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[Identifier | ThisExpression | MemberExpression | MetaProperty], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluateIdentifier: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[Identifier | ThisExpression | MemberExpression], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluateDefinedIdentifier: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\"])\n\t\t\t),\n\t\t\t/** @type {HookMap<SyncBailHook<[NewExpression], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluateNewExpression: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\"])\n\t\t\t),\n\t\t\t/** @type {HookMap<SyncBailHook<[CallExpression], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluateCallExpression: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\"])\n\t\t\t),\n\t\t\t/** @type {HookMap<SyncBailHook<[CallExpression, BasicEvaluatedExpression], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluateCallExpressionMember: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\", \"param\"])\n\t\t\t),\n\t\t\t/** @type {HookMap<SyncBailHook<[Expression | Declaration | PrivateIdentifier, number], boolean | void>>} */\n\t\t\tisPure: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\", \"commentsStartPosition\"])\n\t\t\t),\n\t\t\t/** @type {SyncBailHook<[Statement | ModuleDeclaration], boolean | void>} */\n\t\t\tpreStatement: new SyncBailHook([\"statement\"]),\n\n\t\t\t/** @type {SyncBailHook<[Statement | ModuleDeclaration], boolean | void>} */\n\t\t\tblockPreStatement: new SyncBailHook([\"declaration\"]),\n\t\t\t/** @type {SyncBailHook<[Statement | ModuleDeclaration], boolean | void>} */\n\t\t\tstatement: new SyncBailHook([\"statement\"]),\n\t\t\t/** @type {SyncBailHook<[IfStatement], boolean | void>} */\n\t\t\tstatementIf: new SyncBailHook([\"statement\"]),\n\t\t\t/** @type {SyncBailHook<[Expression, ClassExpression | ClassDeclaration], boolean | void>} */\n\t\t\tclassExtendsExpression: new SyncBailHook([\n\t\t\t\t\"expression\",\n\t\t\t\t\"classDefinition\"\n\t\t\t]),\n\t\t\t/** @type {SyncBailHook<[MethodDefinition | PropertyDefinition | StaticBlock, ClassExpression | ClassDeclaration], boolean | void>} */\n\t\t\tclassBodyElement: new SyncBailHook([\"element\", \"classDefinition\"]),\n\t\t\t/** @type {SyncBailHook<[Expression, MethodDefinition | PropertyDefinition, ClassExpression | ClassDeclaration], boolean | void>} */\n\t\t\tclassBodyValue: new SyncBailHook([\n\t\t\t\t\"expression\",\n\t\t\t\t\"element\",\n\t\t\t\t\"classDefinition\"\n\t\t\t]),\n\t\t\t/** @type {HookMap<SyncBailHook<[LabeledStatement], boolean | void>>} */\n\t\t\tlabel: new HookMap(() => new SyncBailHook([\"statement\"])),\n\t\t\t/** @type {SyncBailHook<[ImportDeclaration, ImportSource], boolean | void>} */\n\t\t\timport: new SyncBailHook([\"statement\", \"source\"]),\n\t\t\t/** @type {SyncBailHook<[ImportDeclaration, ImportSource, string, string], boolean | void>} */\n\t\t\timportSpecifier: new SyncBailHook([\n\t\t\t\t\"statement\",\n\t\t\t\t\"source\",\n\t\t\t\t\"exportName\",\n\t\t\t\t\"identifierName\"\n\t\t\t]),\n\t\t\t/** @type {SyncBailHook<[ExportDefaultDeclaration | ExportNamedDeclaration], boolean | void>} */\n\t\t\texport: new SyncBailHook([\"statement\"]),\n\t\t\t/** @type {SyncBailHook<[ExportNamedDeclaration | ExportAllDeclaration, ImportSource], boolean | void>} */\n\t\t\texportImport: new SyncBailHook([\"statement\", \"source\"]),\n\t\t\t/** @type {SyncBailHook<[ExportDefaultDeclaration | ExportNamedDeclaration | ExportAllDeclaration, Declaration], boolean | void>} */\n\t\t\texportDeclaration: new SyncBailHook([\"statement\", \"declaration\"]),\n\t\t\t/** @type {SyncBailHook<[ExportDefaultDeclaration, FunctionDeclaration | ClassDeclaration], boolean | void>} */\n\t\t\texportExpression: new SyncBailHook([\"statement\", \"declaration\"]),\n\t\t\t/** @type {SyncBailHook<[ExportDefaultDeclaration | ExportNamedDeclaration | ExportAllDeclaration, string, string, number | undefined], boolean | void>} */\n\t\t\texportSpecifier: new SyncBailHook([\n\t\t\t\t\"statement\",\n\t\t\t\t\"identifierName\",\n\t\t\t\t\"exportName\",\n\t\t\t\t\"index\"\n\t\t\t]),\n\t\t\t/** @type {SyncBailHook<[ExportNamedDeclaration | ExportAllDeclaration, ImportSource, string, string, number | undefined], boolean | void>} */\n\t\t\texportImportSpecifier: new SyncBailHook([\n\t\t\t\t\"statement\",\n\t\t\t\t\"source\",\n\t\t\t\t\"identifierName\",\n\t\t\t\t\"exportName\",\n\t\t\t\t\"index\"\n\t\t\t]),\n\t\t\t/** @type {SyncBailHook<[VariableDeclarator, Statement], boolean | void>} */\n\t\t\tpreDeclarator: new SyncBailHook([\"declarator\", \"statement\"]),\n\t\t\t/** @type {SyncBailHook<[VariableDeclarator, Statement], boolean | void>} */\n\t\t\tdeclarator: new SyncBailHook([\"declarator\", \"statement\"]),\n\t\t\t/** @type {HookMap<SyncBailHook<[Declaration], boolean | void>>} */\n\t\t\tvarDeclaration: new HookMap(() => new SyncBailHook([\"declaration\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[Declaration], boolean | void>>} */\n\t\t\tvarDeclarationLet: new HookMap(() => new SyncBailHook([\"declaration\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[Declaration], boolean | void>>} */\n\t\t\tvarDeclarationConst: new HookMap(() => new SyncBailHook([\"declaration\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[Declaration], boolean | void>>} */\n\t\t\tvarDeclarationVar: new HookMap(() => new SyncBailHook([\"declaration\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[Identifier], boolean | void>>} */\n\t\t\tpattern: new HookMap(() => new SyncBailHook([\"pattern\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[Expression], boolean | void>>} */\n\t\t\tcanRename: new HookMap(() => new SyncBailHook([\"initExpression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[Expression], boolean | void>>} */\n\t\t\trename: new HookMap(() => new SyncBailHook([\"initExpression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[AssignmentExpression], boolean | void>>} */\n\t\t\tassign: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[AssignmentExpression, string[]], boolean | void>>} */\n\t\t\tassignMemberChain: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\", \"members\"])\n\t\t\t),\n\t\t\t/** @type {HookMap<SyncBailHook<[Expression], boolean | void>>} */\n\t\t\ttypeof: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {SyncBailHook<[ImportExpression], boolean | void>} */\n\t\t\timportCall: new SyncBailHook([\"expression\"]),\n\t\t\t/** @type {SyncBailHook<[Expression | ForOfStatement], boolean | void>} */\n\t\t\ttopLevelAwait: new SyncBailHook([\"expression\"]),\n\t\t\t/** @type {HookMap<SyncBailHook<[CallExpression], boolean | void>>} */\n\t\t\tcall: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** Something like \"a.b()\" */\n\t\t\t/** @type {HookMap<SyncBailHook<[CallExpression, string[], boolean[], Range[]], boolean | void>>} */\n\t\t\tcallMemberChain: new HookMap(\n\t\t\t\t() =>\n\t\t\t\t\tnew SyncBailHook([\n\t\t\t\t\t\t\"expression\",\n\t\t\t\t\t\t\"members\",\n\t\t\t\t\t\t\"membersOptionals\",\n\t\t\t\t\t\t\"memberRanges\"\n\t\t\t\t\t])\n\t\t\t),\n\t\t\t/** Something like \"a.b().c.d\" */\n\t\t\t/** @type {HookMap<SyncBailHook<[Expression, string[], CallExpression, string[], Range[]], boolean | void>>} */\n\t\t\tmemberChainOfCallMemberChain: new HookMap(\n\t\t\t\t() =>\n\t\t\t\t\tnew SyncBailHook([\n\t\t\t\t\t\t\"expression\",\n\t\t\t\t\t\t\"calleeMembers\",\n\t\t\t\t\t\t\"callExpression\",\n\t\t\t\t\t\t\"members\",\n\t\t\t\t\t\t\"memberRanges\"\n\t\t\t\t\t])\n\t\t\t),\n\t\t\t/** Something like \"a.b().c.d()\"\" */\n\t\t\t/** @type {HookMap<SyncBailHook<[CallExpression, string[], CallExpression, string[], Range[]], boolean | void>>} */\n\t\t\tcallMemberChainOfCallMemberChain: new HookMap(\n\t\t\t\t() =>\n\t\t\t\t\tnew SyncBailHook([\n\t\t\t\t\t\t\"expression\",\n\t\t\t\t\t\t\"calleeMembers\",\n\t\t\t\t\t\t\"innerCallExpression\",\n\t\t\t\t\t\t\"members\",\n\t\t\t\t\t\t\"memberRanges\"\n\t\t\t\t\t])\n\t\t\t),\n\t\t\t/** @type {SyncBailHook<[ChainExpression], boolean | void>} */\n\t\t\toptionalChaining: new SyncBailHook([\"optionalChaining\"]),\n\t\t\t/** @type {HookMap<SyncBailHook<[NewExpression], boolean | void>>} */\n\t\t\tnew: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {SyncBailHook<[BinaryExpression], boolean | void>} */\n\t\t\tbinaryExpression: new SyncBailHook([\"binaryExpression\"]),\n\t\t\t/** @type {HookMap<SyncBailHook<[Expression], boolean | void>>} */\n\t\t\texpression: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[MemberExpression, string[], boolean[], Range[]], boolean | void>>} */\n\t\t\texpressionMemberChain: new HookMap(\n\t\t\t\t() =>\n\t\t\t\t\tnew SyncBailHook([\n\t\t\t\t\t\t\"expression\",\n\t\t\t\t\t\t\"members\",\n\t\t\t\t\t\t\"membersOptionals\",\n\t\t\t\t\t\t\"memberRanges\"\n\t\t\t\t\t])\n\t\t\t),\n\t\t\t/** @type {HookMap<SyncBailHook<[MemberExpression, string[]], boolean | void>>} */\n\t\t\tunhandledExpressionMemberChain: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\", \"members\"])\n\t\t\t),\n\t\t\t/** @type {SyncBailHook<[ConditionalExpression], boolean | void>} */\n\t\t\texpressionConditionalOperator: new SyncBailHook([\"expression\"]),\n\t\t\t/** @type {SyncBailHook<[LogicalExpression], boolean | void>} */\n\t\t\texpressionLogicalOperator: new SyncBailHook([\"expression\"]),\n\t\t\t/** @type {SyncBailHook<[Program, Comment[]], boolean | void>} */\n\t\t\tprogram: new SyncBailHook([\"ast\", \"comments\"]),\n\t\t\t/** @type {SyncBailHook<[Program, Comment[]], boolean | void>} */\n\t\t\tfinish: new SyncBailHook([\"ast\", \"comments\"])\n\t\t});\n\t\tthis.sourceType = sourceType;\n\t\t/** @type {ScopeInfo} */\n\t\tthis.scope = undefined;\n\t\t/** @type {ParserState} */\n\t\tthis.state = undefined;\n\t\t/** @type {Comment[] | undefined} */\n\t\tthis.comments = undefined;\n\t\t/** @type {Set<number> | undefined} */\n\t\tthis.semicolons = undefined;\n\t\t/** @type {StatementPathItem[]} */\n\t\tthis.statementPath = undefined;\n\t\t/** @type {Statement | ModuleDeclaration | Expression | undefined} */\n\t\tthis.prevStatement = undefined;\n\t\t/** @type {WeakMap<Expression, Set<string>> | undefined} */\n\t\tthis.destructuringAssignmentProperties = undefined;\n\t\tthis.currentTagData = undefined;\n\t\tthis.magicCommentContext = vm.createContext(undefined, {\n\t\t\tname: \"Webpack Magic Comment Parser\",\n\t\t\tcodeGeneration: { strings: false, wasm: false }\n\t\t});\n\t\tthis._initializeEvaluating();\n\t}\n\n\t_initializeEvaluating() {\n\t\tthis.hooks.evaluate.for(\"Literal\").tap(\"JavascriptParser\", _expr => {\n\t\t\tconst expr = /** @type {Literal} */ (_expr);\n\n\t\t\tswitch (typeof expr.value) {\n\t\t\t\tcase \"number\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setNumber(expr.value)\n\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\tcase \"bigint\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setBigInt(expr.value)\n\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\tcase \"string\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setString(expr.value)\n\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\tcase \"boolean\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setBoolean(expr.value)\n\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t}\n\t\t\tif (expr.value === null) {\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setNull()\n\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t}\n\t\t\tif (expr.value instanceof RegExp) {\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setRegExp(expr.value)\n\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t}\n\t\t});\n\t\tthis.hooks.evaluate.for(\"NewExpression\").tap(\"JavascriptParser\", _expr => {\n\t\t\tconst expr = /** @type {NewExpression} */ (_expr);\n\t\t\tconst callee = expr.callee;\n\t\t\tif (callee.type !== \"Identifier\") return;\n\t\t\tif (callee.name !== \"RegExp\") {\n\t\t\t\treturn this.callHooksForName(\n\t\t\t\t\tthis.hooks.evaluateNewExpression,\n\t\t\t\t\tcallee.name,\n\t\t\t\t\texpr\n\t\t\t\t);\n\t\t\t} else if (\n\t\t\t\texpr.arguments.length > 2 ||\n\t\t\t\tthis.getVariableInfo(\"RegExp\") !== \"RegExp\"\n\t\t\t)\n\t\t\t\treturn;\n\n\t\t\tlet regExp, flags;\n\t\t\tconst arg1 = expr.arguments[0];\n\n\t\t\tif (arg1) {\n\t\t\t\tif (arg1.type === \"SpreadElement\") return;\n\n\t\t\t\tconst evaluatedRegExp = this.evaluateExpression(arg1);\n\n\t\t\t\tif (!evaluatedRegExp) return;\n\n\t\t\t\tregExp = evaluatedRegExp.asString();\n\n\t\t\t\tif (!regExp) return;\n\t\t\t} else {\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setRegExp(new RegExp(\"\"))\n\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t}\n\n\t\t\tconst arg2 = expr.arguments[1];\n\n\t\t\tif (arg2) {\n\t\t\t\tif (arg2.type === \"SpreadElement\") return;\n\n\t\t\t\tconst evaluatedFlags = this.evaluateExpression(arg2);\n\n\t\t\t\tif (!evaluatedFlags) return;\n\n\t\t\t\tif (!evaluatedFlags.isUndefined()) {\n\t\t\t\t\tflags = evaluatedFlags.asString();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tflags === undefined ||\n\t\t\t\t\t\t!BasicEvaluatedExpression.isValidRegExpFlags(flags)\n\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t.setRegExp(flags ? new RegExp(regExp, flags) : new RegExp(regExp))\n\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"LogicalExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {LogicalExpression} */ (_expr);\n\n\t\t\t\tconst left = this.evaluateExpression(expr.left);\n\t\t\t\tlet returnRight = false;\n\t\t\t\t/** @type {boolean|undefined} */\n\t\t\t\tlet allowedRight;\n\t\t\t\tif (expr.operator === \"&&\") {\n\t\t\t\t\tconst leftAsBool = left.asBool();\n\t\t\t\t\tif (leftAsBool === false)\n\t\t\t\t\t\treturn left.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t\treturnRight = leftAsBool === true;\n\t\t\t\t\tallowedRight = false;\n\t\t\t\t} else if (expr.operator === \"||\") {\n\t\t\t\t\tconst leftAsBool = left.asBool();\n\t\t\t\t\tif (leftAsBool === true)\n\t\t\t\t\t\treturn left.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t\treturnRight = leftAsBool === false;\n\t\t\t\t\tallowedRight = true;\n\t\t\t\t} else if (expr.operator === \"??\") {\n\t\t\t\t\tconst leftAsNullish = left.asNullish();\n\t\t\t\t\tif (leftAsNullish === false)\n\t\t\t\t\t\treturn left.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t\tif (leftAsNullish !== true) return;\n\t\t\t\t\treturnRight = true;\n\t\t\t\t} else return;\n\t\t\t\tconst right = this.evaluateExpression(expr.right);\n\t\t\t\tif (returnRight) {\n\t\t\t\t\tif (left.couldHaveSideEffects()) right.setSideEffects();\n\t\t\t\t\treturn right.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t}\n\n\t\t\t\tconst asBool = right.asBool();\n\n\t\t\t\tif (allowedRight === true && asBool === true) {\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range))\n\t\t\t\t\t\t.setTruthy();\n\t\t\t\t} else if (allowedRight === false && asBool === false) {\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range))\n\t\t\t\t\t\t.setFalsy();\n\t\t\t\t}\n\t\t\t});\n\n\t\t/**\n\t\t * In simple logical cases, we can use valueAsExpression to assist us in evaluating the expression on\n\t\t * either side of a [BinaryExpression](https://github.com/estree/estree/blob/master/es5.md#binaryexpression).\n\t\t * This supports scenarios in webpack like conditionally `import()`'ing modules based on some simple evaluation:\n\t\t *\n\t\t * ```js\n\t\t * if (1 === 3) {\n\t\t *  import(\"./moduleA\"); // webpack will auto evaluate this and not import the modules\n\t\t * }\n\t\t * ```\n\t\t *\n\t\t * Additional scenarios include evaluation of strings inside of dynamic import statements:\n\t\t *\n\t\t * ```js\n\t\t * const foo = \"foo\";\n\t\t * const bar = \"bar\";\n\t\t *\n\t\t * import(\"./\" + foo + bar); // webpack will auto evaluate this into import(\"./foobar\")\n\t\t * ```\n\t\t * @param {boolean | number | BigInt | string} value the value to convert to an expression\n\t\t * @param {BinaryExpression | UnaryExpression} expr the expression being evaluated\n\t\t * @param {boolean} sideEffects whether the expression has side effects\n\t\t * @returns {BasicEvaluatedExpression | undefined} the evaluated expression\n\t\t * @example\n\t\t *\n\t\t * ```js\n\t\t * const binaryExpr = new BinaryExpression(\"+\",\n\t\t * \t{ type: \"Literal\", value: 2 },\n\t\t * \t{ type: \"Literal\", value: 3 }\n\t\t * );\n\t\t *\n\t\t * const leftValue = 2;\n\t\t * const rightValue = 3;\n\t\t *\n\t\t * const leftExpr = valueAsExpression(leftValue, binaryExpr.left, false);\n\t\t * const rightExpr = valueAsExpression(rightValue, binaryExpr.right, false);\n\t\t * const result = new BasicEvaluatedExpression()\n\t\t * \t.setNumber(leftExpr.number + rightExpr.number)\n\t\t * \t.setRange(binaryExpr.range);\n\t\t *\n\t\t * console.log(result.number); // Output: 5\n\t\t * ```\n\t\t */\n\t\tconst valueAsExpression = (value, expr, sideEffects) => {\n\t\t\tswitch (typeof value) {\n\t\t\t\tcase \"boolean\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setBoolean(value)\n\t\t\t\t\t\t.setSideEffects(sideEffects)\n\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\tcase \"number\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setNumber(value)\n\t\t\t\t\t\t.setSideEffects(sideEffects)\n\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\tcase \"bigint\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setBigInt(value)\n\t\t\t\t\t\t.setSideEffects(sideEffects)\n\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\tcase \"string\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setString(value)\n\t\t\t\t\t\t.setSideEffects(sideEffects)\n\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t}\n\t\t};\n\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"BinaryExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {BinaryExpression} */ (_expr);\n\n\t\t\t\t/**\n\t\t\t\t * Evaluates a binary expression if and only if it is a const operation (e.g. 1 + 2, \"a\" + \"b\", etc.).\n\t\t\t\t *\n\t\t\t\t * @template T\n\t\t\t\t * @param {(leftOperand: T, rightOperand: T) => boolean | number | BigInt | string} operandHandler the handler for the operation (e.g. (a, b) => a + b)\n\t\t\t\t * @returns {BasicEvaluatedExpression | undefined} the evaluated expression\n\t\t\t\t */\n\t\t\t\tconst handleConstOperation = operandHandler => {\n\t\t\t\t\tconst left = this.evaluateExpression(expr.left);\n\t\t\t\t\tif (!left.isCompileTimeValue()) return;\n\n\t\t\t\t\tconst right = this.evaluateExpression(expr.right);\n\t\t\t\t\tif (!right.isCompileTimeValue()) return;\n\n\t\t\t\t\tconst result = operandHandler(\n\t\t\t\t\t\tleft.asCompileTimeValue(),\n\t\t\t\t\t\tright.asCompileTimeValue()\n\t\t\t\t\t);\n\t\t\t\t\treturn valueAsExpression(\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\texpr,\n\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t * Helper function to determine if two booleans are always different. This is used in `handleStrictEqualityComparison`\n\t\t\t\t * to determine if an expressions boolean or nullish conversion is equal or not.\n\t\t\t\t *\n\t\t\t\t * @param {boolean} a first boolean to compare\n\t\t\t\t * @param {boolean} b second boolean to compare\n\t\t\t\t * @returns {boolean} true if the two booleans are always different, false otherwise\n\t\t\t\t */\n\t\t\t\tconst isAlwaysDifferent = (a, b) =>\n\t\t\t\t\t(a === true && b === false) || (a === false && b === true);\n\n\t\t\t\t/**\n\t\t\t\t * @param {BasicEvaluatedExpression} left left\n\t\t\t\t * @param {BasicEvaluatedExpression} right right\n\t\t\t\t * @param {BasicEvaluatedExpression} res res\n\t\t\t\t * @param {boolean} eql true for \"===\" and false for \"!==\"\n\t\t\t\t * @returns {BasicEvaluatedExpression | undefined} result\n\t\t\t\t */\n\t\t\t\tconst handleTemplateStringCompare = (left, right, res, eql) => {\n\t\t\t\t\t/**\n\t\t\t\t\t * @param {BasicEvaluatedExpression[]} parts parts\n\t\t\t\t\t * @returns {string} value\n\t\t\t\t\t */\n\t\t\t\t\tconst getPrefix = parts => {\n\t\t\t\t\t\tlet value = \"\";\n\t\t\t\t\t\tfor (const p of parts) {\n\t\t\t\t\t\t\tconst v = p.asString();\n\t\t\t\t\t\t\tif (v !== undefined) value += v;\n\t\t\t\t\t\t\telse break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t};\n\t\t\t\t\t/**\n\t\t\t\t\t * @param {BasicEvaluatedExpression[]} parts parts\n\t\t\t\t\t * @returns {string} value\n\t\t\t\t\t */\n\t\t\t\t\tconst getSuffix = parts => {\n\t\t\t\t\t\tlet value = \"\";\n\t\t\t\t\t\tfor (let i = parts.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\tconst v = parts[i].asString();\n\t\t\t\t\t\t\tif (v !== undefined) value = v + value;\n\t\t\t\t\t\t\telse break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t};\n\t\t\t\t\tconst leftPrefix = getPrefix(\n\t\t\t\t\t\t/** @type {BasicEvaluatedExpression[]} */ (left.parts)\n\t\t\t\t\t);\n\t\t\t\t\tconst rightPrefix = getPrefix(\n\t\t\t\t\t\t/** @type {BasicEvaluatedExpression[]} */ (right.parts)\n\t\t\t\t\t);\n\t\t\t\t\tconst leftSuffix = getSuffix(\n\t\t\t\t\t\t/** @type {BasicEvaluatedExpression[]} */ (left.parts)\n\t\t\t\t\t);\n\t\t\t\t\tconst rightSuffix = getSuffix(\n\t\t\t\t\t\t/** @type {BasicEvaluatedExpression[]} */ (right.parts)\n\t\t\t\t\t);\n\t\t\t\t\tconst lenPrefix = Math.min(leftPrefix.length, rightPrefix.length);\n\t\t\t\t\tconst lenSuffix = Math.min(leftSuffix.length, rightSuffix.length);\n\t\t\t\t\tconst prefixMismatch =\n\t\t\t\t\t\tlenPrefix > 0 &&\n\t\t\t\t\t\tleftPrefix.slice(0, lenPrefix) !== rightPrefix.slice(0, lenPrefix);\n\t\t\t\t\tconst suffixMismatch =\n\t\t\t\t\t\tlenSuffix > 0 &&\n\t\t\t\t\t\tleftSuffix.slice(-lenSuffix) !== rightSuffix.slice(-lenSuffix);\n\t\t\t\t\tif (prefixMismatch || suffixMismatch) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(!eql)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t * Helper function to handle BinaryExpressions using strict equality comparisons (e.g. \"===\" and \"!==\").\n\t\t\t\t * @param {boolean} eql true for \"===\" and false for \"!==\"\n\t\t\t\t * @returns {BasicEvaluatedExpression | undefined} the evaluated expression\n\t\t\t\t */\n\t\t\t\tconst handleStrictEqualityComparison = eql => {\n\t\t\t\t\tconst left = this.evaluateExpression(expr.left);\n\t\t\t\t\tconst right = this.evaluateExpression(expr.right);\n\t\t\t\t\tconst res = new BasicEvaluatedExpression();\n\t\t\t\t\tres.setRange(/** @type {Range} */ (expr.range));\n\n\t\t\t\t\tconst leftConst = left.isCompileTimeValue();\n\t\t\t\t\tconst rightConst = right.isCompileTimeValue();\n\n\t\t\t\t\tif (leftConst && rightConst) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(\n\t\t\t\t\t\t\t\teql ===\n\t\t\t\t\t\t\t\t\t(left.asCompileTimeValue() === right.asCompileTimeValue())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (left.isArray() && right.isArray()) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(!eql)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (left.isTemplateString() && right.isTemplateString()) {\n\t\t\t\t\t\treturn handleTemplateStringCompare(left, right, res, eql);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst leftPrimitive = left.isPrimitiveType();\n\t\t\t\t\tconst rightPrimitive = right.isPrimitiveType();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t// Primitive !== Object or\n\t\t\t\t\t\t// compile-time object types are never equal to something at runtime\n\t\t\t\t\t\t(leftPrimitive === false &&\n\t\t\t\t\t\t\t(leftConst || rightPrimitive === true)) ||\n\t\t\t\t\t\t(rightPrimitive === false &&\n\t\t\t\t\t\t\t(rightConst || leftPrimitive === true)) ||\n\t\t\t\t\t\t// Different nullish or boolish status also means not equal\n\t\t\t\t\t\tisAlwaysDifferent(\n\t\t\t\t\t\t\t/** @type {boolean} */ (left.asBool()),\n\t\t\t\t\t\t\t/** @type {boolean} */ (right.asBool())\n\t\t\t\t\t\t) ||\n\t\t\t\t\t\tisAlwaysDifferent(\n\t\t\t\t\t\t\t/** @type {boolean} */ (left.asNullish()),\n\t\t\t\t\t\t\t/** @type {boolean} */ (right.asNullish())\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(!eql)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t * Helper function to handle BinaryExpressions using abstract equality comparisons (e.g. \"==\" and \"!=\").\n\t\t\t\t * @param {boolean} eql true for \"==\" and false for \"!=\"\n\t\t\t\t * @returns {BasicEvaluatedExpression | undefined} the evaluated expression\n\t\t\t\t */\n\t\t\t\tconst handleAbstractEqualityComparison = eql => {\n\t\t\t\t\tconst left = this.evaluateExpression(expr.left);\n\t\t\t\t\tconst right = this.evaluateExpression(expr.right);\n\t\t\t\t\tconst res = new BasicEvaluatedExpression();\n\t\t\t\t\tres.setRange(/** @type {Range} */ (expr.range));\n\n\t\t\t\t\tconst leftConst = left.isCompileTimeValue();\n\t\t\t\t\tconst rightConst = right.isCompileTimeValue();\n\n\t\t\t\t\tif (leftConst && rightConst) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(\n\t\t\t\t\t\t\t\teql ===\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\t\t\t\t\t(left.asCompileTimeValue() == right.asCompileTimeValue())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (left.isArray() && right.isArray()) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(!eql)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (left.isTemplateString() && right.isTemplateString()) {\n\t\t\t\t\t\treturn handleTemplateStringCompare(left, right, res, eql);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tif (expr.operator === \"+\") {\n\t\t\t\t\tconst left = this.evaluateExpression(expr.left);\n\t\t\t\t\tconst right = this.evaluateExpression(expr.right);\n\t\t\t\t\tconst res = new BasicEvaluatedExpression();\n\t\t\t\t\tif (left.isString()) {\n\t\t\t\t\t\tif (right.isString()) {\n\t\t\t\t\t\t\tres.setString(\n\t\t\t\t\t\t\t\t/** @type {string} */ (left.string) +\n\t\t\t\t\t\t\t\t\t/** @type {string} */ (right.string)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (right.isNumber()) {\n\t\t\t\t\t\t\tres.setString(/** @type {string} */ (left.string) + right.number);\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tright.isWrapped() &&\n\t\t\t\t\t\t\tright.prefix &&\n\t\t\t\t\t\t\tright.prefix.isString()\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// \"left\" + (\"prefix\" + inner + \"postfix\")\n\t\t\t\t\t\t\t// => (\"leftPrefix\" + inner + \"postfix\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tnew BasicEvaluatedExpression()\n\t\t\t\t\t\t\t\t\t.setString(\n\t\t\t\t\t\t\t\t\t\t/** @type {string} */ (left.string) +\n\t\t\t\t\t\t\t\t\t\t\t/** @type {string} */ (right.prefix.string)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.setRange(\n\t\t\t\t\t\t\t\t\t\tjoinRanges(\n\t\t\t\t\t\t\t\t\t\t\t/** @type {Range} */ (left.range),\n\t\t\t\t\t\t\t\t\t\t\t/** @type {Range} */ (right.prefix.range)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tright.postfix,\n\t\t\t\t\t\t\t\tright.wrappedInnerExpressions\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (right.isWrapped()) {\n\t\t\t\t\t\t\t// \"left\" + ([null] + inner + \"postfix\")\n\t\t\t\t\t\t\t// => (\"left\" + inner + \"postfix\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\t\tright.postfix,\n\t\t\t\t\t\t\t\tright.wrappedInnerExpressions\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// \"left\" + expr\n\t\t\t\t\t\t\t// => (\"left\" + expr + \"\")\n\t\t\t\t\t\t\tres.setWrapped(left, null, [right]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (left.isNumber()) {\n\t\t\t\t\t\tif (right.isString()) {\n\t\t\t\t\t\t\tres.setString(left.number + /** @type {string} */ (right.string));\n\t\t\t\t\t\t} else if (right.isNumber()) {\n\t\t\t\t\t\t\tres.setNumber(\n\t\t\t\t\t\t\t\t/** @type {number} */ (left.number) +\n\t\t\t\t\t\t\t\t\t/** @type {number} */ (right.number)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (left.isBigInt()) {\n\t\t\t\t\t\tif (right.isBigInt()) {\n\t\t\t\t\t\t\tres.setBigInt(\n\t\t\t\t\t\t\t\t/** @type {bigint} */ (left.bigint) +\n\t\t\t\t\t\t\t\t\t/** @type {bigint} */ (right.bigint)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (left.isWrapped()) {\n\t\t\t\t\t\tif (left.postfix && left.postfix.isString() && right.isString()) {\n\t\t\t\t\t\t\t// (\"prefix\" + inner + \"postfix\") + \"right\"\n\t\t\t\t\t\t\t// => (\"prefix\" + inner + \"postfixRight\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft.prefix,\n\t\t\t\t\t\t\t\tnew BasicEvaluatedExpression()\n\t\t\t\t\t\t\t\t\t.setString(\n\t\t\t\t\t\t\t\t\t\t/** @type {string} */ (left.postfix.string) +\n\t\t\t\t\t\t\t\t\t\t\t/** @type {string} */ (right.string)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.setRange(\n\t\t\t\t\t\t\t\t\t\tjoinRanges(\n\t\t\t\t\t\t\t\t\t\t\t/** @type {Range} */ (left.postfix.range),\n\t\t\t\t\t\t\t\t\t\t\t/** @type {Range} */ (right.range)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tleft.postfix &&\n\t\t\t\t\t\t\tleft.postfix.isString() &&\n\t\t\t\t\t\t\tright.isNumber()\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// (\"prefix\" + inner + \"postfix\") + 123\n\t\t\t\t\t\t\t// => (\"prefix\" + inner + \"postfix123\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft.prefix,\n\t\t\t\t\t\t\t\tnew BasicEvaluatedExpression()\n\t\t\t\t\t\t\t\t\t.setString(\n\t\t\t\t\t\t\t\t\t\t/** @type {string} */ (left.postfix.string) +\n\t\t\t\t\t\t\t\t\t\t\t/** @type {number} */ (right.number)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.setRange(\n\t\t\t\t\t\t\t\t\t\tjoinRanges(\n\t\t\t\t\t\t\t\t\t\t\t/** @type {Range} */ (left.postfix.range),\n\t\t\t\t\t\t\t\t\t\t\t/** @type {Range} */ (right.range)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (right.isString()) {\n\t\t\t\t\t\t\t// (\"prefix\" + inner + [null]) + \"right\"\n\t\t\t\t\t\t\t// => (\"prefix\" + inner + \"right\")\n\t\t\t\t\t\t\tres.setWrapped(left.prefix, right, left.wrappedInnerExpressions);\n\t\t\t\t\t\t} else if (right.isNumber()) {\n\t\t\t\t\t\t\t// (\"prefix\" + inner + [null]) + 123\n\t\t\t\t\t\t\t// => (\"prefix\" + inner + \"123\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft.prefix,\n\t\t\t\t\t\t\t\tnew BasicEvaluatedExpression()\n\t\t\t\t\t\t\t\t\t.setString(right.number + \"\")\n\t\t\t\t\t\t\t\t\t.setRange(/** @type {Range} */ (right.range)),\n\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (right.isWrapped()) {\n\t\t\t\t\t\t\t// (\"prefix1\" + inner1 + \"postfix1\") + (\"prefix2\" + inner2 + \"postfix2\")\n\t\t\t\t\t\t\t// (\"prefix1\" + inner1 + \"postfix1\" + \"prefix2\" + inner2 + \"postfix2\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft.prefix,\n\t\t\t\t\t\t\t\tright.postfix,\n\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions &&\n\t\t\t\t\t\t\t\t\tright.wrappedInnerExpressions &&\n\t\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions\n\t\t\t\t\t\t\t\t\t\t.concat(left.postfix ? [left.postfix] : [])\n\t\t\t\t\t\t\t\t\t\t.concat(right.prefix ? [right.prefix] : [])\n\t\t\t\t\t\t\t\t\t\t.concat(right.wrappedInnerExpressions)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// (\"prefix\" + inner + postfix) + expr\n\t\t\t\t\t\t\t// => (\"prefix\" + inner + postfix + expr + [null])\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft.prefix,\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions &&\n\t\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions.concat(\n\t\t\t\t\t\t\t\t\t\tleft.postfix ? [left.postfix, right] : [right]\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (right.isString()) {\n\t\t\t\t\t\t\t// left + \"right\"\n\t\t\t\t\t\t\t// => ([null] + left + \"right\")\n\t\t\t\t\t\t\tres.setWrapped(null, right, [left]);\n\t\t\t\t\t\t} else if (right.isWrapped()) {\n\t\t\t\t\t\t\t// left + (prefix + inner + \"postfix\")\n\t\t\t\t\t\t\t// => ([null] + left + prefix + inner + \"postfix\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\tright.postfix,\n\t\t\t\t\t\t\t\tright.wrappedInnerExpressions &&\n\t\t\t\t\t\t\t\t\t(right.prefix ? [left, right.prefix] : [left]).concat(\n\t\t\t\t\t\t\t\t\t\tright.wrappedInnerExpressions\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (left.couldHaveSideEffects() || right.couldHaveSideEffects())\n\t\t\t\t\t\tres.setSideEffects();\n\t\t\t\t\tres.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t\treturn res;\n\t\t\t\t} else if (expr.operator === \"-\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l - r);\n\t\t\t\t} else if (expr.operator === \"*\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l * r);\n\t\t\t\t} else if (expr.operator === \"/\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l / r);\n\t\t\t\t} else if (expr.operator === \"**\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l ** r);\n\t\t\t\t} else if (expr.operator === \"===\") {\n\t\t\t\t\treturn handleStrictEqualityComparison(true);\n\t\t\t\t} else if (expr.operator === \"==\") {\n\t\t\t\t\treturn handleAbstractEqualityComparison(true);\n\t\t\t\t} else if (expr.operator === \"!==\") {\n\t\t\t\t\treturn handleStrictEqualityComparison(false);\n\t\t\t\t} else if (expr.operator === \"!=\") {\n\t\t\t\t\treturn handleAbstractEqualityComparison(false);\n\t\t\t\t} else if (expr.operator === \"&\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l & r);\n\t\t\t\t} else if (expr.operator === \"|\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l | r);\n\t\t\t\t} else if (expr.operator === \"^\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l ^ r);\n\t\t\t\t} else if (expr.operator === \">>>\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l >>> r);\n\t\t\t\t} else if (expr.operator === \">>\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l >> r);\n\t\t\t\t} else if (expr.operator === \"<<\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l << r);\n\t\t\t\t} else if (expr.operator === \"<\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l < r);\n\t\t\t\t} else if (expr.operator === \">\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l > r);\n\t\t\t\t} else if (expr.operator === \"<=\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l <= r);\n\t\t\t\t} else if (expr.operator === \">=\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l >= r);\n\t\t\t\t}\n\t\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"UnaryExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {UnaryExpression} */ (_expr);\n\n\t\t\t\t/**\n\t\t\t\t * Evaluates a UnaryExpression if and only if it is a basic const operator (e.g. +a, -a, ~a).\n\t\t\t\t *\n\t\t\t\t * @template T\n\t\t\t\t * @param {(operand: T) => boolean | number | BigInt | string} operandHandler handler for the operand\n\t\t\t\t * @returns {BasicEvaluatedExpression | undefined} evaluated expression\n\t\t\t\t */\n\t\t\t\tconst handleConstOperation = operandHandler => {\n\t\t\t\t\tconst argument = this.evaluateExpression(expr.argument);\n\t\t\t\t\tif (!argument.isCompileTimeValue()) return;\n\t\t\t\t\tconst result = operandHandler(argument.asCompileTimeValue());\n\t\t\t\t\treturn valueAsExpression(\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\texpr,\n\t\t\t\t\t\targument.couldHaveSideEffects()\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tif (expr.operator === \"typeof\") {\n\t\t\t\t\tswitch (expr.argument.type) {\n\t\t\t\t\t\tcase \"Identifier\": {\n\t\t\t\t\t\t\tconst res = this.callHooksForName(\n\t\t\t\t\t\t\t\tthis.hooks.evaluateTypeof,\n\t\t\t\t\t\t\t\texpr.argument.name,\n\t\t\t\t\t\t\t\texpr\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (res !== undefined) return res;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"MetaProperty\": {\n\t\t\t\t\t\t\tconst res = this.callHooksForName(\n\t\t\t\t\t\t\t\tthis.hooks.evaluateTypeof,\n\t\t\t\t\t\t\t\tgetRootName(expr.argument),\n\t\t\t\t\t\t\t\texpr\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (res !== undefined) return res;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"MemberExpression\": {\n\t\t\t\t\t\t\tconst res = this.callHooksForExpression(\n\t\t\t\t\t\t\t\tthis.hooks.evaluateTypeof,\n\t\t\t\t\t\t\t\texpr.argument,\n\t\t\t\t\t\t\t\texpr\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (res !== undefined) return res;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"ChainExpression\": {\n\t\t\t\t\t\t\tconst res = this.callHooksForExpression(\n\t\t\t\t\t\t\t\tthis.hooks.evaluateTypeof,\n\t\t\t\t\t\t\t\texpr.argument.expression,\n\t\t\t\t\t\t\t\texpr\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (res !== undefined) return res;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"FunctionExpression\": {\n\t\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t\t.setString(\"function\")\n\t\t\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst arg = this.evaluateExpression(expr.argument);\n\t\t\t\t\tif (arg.isUnknown()) return;\n\t\t\t\t\tif (arg.isString()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"string\")\n\t\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isWrapped()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"string\")\n\t\t\t\t\t\t\t.setSideEffects()\n\t\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isUndefined()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"undefined\")\n\t\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isNumber()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"number\")\n\t\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isBigInt()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"bigint\")\n\t\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isBoolean()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"boolean\")\n\t\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isConstArray() || arg.isRegExp() || arg.isNull()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"object\")\n\t\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isArray()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"object\")\n\t\t\t\t\t\t\t.setSideEffects(arg.couldHaveSideEffects())\n\t\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t\t}\n\t\t\t\t} else if (expr.operator === \"!\") {\n\t\t\t\t\tconst argument = this.evaluateExpression(expr.argument);\n\t\t\t\t\tconst bool = argument.asBool();\n\t\t\t\t\tif (typeof bool !== \"boolean\") return;\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setBoolean(!bool)\n\t\t\t\t\t\t.setSideEffects(argument.couldHaveSideEffects())\n\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t} else if (expr.operator === \"~\") {\n\t\t\t\t\treturn handleConstOperation(v => ~v);\n\t\t\t\t} else if (expr.operator === \"+\") {\n\t\t\t\t\treturn handleConstOperation(v => +v);\n\t\t\t\t} else if (expr.operator === \"-\") {\n\t\t\t\t\treturn handleConstOperation(v => -v);\n\t\t\t\t}\n\t\t\t});\n\t\tthis.hooks.evaluateTypeof.for(\"undefined\").tap(\"JavascriptParser\", expr => {\n\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t.setString(\"undefined\")\n\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t});\n\t\tthis.hooks.evaluate.for(\"Identifier\").tap(\"JavascriptParser\", expr => {\n\t\t\tif (/** @type {Identifier} */ (expr).name === \"undefined\") {\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setUndefined()\n\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t}\n\t\t});\n\t\t/**\n\t\t * @param {string} exprType expression type name\n\t\t * @param {function(Expression): GetInfoResult | undefined} getInfo get info\n\t\t * @returns {void}\n\t\t */\n\t\tconst tapEvaluateWithVariableInfo = (exprType, getInfo) => {\n\t\t\t/** @type {Expression | undefined} */\n\t\t\tlet cachedExpression = undefined;\n\t\t\t/** @type {GetInfoResult | undefined} */\n\t\t\tlet cachedInfo = undefined;\n\t\t\tthis.hooks.evaluate.for(exprType).tap(\"JavascriptParser\", expr => {\n\t\t\t\tconst expression = /** @type {MemberExpression} */ (expr);\n\n\t\t\t\tconst info = getInfo(expr);\n\t\t\t\tif (info !== undefined) {\n\t\t\t\t\treturn this.callHooksForInfoWithFallback(\n\t\t\t\t\t\tthis.hooks.evaluateIdentifier,\n\t\t\t\t\t\tinfo.name,\n\t\t\t\t\t\tname => {\n\t\t\t\t\t\t\tcachedExpression = expression;\n\t\t\t\t\t\t\tcachedInfo = info;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname => {\n\t\t\t\t\t\t\tconst hook = this.hooks.evaluateDefinedIdentifier.get(name);\n\t\t\t\t\t\t\tif (hook !== undefined) {\n\t\t\t\t\t\t\t\treturn hook.call(expression);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\texpression\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.hooks.evaluate\n\t\t\t\t.for(exprType)\n\t\t\t\t.tap({ name: \"JavascriptParser\", stage: 100 }, expr => {\n\t\t\t\t\tconst info = cachedExpression === expr ? cachedInfo : getInfo(expr);\n\t\t\t\t\tif (info !== undefined) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setIdentifier(\n\t\t\t\t\t\t\t\tinfo.name,\n\t\t\t\t\t\t\t\tinfo.rootInfo,\n\t\t\t\t\t\t\t\tinfo.getMembers,\n\t\t\t\t\t\t\t\tinfo.getMembersOptionals,\n\t\t\t\t\t\t\t\tinfo.getMemberRanges\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tthis.hooks.finish.tap(\"JavascriptParser\", () => {\n\t\t\t\t// Cleanup for GC\n\t\t\t\tcachedExpression = cachedInfo = undefined;\n\t\t\t});\n\t\t};\n\t\ttapEvaluateWithVariableInfo(\"Identifier\", expr => {\n\t\t\tconst info = this.getVariableInfo(/** @type {Identifier} */ (expr).name);\n\t\t\tif (\n\t\t\t\ttypeof info === \"string\" ||\n\t\t\t\t(info instanceof VariableInfo && typeof info.freeName === \"string\")\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tname: info,\n\t\t\t\t\trootInfo: info,\n\t\t\t\t\tgetMembers: () => [],\n\t\t\t\t\tgetMembersOptionals: () => [],\n\t\t\t\t\tgetMemberRanges: () => []\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\ttapEvaluateWithVariableInfo(\"ThisExpression\", expr => {\n\t\t\tconst info = this.getVariableInfo(\"this\");\n\t\t\tif (\n\t\t\t\ttypeof info === \"string\" ||\n\t\t\t\t(info instanceof VariableInfo && typeof info.freeName === \"string\")\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tname: info,\n\t\t\t\t\trootInfo: info,\n\t\t\t\t\tgetMembers: () => [],\n\t\t\t\t\tgetMembersOptionals: () => [],\n\t\t\t\t\tgetMemberRanges: () => []\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\tthis.hooks.evaluate.for(\"MetaProperty\").tap(\"JavascriptParser\", expr => {\n\t\t\tconst metaProperty = /** @type {MetaProperty} */ (expr);\n\n\t\t\treturn this.callHooksForName(\n\t\t\t\tthis.hooks.evaluateIdentifier,\n\t\t\t\tgetRootName(expr),\n\t\t\t\tmetaProperty\n\t\t\t);\n\t\t});\n\t\ttapEvaluateWithVariableInfo(\"MemberExpression\", expr =>\n\t\t\tthis.getMemberExpressionInfo(\n\t\t\t\t/** @type {MemberExpression} */ (expr),\n\t\t\t\tALLOWED_MEMBER_TYPES_EXPRESSION\n\t\t\t)\n\t\t);\n\n\t\tthis.hooks.evaluate.for(\"CallExpression\").tap(\"JavascriptParser\", _expr => {\n\t\t\tconst expr = /** @type {CallExpression} */ (_expr);\n\t\t\tif (\n\t\t\t\texpr.callee.type === \"MemberExpression\" &&\n\t\t\t\texpr.callee.property.type ===\n\t\t\t\t\t(expr.callee.computed ? \"Literal\" : \"Identifier\")\n\t\t\t) {\n\t\t\t\t// type Super also possible here\n\t\t\t\tconst param = this.evaluateExpression(\n\t\t\t\t\t/** @type {Expression} */ (expr.callee.object)\n\t\t\t\t);\n\t\t\t\tconst property =\n\t\t\t\t\texpr.callee.property.type === \"Literal\"\n\t\t\t\t\t\t? `${expr.callee.property.value}`\n\t\t\t\t\t\t: expr.callee.property.name;\n\t\t\t\tconst hook = this.hooks.evaluateCallExpressionMember.get(property);\n\t\t\t\tif (hook !== undefined) {\n\t\t\t\t\treturn hook.call(expr, param);\n\t\t\t\t}\n\t\t\t} else if (expr.callee.type === \"Identifier\") {\n\t\t\t\treturn this.callHooksForName(\n\t\t\t\t\tthis.hooks.evaluateCallExpression,\n\t\t\t\t\texpr.callee.name,\n\t\t\t\t\texpr\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\tthis.hooks.evaluateCallExpressionMember\n\t\t\t.for(\"indexOf\")\n\t\t\t.tap(\"JavascriptParser\", (expr, param) => {\n\t\t\t\tif (!param.isString()) return;\n\t\t\t\tif (expr.arguments.length === 0) return;\n\t\t\t\tconst [arg1, arg2] = expr.arguments;\n\t\t\t\tif (arg1.type === \"SpreadElement\") return;\n\t\t\t\tconst arg1Eval = this.evaluateExpression(arg1);\n\t\t\t\tif (!arg1Eval.isString()) return;\n\t\t\t\tconst arg1Value = /** @type {string} */ (arg1Eval.string);\n\n\t\t\t\tlet result;\n\t\t\t\tif (arg2) {\n\t\t\t\t\tif (arg2.type === \"SpreadElement\") return;\n\t\t\t\t\tconst arg2Eval = this.evaluateExpression(arg2);\n\t\t\t\t\tif (!arg2Eval.isNumber()) return;\n\t\t\t\t\tresult = /** @type {string} */ (param.string).indexOf(\n\t\t\t\t\t\targ1Value,\n\t\t\t\t\t\targ2Eval.number\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tresult = /** @type {string} */ (param.string).indexOf(arg1Value);\n\t\t\t\t}\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setNumber(result)\n\t\t\t\t\t.setSideEffects(param.couldHaveSideEffects())\n\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t});\n\t\tthis.hooks.evaluateCallExpressionMember\n\t\t\t.for(\"replace\")\n\t\t\t.tap(\"JavascriptParser\", (expr, param) => {\n\t\t\t\tif (!param.isString()) return;\n\t\t\t\tif (expr.arguments.length !== 2) return;\n\t\t\t\tif (expr.arguments[0].type === \"SpreadElement\") return;\n\t\t\t\tif (expr.arguments[1].type === \"SpreadElement\") return;\n\t\t\t\tlet arg1 = this.evaluateExpression(expr.arguments[0]);\n\t\t\t\tlet arg2 = this.evaluateExpression(expr.arguments[1]);\n\t\t\t\tif (!arg1.isString() && !arg1.isRegExp()) return;\n\t\t\t\tconst arg1Value = /** @type {string | RegExp} */ (\n\t\t\t\t\targ1.regExp || arg1.string\n\t\t\t\t);\n\t\t\t\tif (!arg2.isString()) return;\n\t\t\t\tconst arg2Value = /** @type {string} */ (arg2.string);\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setString(\n\t\t\t\t\t\t/** @type {string} */ (param.string).replace(arg1Value, arg2Value)\n\t\t\t\t\t)\n\t\t\t\t\t.setSideEffects(param.couldHaveSideEffects())\n\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t});\n\t\t[\"substr\", \"substring\", \"slice\"].forEach(fn => {\n\t\t\tthis.hooks.evaluateCallExpressionMember\n\t\t\t\t.for(fn)\n\t\t\t\t.tap(\"JavascriptParser\", (expr, param) => {\n\t\t\t\t\tif (!param.isString()) return;\n\t\t\t\t\tlet arg1;\n\t\t\t\t\tlet result,\n\t\t\t\t\t\tstr = /** @type {string} */ (param.string);\n\t\t\t\t\tswitch (expr.arguments.length) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tif (expr.arguments[0].type === \"SpreadElement\") return;\n\t\t\t\t\t\t\targ1 = this.evaluateExpression(expr.arguments[0]);\n\t\t\t\t\t\t\tif (!arg1.isNumber()) return;\n\t\t\t\t\t\t\tresult = str[\n\t\t\t\t\t\t\t\t/** @type {\"substr\" | \"substring\" | \"slice\"} */ (fn)\n\t\t\t\t\t\t\t](/** @type {number} */ (arg1.number));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2: {\n\t\t\t\t\t\t\tif (expr.arguments[0].type === \"SpreadElement\") return;\n\t\t\t\t\t\t\tif (expr.arguments[1].type === \"SpreadElement\") return;\n\t\t\t\t\t\t\targ1 = this.evaluateExpression(expr.arguments[0]);\n\t\t\t\t\t\t\tconst arg2 = this.evaluateExpression(expr.arguments[1]);\n\t\t\t\t\t\t\tif (!arg1.isNumber()) return;\n\t\t\t\t\t\t\tif (!arg2.isNumber()) return;\n\t\t\t\t\t\t\tresult = str[\n\t\t\t\t\t\t\t\t/** @type {\"substr\" | \"substring\" | \"slice\"} */ (fn)\n\t\t\t\t\t\t\t](\n\t\t\t\t\t\t\t\t/** @type {number} */ (arg1.number),\n\t\t\t\t\t\t\t\t/** @type {number} */ (arg2.number)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setString(result)\n\t\t\t\t\t\t.setSideEffects(param.couldHaveSideEffects())\n\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t});\n\t\t});\n\n\t\t/**\n\t\t * @param {\"cooked\" | \"raw\"} kind kind of values to get\n\t\t * @param {TemplateLiteral} templateLiteralExpr TemplateLiteral expr\n\t\t * @returns {{quasis: BasicEvaluatedExpression[], parts: BasicEvaluatedExpression[]}} Simplified template\n\t\t */\n\t\tconst getSimplifiedTemplateResult = (kind, templateLiteralExpr) => {\n\t\t\t/** @type {BasicEvaluatedExpression[]} */\n\t\t\tconst quasis = [];\n\t\t\t/** @type {BasicEvaluatedExpression[]} */\n\t\t\tconst parts = [];\n\n\t\t\tfor (let i = 0; i < templateLiteralExpr.quasis.length; i++) {\n\t\t\t\tconst quasiExpr = templateLiteralExpr.quasis[i];\n\t\t\t\tconst quasi = quasiExpr.value[kind];\n\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tconst prevExpr = parts[parts.length - 1];\n\t\t\t\t\tconst expr = this.evaluateExpression(\n\t\t\t\t\t\ttemplateLiteralExpr.expressions[i - 1]\n\t\t\t\t\t);\n\t\t\t\t\tconst exprAsString = expr.asString();\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof exprAsString === \"string\" &&\n\t\t\t\t\t\t!expr.couldHaveSideEffects()\n\t\t\t\t\t) {\n\t\t\t\t\t\t// We can merge quasi + expr + quasi when expr\n\t\t\t\t\t\t// is a const string\n\n\t\t\t\t\t\tprevExpr.setString(prevExpr.string + exprAsString + quasi);\n\t\t\t\t\t\tprevExpr.setRange([\n\t\t\t\t\t\t\t/** @type {Range} */ (prevExpr.range)[0],\n\t\t\t\t\t\t\t/** @type {Range} */ (quasiExpr.range)[1]\n\t\t\t\t\t\t]);\n\t\t\t\t\t\t// We unset the expression as it doesn't match to a single expression\n\t\t\t\t\t\tprevExpr.setExpression(undefined);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tparts.push(expr);\n\t\t\t\t}\n\n\t\t\t\tconst part = new BasicEvaluatedExpression()\n\t\t\t\t\t.setString(/** @type {string} */ (quasi))\n\t\t\t\t\t.setRange(/** @type {Range} */ (quasiExpr.range))\n\t\t\t\t\t.setExpression(quasiExpr);\n\t\t\t\tquasis.push(part);\n\t\t\t\tparts.push(part);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tquasis,\n\t\t\t\tparts\n\t\t\t};\n\t\t};\n\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"TemplateLiteral\")\n\t\t\t.tap(\"JavascriptParser\", _node => {\n\t\t\t\tconst node = /** @type {TemplateLiteral} */ (_node);\n\n\t\t\t\tconst { quasis, parts } = getSimplifiedTemplateResult(\"cooked\", node);\n\t\t\t\tif (parts.length === 1) {\n\t\t\t\t\treturn parts[0].setRange(/** @type {Range} */ (node.range));\n\t\t\t\t}\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setTemplateString(quasis, parts, \"cooked\")\n\t\t\t\t\t.setRange(/** @type {Range} */ (node.range));\n\t\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"TaggedTemplateExpression\")\n\t\t\t.tap(\"JavascriptParser\", _node => {\n\t\t\t\tconst node = /** @type {TaggedTemplateExpression} */ (_node);\n\t\t\t\tconst tag = this.evaluateExpression(node.tag);\n\n\t\t\t\tif (tag.isIdentifier() && tag.identifier === \"String.raw\") {\n\t\t\t\t\tconst { quasis, parts } = getSimplifiedTemplateResult(\n\t\t\t\t\t\t\"raw\",\n\t\t\t\t\t\tnode.quasi\n\t\t\t\t\t);\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setTemplateString(quasis, parts, \"raw\")\n\t\t\t\t\t\t.setRange(/** @type {Range} */ (node.range));\n\t\t\t\t}\n\t\t\t});\n\n\t\tthis.hooks.evaluateCallExpressionMember\n\t\t\t.for(\"concat\")\n\t\t\t.tap(\"JavascriptParser\", (expr, param) => {\n\t\t\t\tif (!param.isString() && !param.isWrapped()) return;\n\t\t\t\tlet stringSuffix = null;\n\t\t\t\tlet hasUnknownParams = false;\n\t\t\t\tconst innerExpressions = [];\n\t\t\t\tfor (let i = expr.arguments.length - 1; i >= 0; i--) {\n\t\t\t\t\tconst arg = expr.arguments[i];\n\t\t\t\t\tif (arg.type === \"SpreadElement\") return;\n\t\t\t\t\tconst argExpr = this.evaluateExpression(arg);\n\t\t\t\t\tif (\n\t\t\t\t\t\thasUnknownParams ||\n\t\t\t\t\t\t(!argExpr.isString() && !argExpr.isNumber())\n\t\t\t\t\t) {\n\t\t\t\t\t\thasUnknownParams = true;\n\t\t\t\t\t\tinnerExpressions.push(argExpr);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t/** @type {string} */\n\t\t\t\t\tconst value = argExpr.isString()\n\t\t\t\t\t\t? /** @type {string} */ (argExpr.string)\n\t\t\t\t\t\t: \"\" + /** @type {number} */ (argExpr.number);\n\n\t\t\t\t\t/** @type {string} */\n\t\t\t\t\tconst newString = value + (stringSuffix ? stringSuffix.string : \"\");\n\t\t\t\t\tconst newRange = /** @type {Range} */ ([\n\t\t\t\t\t\t/** @type {Range} */ (argExpr.range)[0],\n\t\t\t\t\t\t/** @type {Range} */ ((stringSuffix || argExpr).range)[1]\n\t\t\t\t\t]);\n\t\t\t\t\tstringSuffix = new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setString(newString)\n\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t(stringSuffix && stringSuffix.couldHaveSideEffects()) ||\n\t\t\t\t\t\t\t\targExpr.couldHaveSideEffects()\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.setRange(newRange);\n\t\t\t\t}\n\n\t\t\t\tif (hasUnknownParams) {\n\t\t\t\t\tconst prefix = param.isString() ? param : param.prefix;\n\t\t\t\t\tconst inner =\n\t\t\t\t\t\tparam.isWrapped() && param.wrappedInnerExpressions\n\t\t\t\t\t\t\t? param.wrappedInnerExpressions.concat(innerExpressions.reverse())\n\t\t\t\t\t\t\t: innerExpressions.reverse();\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setWrapped(prefix, stringSuffix, inner)\n\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t} else if (param.isWrapped()) {\n\t\t\t\t\tconst postfix = stringSuffix || param.postfix;\n\t\t\t\t\tconst inner = param.wrappedInnerExpressions\n\t\t\t\t\t\t? param.wrappedInnerExpressions.concat(innerExpressions.reverse())\n\t\t\t\t\t\t: innerExpressions.reverse();\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setWrapped(param.prefix, postfix, inner)\n\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t} else {\n\t\t\t\t\tconst newString =\n\t\t\t\t\t\t/** @type {string} */ (param.string) +\n\t\t\t\t\t\t(stringSuffix ? stringSuffix.string : \"\");\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setString(newString)\n\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t(stringSuffix && stringSuffix.couldHaveSideEffects()) ||\n\t\t\t\t\t\t\t\tparam.couldHaveSideEffects()\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t}\n\t\t\t});\n\t\tthis.hooks.evaluateCallExpressionMember\n\t\t\t.for(\"split\")\n\t\t\t.tap(\"JavascriptParser\", (expr, param) => {\n\t\t\t\tif (!param.isString()) return;\n\t\t\t\tif (expr.arguments.length !== 1) return;\n\t\t\t\tif (expr.arguments[0].type === \"SpreadElement\") return;\n\t\t\t\tlet result;\n\t\t\t\tconst arg = this.evaluateExpression(expr.arguments[0]);\n\t\t\t\tif (arg.isString()) {\n\t\t\t\t\tresult =\n\t\t\t\t\t\t/** @type {string} */\n\t\t\t\t\t\t(param.string).split(/** @type {string} */ (arg.string));\n\t\t\t\t} else if (arg.isRegExp()) {\n\t\t\t\t\tresult = /** @type {string} */ (param.string).split(\n\t\t\t\t\t\t/** @type {RegExp} */ (arg.regExp)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setArray(result)\n\t\t\t\t\t.setSideEffects(param.couldHaveSideEffects())\n\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"ConditionalExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {ConditionalExpression} */ (_expr);\n\n\t\t\t\tconst condition = this.evaluateExpression(expr.test);\n\t\t\t\tconst conditionValue = condition.asBool();\n\t\t\t\tlet res;\n\t\t\t\tif (conditionValue === undefined) {\n\t\t\t\t\tconst consequent = this.evaluateExpression(expr.consequent);\n\t\t\t\t\tconst alternate = this.evaluateExpression(expr.alternate);\n\t\t\t\t\tres = new BasicEvaluatedExpression();\n\t\t\t\t\tif (consequent.isConditional()) {\n\t\t\t\t\t\tres.setOptions(\n\t\t\t\t\t\t\t/** @type {BasicEvaluatedExpression[]} */ (consequent.options)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres.setOptions([consequent]);\n\t\t\t\t\t}\n\t\t\t\t\tif (alternate.isConditional()) {\n\t\t\t\t\t\tres.addOptions(\n\t\t\t\t\t\t\t/** @type {BasicEvaluatedExpression[]} */ (alternate.options)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres.addOptions([alternate]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tres = this.evaluateExpression(\n\t\t\t\t\t\tconditionValue ? expr.consequent : expr.alternate\n\t\t\t\t\t);\n\t\t\t\t\tif (condition.couldHaveSideEffects()) res.setSideEffects();\n\t\t\t\t}\n\t\t\t\tres.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\treturn res;\n\t\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"ArrayExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {ArrayExpression} */ (_expr);\n\n\t\t\t\tconst items = expr.elements.map(element => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\telement !== null &&\n\t\t\t\t\t\telement.type !== \"SpreadElement\" &&\n\t\t\t\t\t\tthis.evaluateExpression(element)\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\tif (!items.every(Boolean)) return;\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setItems(/** @type {BasicEvaluatedExpression[]} */ (items))\n\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"ChainExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {ChainExpression} */ (_expr);\n\t\t\t\t/** @type {Expression[]} */\n\t\t\t\tconst optionalExpressionsStack = [];\n\t\t\t\t/** @type {Expression|Super} */\n\t\t\t\tlet next = expr.expression;\n\n\t\t\t\twhile (\n\t\t\t\t\tnext.type === \"MemberExpression\" ||\n\t\t\t\t\tnext.type === \"CallExpression\"\n\t\t\t\t) {\n\t\t\t\t\tif (next.type === \"MemberExpression\") {\n\t\t\t\t\t\tif (next.optional) {\n\t\t\t\t\t\t\t// SuperNode can not be optional\n\t\t\t\t\t\t\toptionalExpressionsStack.push(\n\t\t\t\t\t\t\t\t/** @type {Expression} */ (next.object)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnext = next.object;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (next.optional) {\n\t\t\t\t\t\t\t// SuperNode can not be optional\n\t\t\t\t\t\t\toptionalExpressionsStack.push(\n\t\t\t\t\t\t\t\t/** @type {Expression} */ (next.callee)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnext = next.callee;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\twhile (optionalExpressionsStack.length > 0) {\n\t\t\t\t\tconst expression =\n\t\t\t\t\t\t/** @type {Expression} */\n\t\t\t\t\t\t(optionalExpressionsStack.pop());\n\t\t\t\t\tconst evaluated = this.evaluateExpression(expression);\n\n\t\t\t\t\tif (evaluated.asNullish()) {\n\t\t\t\t\t\treturn evaluated.setRange(/** @type {Range} */ (_expr.range));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.evaluateExpression(expr.expression);\n\t\t\t});\n\t}\n\n\t/**\n\t * @param {Expression} node node\n\t * @returns {Set<string>|undefined} destructured identifiers\n\t */\n\tdestructuringAssignmentPropertiesFor(node) {\n\t\tif (!this.destructuringAssignmentProperties) return undefined;\n\t\treturn this.destructuringAssignmentProperties.get(node);\n\t}\n\n\t/**\n\t * @param {Expression} expr expression\n\t * @returns {string | VariableInfoInterface | undefined} identifier\n\t */\n\tgetRenameIdentifier(expr) {\n\t\tconst result = this.evaluateExpression(expr);\n\t\tif (result.isIdentifier()) {\n\t\t\treturn result.identifier;\n\t\t}\n\t}\n\n\t/**\n\t * @param {ClassExpression | ClassDeclaration} classy a class node\n\t * @returns {void}\n\t */\n\twalkClass(classy) {\n\t\tif (classy.superClass) {\n\t\t\tif (!this.hooks.classExtendsExpression.call(classy.superClass, classy)) {\n\t\t\t\tthis.walkExpression(classy.superClass);\n\t\t\t}\n\t\t}\n\t\tif (classy.body && classy.body.type === \"ClassBody\") {\n\t\t\tconst scopeParams = [];\n\t\t\t// Add class name in scope for recursive calls\n\t\t\tif (classy.id) {\n\t\t\t\tscopeParams.push(classy.id);\n\t\t\t}\n\t\t\tthis.inClassScope(true, scopeParams, () => {\n\t\t\t\tfor (const classElement of /** @type {TODO} */ (classy.body.body)) {\n\t\t\t\t\tif (!this.hooks.classBodyElement.call(classElement, classy)) {\n\t\t\t\t\t\tif (classElement.computed && classElement.key) {\n\t\t\t\t\t\t\tthis.walkExpression(classElement.key);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (classElement.value) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!this.hooks.classBodyValue.call(\n\t\t\t\t\t\t\t\t\tclassElement.value,\n\t\t\t\t\t\t\t\t\tclassElement,\n\t\t\t\t\t\t\t\t\tclassy\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\t\t\t\t\t\t\tthis.scope.topLevelScope = false;\n\t\t\t\t\t\t\t\tthis.walkExpression(classElement.value);\n\t\t\t\t\t\t\t\tthis.scope.topLevelScope = wasTopLevel;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (classElement.type === \"StaticBlock\") {\n\t\t\t\t\t\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\t\t\t\t\t\tthis.scope.topLevelScope = false;\n\t\t\t\t\t\t\tthis.walkBlockStatement(classElement);\n\t\t\t\t\t\t\tthis.scope.topLevelScope = wasTopLevel;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Pre walking iterates the scope for variable declarations\n\t *\n\t * @param {(Statement | ModuleDeclaration)[]} statements statements\n\t */\n\tpreWalkStatements(statements) {\n\t\tfor (let index = 0, len = statements.length; index < len; index++) {\n\t\t\tconst statement = statements[index];\n\t\t\tthis.preWalkStatement(statement);\n\t\t}\n\t}\n\n\t/**\n\t * Block pre walking iterates the scope for block variable declarations\n\t *\n\t * @param {(Statement | ModuleDeclaration)[]} statements statements\n\t */\n\tblockPreWalkStatements(statements) {\n\t\tfor (let index = 0, len = statements.length; index < len; index++) {\n\t\t\tconst statement = statements[index];\n\t\t\tthis.blockPreWalkStatement(statement);\n\t\t}\n\t}\n\n\t/**\n\t * Walking iterates the statements and expressions and processes them\n\t *\n\t * @param {(Statement | ModuleDeclaration)[]} statements statements\n\t */\n\twalkStatements(statements) {\n\t\tfor (let index = 0, len = statements.length; index < len; index++) {\n\t\t\tconst statement = statements[index];\n\t\t\tthis.walkStatement(statement);\n\t\t}\n\t}\n\n\t/**\n\t * Walking iterates the statements and expressions and processes them\n\t *\n\t * @param {Statement | ModuleDeclaration} statement statement\n\t */\n\tpreWalkStatement(statement) {\n\t\tthis.statementPath.push(statement);\n\t\tif (this.hooks.preStatement.call(statement)) {\n\t\t\tthis.prevStatement = this.statementPath.pop();\n\t\t\treturn;\n\t\t}\n\t\tswitch (statement.type) {\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tthis.preWalkBlockStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"DoWhileStatement\":\n\t\t\t\tthis.preWalkDoWhileStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForInStatement\":\n\t\t\t\tthis.preWalkForInStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForOfStatement\":\n\t\t\t\tthis.preWalkForOfStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tthis.preWalkForStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tthis.preWalkFunctionDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tthis.preWalkIfStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"LabeledStatement\":\n\t\t\t\tthis.preWalkLabeledStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"SwitchStatement\":\n\t\t\t\tthis.preWalkSwitchStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"TryStatement\":\n\t\t\t\tthis.preWalkTryStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tthis.preWalkVariableDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"WhileStatement\":\n\t\t\t\tthis.preWalkWhileStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"WithStatement\":\n\t\t\t\tthis.preWalkWithStatement(statement);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.prevStatement = this.statementPath.pop();\n\t}\n\n\t/**\n\t * @param {Statement | ModuleDeclaration} statement statement\n\t */\n\tblockPreWalkStatement(statement) {\n\t\tthis.statementPath.push(statement);\n\t\tif (this.hooks.blockPreStatement.call(statement)) {\n\t\t\tthis.prevStatement = this.statementPath.pop();\n\t\t\treturn;\n\t\t}\n\t\tswitch (statement.type) {\n\t\t\tcase \"ImportDeclaration\":\n\t\t\t\tthis.blockPreWalkImportDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExportAllDeclaration\":\n\t\t\t\tthis.blockPreWalkExportAllDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExportDefaultDeclaration\":\n\t\t\t\tthis.blockPreWalkExportDefaultDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExportNamedDeclaration\":\n\t\t\t\tthis.blockPreWalkExportNamedDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tthis.blockPreWalkVariableDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ClassDeclaration\":\n\t\t\t\tthis.blockPreWalkClassDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExpressionStatement\":\n\t\t\t\tthis.blockPreWalkExpressionStatement(statement);\n\t\t}\n\t\tthis.prevStatement = this.statementPath.pop();\n\t}\n\n\t/**\n\t * @param {Statement | ModuleDeclaration} statement statement\n\t */\n\twalkStatement(statement) {\n\t\tthis.statementPath.push(statement);\n\t\tif (this.hooks.statement.call(statement) !== undefined) {\n\t\t\tthis.prevStatement = this.statementPath.pop();\n\t\t\treturn;\n\t\t}\n\t\tswitch (statement.type) {\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tthis.walkBlockStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ClassDeclaration\":\n\t\t\t\tthis.walkClassDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"DoWhileStatement\":\n\t\t\t\tthis.walkDoWhileStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExportDefaultDeclaration\":\n\t\t\t\tthis.walkExportDefaultDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExportNamedDeclaration\":\n\t\t\t\tthis.walkExportNamedDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExpressionStatement\":\n\t\t\t\tthis.walkExpressionStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForInStatement\":\n\t\t\t\tthis.walkForInStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForOfStatement\":\n\t\t\t\tthis.walkForOfStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tthis.walkForStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tthis.walkFunctionDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tthis.walkIfStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"LabeledStatement\":\n\t\t\t\tthis.walkLabeledStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ReturnStatement\":\n\t\t\t\tthis.walkReturnStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"SwitchStatement\":\n\t\t\t\tthis.walkSwitchStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ThrowStatement\":\n\t\t\t\tthis.walkThrowStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"TryStatement\":\n\t\t\t\tthis.walkTryStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tthis.walkVariableDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"WhileStatement\":\n\t\t\t\tthis.walkWhileStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"WithStatement\":\n\t\t\t\tthis.walkWithStatement(statement);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.prevStatement = this.statementPath.pop();\n\t}\n\n\t/**\n\t * Walks a statements that is nested within a parent statement\n\t * and can potentially be a non-block statement.\n\t * This enforces the nested statement to never be in ASI position.\n\t *\n\t * @param {Statement} statement the nested statement\n\t */\n\twalkNestedStatement(statement) {\n\t\tthis.prevStatement = undefined;\n\t\tthis.walkStatement(statement);\n\t}\n\n\t// Real Statements\n\t/**\n\t * @param {BlockStatement} statement block statement\n\t */\n\tpreWalkBlockStatement(statement) {\n\t\tthis.preWalkStatements(statement.body);\n\t}\n\n\t/**\n\t * @param {BlockStatement} statement block statement\n\t */\n\twalkBlockStatement(statement) {\n\t\tthis.inBlockScope(() => {\n\t\t\tconst body = statement.body;\n\t\t\tconst prev = this.prevStatement;\n\t\t\tthis.blockPreWalkStatements(body);\n\t\t\tthis.prevStatement = prev;\n\t\t\tthis.walkStatements(body);\n\t\t});\n\t}\n\n\t/**\n\t * @param {ExpressionStatement} statement expression statement\n\t */\n\twalkExpressionStatement(statement) {\n\t\tthis.walkExpression(statement.expression);\n\t}\n\n\t/**\n\t * @param {IfStatement} statement if statement\n\t */\n\tpreWalkIfStatement(statement) {\n\t\tthis.preWalkStatement(statement.consequent);\n\t\tif (statement.alternate) {\n\t\t\tthis.preWalkStatement(statement.alternate);\n\t\t}\n\t}\n\n\t/**\n\t * @param {IfStatement} statement if statement\n\t */\n\twalkIfStatement(statement) {\n\t\tconst result = this.hooks.statementIf.call(statement);\n\t\tif (result === undefined) {\n\t\t\tthis.walkExpression(statement.test);\n\t\t\tthis.walkNestedStatement(statement.consequent);\n\t\t\tif (statement.alternate) {\n\t\t\t\tthis.walkNestedStatement(statement.alternate);\n\t\t\t}\n\t\t} else {\n\t\t\tif (result) {\n\t\t\t\tthis.walkNestedStatement(statement.consequent);\n\t\t\t} else if (statement.alternate) {\n\t\t\t\tthis.walkNestedStatement(statement.alternate);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {LabeledStatement} statement with statement\n\t */\n\tpreWalkLabeledStatement(statement) {\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\t/**\n\t * @param {LabeledStatement} statement with statement\n\t */\n\twalkLabeledStatement(statement) {\n\t\tconst hook = this.hooks.label.get(statement.label.name);\n\t\tif (hook !== undefined) {\n\t\t\tconst result = hook.call(statement);\n\t\t\tif (result === true) return;\n\t\t}\n\t\tthis.walkNestedStatement(statement.body);\n\t}\n\n\t/**\n\t * @param {WithStatement} statement with statement\n\t */\n\tpreWalkWithStatement(statement) {\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\t/**\n\t * @param {WithStatement} statement with statement\n\t */\n\twalkWithStatement(statement) {\n\t\tthis.walkExpression(statement.object);\n\t\tthis.walkNestedStatement(statement.body);\n\t}\n\n\t/**\n\t * @param {SwitchStatement} statement switch statement\n\t */\n\tpreWalkSwitchStatement(statement) {\n\t\tthis.preWalkSwitchCases(statement.cases);\n\t}\n\n\t/**\n\t * @param {SwitchStatement} statement switch statement\n\t */\n\twalkSwitchStatement(statement) {\n\t\tthis.walkExpression(statement.discriminant);\n\t\tthis.walkSwitchCases(statement.cases);\n\t}\n\n\t/**\n\t * @param {ReturnStatement | ThrowStatement} statement return or throw statement\n\t */\n\twalkTerminatingStatement(statement) {\n\t\tif (statement.argument) this.walkExpression(statement.argument);\n\t}\n\n\t/**\n\t * @param {ReturnStatement} statement return statement\n\t */\n\twalkReturnStatement(statement) {\n\t\tthis.walkTerminatingStatement(statement);\n\t}\n\n\t/**\n\t * @param {ThrowStatement} statement return statement\n\t */\n\twalkThrowStatement(statement) {\n\t\tthis.walkTerminatingStatement(statement);\n\t}\n\n\t/**\n\t * @param {TryStatement} statement try statement\n\t */\n\tpreWalkTryStatement(statement) {\n\t\tthis.preWalkStatement(statement.block);\n\t\tif (statement.handler) this.preWalkCatchClause(statement.handler);\n\t\tif (statement.finalizer) this.preWalkStatement(statement.finalizer);\n\t}\n\n\t/**\n\t * @param {TryStatement} statement try statement\n\t */\n\twalkTryStatement(statement) {\n\t\tif (this.scope.inTry) {\n\t\t\tthis.walkStatement(statement.block);\n\t\t} else {\n\t\t\tthis.scope.inTry = true;\n\t\t\tthis.walkStatement(statement.block);\n\t\t\tthis.scope.inTry = false;\n\t\t}\n\t\tif (statement.handler) this.walkCatchClause(statement.handler);\n\t\tif (statement.finalizer) this.walkStatement(statement.finalizer);\n\t}\n\n\t/**\n\t * @param {WhileStatement} statement while statement\n\t */\n\tpreWalkWhileStatement(statement) {\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\t/**\n\t * @param {WhileStatement} statement while statement\n\t */\n\twalkWhileStatement(statement) {\n\t\tthis.walkExpression(statement.test);\n\t\tthis.walkNestedStatement(statement.body);\n\t}\n\n\t/**\n\t * @param {DoWhileStatement} statement do while statement\n\t */\n\tpreWalkDoWhileStatement(statement) {\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\t/**\n\t * @param {DoWhileStatement} statement do while statement\n\t */\n\twalkDoWhileStatement(statement) {\n\t\tthis.walkNestedStatement(statement.body);\n\t\tthis.walkExpression(statement.test);\n\t}\n\n\t/**\n\t * @param {ForStatement} statement for statement\n\t */\n\tpreWalkForStatement(statement) {\n\t\tif (statement.init) {\n\t\t\tif (statement.init.type === \"VariableDeclaration\") {\n\t\t\t\tthis.preWalkStatement(statement.init);\n\t\t\t}\n\t\t}\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\t/**\n\t * @param {ForStatement} statement for statement\n\t */\n\twalkForStatement(statement) {\n\t\tthis.inBlockScope(() => {\n\t\t\tif (statement.init) {\n\t\t\t\tif (statement.init.type === \"VariableDeclaration\") {\n\t\t\t\t\tthis.blockPreWalkVariableDeclaration(statement.init);\n\t\t\t\t\tthis.prevStatement = undefined;\n\t\t\t\t\tthis.walkStatement(statement.init);\n\t\t\t\t} else {\n\t\t\t\t\tthis.walkExpression(statement.init);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (statement.test) {\n\t\t\t\tthis.walkExpression(statement.test);\n\t\t\t}\n\t\t\tif (statement.update) {\n\t\t\t\tthis.walkExpression(statement.update);\n\t\t\t}\n\t\t\tconst body = statement.body;\n\t\t\tif (body.type === \"BlockStatement\") {\n\t\t\t\t// no need to add additional scope\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.blockPreWalkStatements(body.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatements(body.body);\n\t\t\t} else {\n\t\t\t\tthis.walkNestedStatement(body);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @param {ForInStatement} statement for statement\n\t */\n\tpreWalkForInStatement(statement) {\n\t\tif (statement.left.type === \"VariableDeclaration\") {\n\t\t\tthis.preWalkVariableDeclaration(statement.left);\n\t\t}\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\t/**\n\t * @param {ForInStatement} statement for statement\n\t */\n\twalkForInStatement(statement) {\n\t\tthis.inBlockScope(() => {\n\t\t\tif (statement.left.type === \"VariableDeclaration\") {\n\t\t\t\tthis.blockPreWalkVariableDeclaration(statement.left);\n\t\t\t\tthis.walkVariableDeclaration(statement.left);\n\t\t\t} else {\n\t\t\t\tthis.walkPattern(statement.left);\n\t\t\t}\n\t\t\tthis.walkExpression(statement.right);\n\t\t\tconst body = statement.body;\n\t\t\tif (body.type === \"BlockStatement\") {\n\t\t\t\t// no need to add additional scope\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.blockPreWalkStatements(body.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatements(body.body);\n\t\t\t} else {\n\t\t\t\tthis.walkNestedStatement(body);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @param {ForOfStatement} statement statement\n\t */\n\tpreWalkForOfStatement(statement) {\n\t\tif (statement.await && this.scope.topLevelScope === true) {\n\t\t\tthis.hooks.topLevelAwait.call(statement);\n\t\t}\n\t\tif (statement.left.type === \"VariableDeclaration\") {\n\t\t\tthis.preWalkVariableDeclaration(statement.left);\n\t\t}\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\t/**\n\t * @param {ForOfStatement} statement for statement\n\t */\n\twalkForOfStatement(statement) {\n\t\tthis.inBlockScope(() => {\n\t\t\tif (statement.left.type === \"VariableDeclaration\") {\n\t\t\t\tthis.blockPreWalkVariableDeclaration(statement.left);\n\t\t\t\tthis.walkVariableDeclaration(statement.left);\n\t\t\t} else {\n\t\t\t\tthis.walkPattern(statement.left);\n\t\t\t}\n\t\t\tthis.walkExpression(statement.right);\n\t\t\tconst body = statement.body;\n\t\t\tif (body.type === \"BlockStatement\") {\n\t\t\t\t// no need to add additional scope\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.blockPreWalkStatements(body.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatements(body.body);\n\t\t\t} else {\n\t\t\t\tthis.walkNestedStatement(body);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @param {FunctionDeclaration} statement function declaration\n\t */\n\tpreWalkFunctionDeclaration(statement) {\n\t\tif (statement.id) {\n\t\t\tthis.defineVariable(statement.id.name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {FunctionDeclaration} statement function declaration\n\t */\n\twalkFunctionDeclaration(statement) {\n\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\tthis.scope.topLevelScope = false;\n\t\tthis.inFunctionScope(true, statement.params, () => {\n\t\t\tfor (const param of statement.params) {\n\t\t\t\tthis.walkPattern(param);\n\t\t\t}\n\t\t\tif (statement.body.type === \"BlockStatement\") {\n\t\t\t\tthis.detectMode(statement.body.body);\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.preWalkStatement(statement.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatement(statement.body);\n\t\t\t} else {\n\t\t\t\tthis.walkExpression(statement.body);\n\t\t\t}\n\t\t});\n\t\tthis.scope.topLevelScope = wasTopLevel;\n\t}\n\n\t/**\n\t * @param {ExpressionStatement} statement expression statement\n\t */\n\tblockPreWalkExpressionStatement(statement) {\n\t\tconst expression = statement.expression;\n\t\tswitch (expression.type) {\n\t\t\tcase \"AssignmentExpression\":\n\t\t\t\tthis.preWalkAssignmentExpression(expression);\n\t\t}\n\t}\n\n\t/**\n\t * @param {AssignmentExpression} expression assignment expression\n\t */\n\tpreWalkAssignmentExpression(expression) {\n\t\tif (\n\t\t\texpression.left.type !== \"ObjectPattern\" ||\n\t\t\t!this.destructuringAssignmentProperties\n\t\t)\n\t\t\treturn;\n\t\tconst keys = this._preWalkObjectPattern(expression.left);\n\t\tif (!keys) return;\n\n\t\t// check multiple assignments\n\t\tif (this.destructuringAssignmentProperties.has(expression)) {\n\t\t\tconst set =\n\t\t\t\t/** @type {Set<string>} */\n\t\t\t\t(this.destructuringAssignmentProperties.get(expression));\n\t\t\tthis.destructuringAssignmentProperties.delete(expression);\n\t\t\tfor (const id of set) keys.add(id);\n\t\t}\n\n\t\tthis.destructuringAssignmentProperties.set(\n\t\t\texpression.right.type === \"AwaitExpression\"\n\t\t\t\t? expression.right.argument\n\t\t\t\t: expression.right,\n\t\t\tkeys\n\t\t);\n\n\t\tif (expression.right.type === \"AssignmentExpression\") {\n\t\t\tthis.preWalkAssignmentExpression(expression.right);\n\t\t}\n\t}\n\n\t/**\n\t * @param {ImportDeclaration} statement statement\n\t */\n\tblockPreWalkImportDeclaration(statement) {\n\t\tconst source = /** @type {ImportSource} */ (statement.source.value);\n\t\tthis.hooks.import.call(statement, source);\n\t\tfor (const specifier of statement.specifiers) {\n\t\t\tconst name = specifier.local.name;\n\t\t\tswitch (specifier.type) {\n\t\t\t\tcase \"ImportDefaultSpecifier\":\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.hooks.importSpecifier.call(statement, source, \"default\", name)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.defineVariable(name);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ImportSpecifier\":\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.hooks.importSpecifier.call(\n\t\t\t\t\t\t\tstatement,\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\tspecifier.imported.name ||\n\t\t\t\t\t\t\t\t// eslint-disable-next-line no-warning-comments\n\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\t// Old version of acorn used it\n\t\t\t\t\t\t\t\t// TODO drop it in webpack@6\n\t\t\t\t\t\t\t\tspecifier.imported.value,\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.defineVariable(name);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ImportNamespaceSpecifier\":\n\t\t\t\t\tif (!this.hooks.importSpecifier.call(statement, source, null, name)) {\n\t\t\t\t\t\tthis.defineVariable(name);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.defineVariable(name);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {Declaration} declaration declaration\n\t * @param {OnIdent} onIdent on ident callback\n\t */\n\tenterDeclaration(declaration, onIdent) {\n\t\tswitch (declaration.type) {\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tfor (const declarator of declaration.declarations) {\n\t\t\t\t\tswitch (declarator.type) {\n\t\t\t\t\t\tcase \"VariableDeclarator\": {\n\t\t\t\t\t\t\tthis.enterPattern(declarator.id, onIdent);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tthis.enterPattern(declaration.id, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"ClassDeclaration\":\n\t\t\t\tthis.enterPattern(declaration.id, onIdent);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * @param {ExportNamedDeclaration} statement statement\n\t */\n\tblockPreWalkExportNamedDeclaration(statement) {\n\t\tlet source;\n\t\tif (statement.source) {\n\t\t\tsource = /** @type {ImportSource} */ (statement.source.value);\n\t\t\tthis.hooks.exportImport.call(statement, source);\n\t\t} else {\n\t\t\tthis.hooks.export.call(statement);\n\t\t}\n\t\tif (statement.declaration) {\n\t\t\tif (\n\t\t\t\t!this.hooks.exportDeclaration.call(statement, statement.declaration)\n\t\t\t) {\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.preWalkStatement(statement.declaration);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.blockPreWalkStatement(statement.declaration);\n\t\t\t\tlet index = 0;\n\t\t\t\tthis.enterDeclaration(statement.declaration, def => {\n\t\t\t\t\tthis.hooks.exportSpecifier.call(statement, def, def, index++);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (statement.specifiers) {\n\t\t\tfor (\n\t\t\t\tlet specifierIndex = 0;\n\t\t\t\tspecifierIndex < statement.specifiers.length;\n\t\t\t\tspecifierIndex++\n\t\t\t) {\n\t\t\t\tconst specifier = statement.specifiers[specifierIndex];\n\t\t\t\tswitch (specifier.type) {\n\t\t\t\t\tcase \"ExportSpecifier\": {\n\t\t\t\t\t\tconst name =\n\t\t\t\t\t\t\tspecifier.exported.name ||\n\t\t\t\t\t\t\t// eslint-disable-next-line no-warning-comments\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t// Old version of acorn used it\n\t\t\t\t\t\t\t// TODO drop it in webpack@6\n\t\t\t\t\t\t\tspecifier.exported.value;\n\t\t\t\t\t\tif (source) {\n\t\t\t\t\t\t\tthis.hooks.exportImportSpecifier.call(\n\t\t\t\t\t\t\t\tstatement,\n\t\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\t\tspecifier.local.name,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tspecifierIndex\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.hooks.exportSpecifier.call(\n\t\t\t\t\t\t\t\tstatement,\n\t\t\t\t\t\t\t\tspecifier.local.name,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tspecifierIndex\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {ExportNamedDeclaration} statement the statement\n\t */\n\twalkExportNamedDeclaration(statement) {\n\t\tif (statement.declaration) {\n\t\t\tthis.walkStatement(statement.declaration);\n\t\t}\n\t}\n\n\t/**\n\t * @param {TODO} statement statement\n\t */\n\tblockPreWalkExportDefaultDeclaration(statement) {\n\t\tconst prev = this.prevStatement;\n\t\tthis.preWalkStatement(statement.declaration);\n\t\tthis.prevStatement = prev;\n\t\tthis.blockPreWalkStatement(statement.declaration);\n\t\tif (\n\t\t\t/** @type {FunctionDeclaration | ClassDeclaration} */ (\n\t\t\t\tstatement.declaration\n\t\t\t).id &&\n\t\t\tstatement.declaration.type !== \"FunctionExpression\" &&\n\t\t\tstatement.declaration.type !== \"ClassExpression\"\n\t\t) {\n\t\t\tconst declaration =\n\t\t\t\t/** @type {FunctionDeclaration | ClassDeclaration} */\n\t\t\t\t(statement.declaration);\n\t\t\tthis.hooks.exportSpecifier.call(\n\t\t\t\tstatement,\n\t\t\t\tdeclaration.id.name,\n\t\t\t\t\"default\",\n\t\t\t\tundefined\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {ExportDefaultDeclaration} statement statement\n\t */\n\twalkExportDefaultDeclaration(statement) {\n\t\tthis.hooks.export.call(statement);\n\t\tif (\n\t\t\t/** @type {FunctionDeclaration | ClassDeclaration} */ (\n\t\t\t\tstatement.declaration\n\t\t\t).id &&\n\t\t\tstatement.declaration.type !== \"FunctionExpression\" &&\n\t\t\tstatement.declaration.type !== \"ClassExpression\"\n\t\t) {\n\t\t\tconst declaration =\n\t\t\t\t/** @type {FunctionDeclaration | ClassDeclaration} */\n\t\t\t\t(statement.declaration);\n\t\t\tif (!this.hooks.exportDeclaration.call(statement, declaration)) {\n\t\t\t\tthis.walkStatement(declaration);\n\t\t\t}\n\t\t} else {\n\t\t\t// Acorn parses `export default function() {}` as `FunctionDeclaration` and\n\t\t\t// `export default class {}` as `ClassDeclaration`, both with `id = null`.\n\t\t\t// These nodes must be treated as expressions.\n\t\t\tif (\n\t\t\t\tstatement.declaration.type === \"FunctionDeclaration\" ||\n\t\t\t\tstatement.declaration.type === \"ClassDeclaration\"\n\t\t\t) {\n\t\t\t\tthis.walkStatement(\n\t\t\t\t\t/** @type {FunctionDeclaration | ClassDeclaration} */\n\t\t\t\t\t(statement.declaration)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.walkExpression(statement.declaration);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t!this.hooks.exportExpression.call(\n\t\t\t\t\tstatement,\n\t\t\t\t\t/** @type {TODO} */ (statement).declaration\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.hooks.exportSpecifier.call(\n\t\t\t\t\tstatement,\n\t\t\t\t\t/** @type {TODO} */ (statement.declaration),\n\t\t\t\t\t\"default\",\n\t\t\t\t\tundefined\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {ExportAllDeclaration} statement statement\n\t */\n\tblockPreWalkExportAllDeclaration(statement) {\n\t\tconst source = /** @type {ImportSource} */ (statement.source.value);\n\t\tconst name = statement.exported ? statement.exported.name : null;\n\t\tthis.hooks.exportImport.call(statement, source);\n\t\tthis.hooks.exportImportSpecifier.call(statement, source, null, name, 0);\n\t}\n\n\t/**\n\t * @param {VariableDeclaration} statement variable declaration\n\t */\n\tpreWalkVariableDeclaration(statement) {\n\t\tif (statement.kind !== \"var\") return;\n\t\tthis._preWalkVariableDeclaration(statement, this.hooks.varDeclarationVar);\n\t}\n\n\t/**\n\t * @param {VariableDeclaration} statement variable declaration\n\t */\n\tblockPreWalkVariableDeclaration(statement) {\n\t\tif (statement.kind === \"var\") return;\n\t\tconst hookMap =\n\t\t\tstatement.kind === \"const\"\n\t\t\t\t? this.hooks.varDeclarationConst\n\t\t\t\t: this.hooks.varDeclarationLet;\n\t\tthis._preWalkVariableDeclaration(statement, hookMap);\n\t}\n\n\t/**\n\t * @param {VariableDeclaration} statement variable declaration\n\t * @param {TODO} hookMap map of hooks\n\t */\n\t_preWalkVariableDeclaration(statement, hookMap) {\n\t\tfor (const declarator of statement.declarations) {\n\t\t\tswitch (declarator.type) {\n\t\t\t\tcase \"VariableDeclarator\": {\n\t\t\t\t\tthis.preWalkVariableDeclarator(declarator);\n\t\t\t\t\tif (!this.hooks.preDeclarator.call(declarator, statement)) {\n\t\t\t\t\t\tthis.enterPattern(declarator.id, (name, decl) => {\n\t\t\t\t\t\t\tlet hook = hookMap.get(name);\n\t\t\t\t\t\t\tif (hook === undefined || !hook.call(decl)) {\n\t\t\t\t\t\t\t\thook = this.hooks.varDeclaration.get(name);\n\t\t\t\t\t\t\t\tif (hook === undefined || !hook.call(decl)) {\n\t\t\t\t\t\t\t\t\tthis.defineVariable(name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {ObjectPattern} objectPattern object pattern\n\t * @returns {Set<string> | undefined} set of names or undefined if not all keys are identifiers\n\t */\n\t_preWalkObjectPattern(objectPattern) {\n\t\tconst ids = new Set();\n\t\tconst properties = objectPattern.properties;\n\t\tfor (let i = 0; i < properties.length; i++) {\n\t\t\tconst property = properties[i];\n\t\t\tif (property.type !== \"Property\") return;\n\t\t\tconst key = property.key;\n\t\t\tif (key.type === \"Identifier\") {\n\t\t\t\tids.add(key.name);\n\t\t\t} else {\n\t\t\t\tconst id = this.evaluateExpression(/** @type {TODO} */ (key));\n\t\t\t\tconst str = id.asString();\n\t\t\t\tif (str) {\n\t\t\t\t\tids.add(str);\n\t\t\t\t} else {\n\t\t\t\t\t// could not evaluate key\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ids;\n\t}\n\n\t/**\n\t * @param {VariableDeclarator} declarator variable declarator\n\t */\n\tpreWalkVariableDeclarator(declarator) {\n\t\tif (\n\t\t\t!declarator.init ||\n\t\t\tdeclarator.id.type !== \"ObjectPattern\" ||\n\t\t\t!this.destructuringAssignmentProperties\n\t\t)\n\t\t\treturn;\n\t\tconst keys = this._preWalkObjectPattern(declarator.id);\n\n\t\tif (!keys) return;\n\t\tthis.destructuringAssignmentProperties.set(\n\t\t\tdeclarator.init.type === \"AwaitExpression\"\n\t\t\t\t? declarator.init.argument\n\t\t\t\t: declarator.init,\n\t\t\tkeys\n\t\t);\n\n\t\tif (declarator.init.type === \"AssignmentExpression\") {\n\t\t\tthis.preWalkAssignmentExpression(declarator.init);\n\t\t}\n\t}\n\n\t/**\n\t * @param {VariableDeclaration} statement variable declaration\n\t */\n\twalkVariableDeclaration(statement) {\n\t\tfor (const declarator of statement.declarations) {\n\t\t\tswitch (declarator.type) {\n\t\t\t\tcase \"VariableDeclarator\": {\n\t\t\t\t\tconst renameIdentifier =\n\t\t\t\t\t\tdeclarator.init && this.getRenameIdentifier(declarator.init);\n\t\t\t\t\tif (renameIdentifier && declarator.id.type === \"Identifier\") {\n\t\t\t\t\t\tconst hook = this.hooks.canRename.get(renameIdentifier);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\thook !== undefined &&\n\t\t\t\t\t\t\thook.call(/** @type {Expression} */ (declarator.init))\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// renaming with \"var a = b;\"\n\t\t\t\t\t\t\tconst hook = this.hooks.rename.get(renameIdentifier);\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\thook === undefined ||\n\t\t\t\t\t\t\t\t!hook.call(/** @type {Expression} */ (declarator.init))\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthis.setVariable(declarator.id.name, renameIdentifier);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!this.hooks.declarator.call(declarator, statement)) {\n\t\t\t\t\t\tthis.walkPattern(declarator.id);\n\t\t\t\t\t\tif (declarator.init) this.walkExpression(declarator.init);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {ClassDeclaration} statement class declaration\n\t */\n\tblockPreWalkClassDeclaration(statement) {\n\t\tif (statement.id) {\n\t\t\tthis.defineVariable(statement.id.name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {ClassDeclaration} statement class declaration\n\t */\n\twalkClassDeclaration(statement) {\n\t\tthis.walkClass(statement);\n\t}\n\n\t/**\n\t * @param {SwitchCase[]} switchCases switch statement\n\t */\n\tpreWalkSwitchCases(switchCases) {\n\t\tfor (let index = 0, len = switchCases.length; index < len; index++) {\n\t\t\tconst switchCase = switchCases[index];\n\t\t\tthis.preWalkStatements(switchCase.consequent);\n\t\t}\n\t}\n\n\t/**\n\t * @param {SwitchCase[]} switchCases switch statement\n\t */\n\twalkSwitchCases(switchCases) {\n\t\tthis.inBlockScope(() => {\n\t\t\tconst len = switchCases.length;\n\n\t\t\t// we need to pre walk all statements first since we can have invalid code\n\t\t\t// import A from \"module\";\n\t\t\t// switch(1) {\n\t\t\t//    case 1:\n\t\t\t//      console.log(A); // should fail at runtime\n\t\t\t//    case 2:\n\t\t\t//      const A = 1;\n\t\t\t// }\n\t\t\tfor (let index = 0; index < len; index++) {\n\t\t\t\tconst switchCase = switchCases[index];\n\n\t\t\t\tif (switchCase.consequent.length > 0) {\n\t\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\t\tthis.blockPreWalkStatements(switchCase.consequent);\n\t\t\t\t\tthis.prevStatement = prev;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let index = 0; index < len; index++) {\n\t\t\t\tconst switchCase = switchCases[index];\n\n\t\t\t\tif (switchCase.test) {\n\t\t\t\t\tthis.walkExpression(switchCase.test);\n\t\t\t\t}\n\t\t\t\tif (switchCase.consequent.length > 0) {\n\t\t\t\t\tthis.walkStatements(switchCase.consequent);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @param {CatchClause} catchClause catch clause\n\t */\n\tpreWalkCatchClause(catchClause) {\n\t\tthis.preWalkStatement(catchClause.body);\n\t}\n\n\t/**\n\t * @param {CatchClause} catchClause catch clause\n\t */\n\twalkCatchClause(catchClause) {\n\t\tthis.inBlockScope(() => {\n\t\t\t// Error binding is optional in catch clause since ECMAScript 2019\n\t\t\tif (catchClause.param !== null) {\n\t\t\t\tthis.enterPattern(catchClause.param, ident => {\n\t\t\t\t\tthis.defineVariable(ident);\n\t\t\t\t});\n\t\t\t\tthis.walkPattern(catchClause.param);\n\t\t\t}\n\t\t\tconst prev = this.prevStatement;\n\t\t\tthis.blockPreWalkStatement(catchClause.body);\n\t\t\tthis.prevStatement = prev;\n\t\t\tthis.walkStatement(catchClause.body);\n\t\t});\n\t}\n\n\t/**\n\t * @param {Pattern} pattern pattern\n\t */\n\twalkPattern(pattern) {\n\t\tswitch (pattern.type) {\n\t\t\tcase \"ArrayPattern\":\n\t\t\t\tthis.walkArrayPattern(pattern);\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentPattern\":\n\t\t\t\tthis.walkAssignmentPattern(pattern);\n\t\t\t\tbreak;\n\t\t\tcase \"MemberExpression\":\n\t\t\t\tthis.walkMemberExpression(pattern);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectPattern\":\n\t\t\t\tthis.walkObjectPattern(pattern);\n\t\t\t\tbreak;\n\t\t\tcase \"RestElement\":\n\t\t\t\tthis.walkRestElement(pattern);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * @param {AssignmentPattern} pattern assignment pattern\n\t */\n\twalkAssignmentPattern(pattern) {\n\t\tthis.walkExpression(pattern.right);\n\t\tthis.walkPattern(pattern.left);\n\t}\n\n\t/**\n\t * @param {ObjectPattern} pattern pattern\n\t */\n\twalkObjectPattern(pattern) {\n\t\tfor (let i = 0, len = pattern.properties.length; i < len; i++) {\n\t\t\tconst prop = pattern.properties[i];\n\t\t\tif (prop) {\n\t\t\t\tif (prop.type === \"RestElement\") {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (prop.computed) this.walkExpression(prop.key);\n\t\t\t\tif (prop.value) this.walkPattern(prop.value);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {ArrayPattern} pattern array pattern\n\t */\n\twalkArrayPattern(pattern) {\n\t\tfor (let i = 0, len = pattern.elements.length; i < len; i++) {\n\t\t\tconst element = pattern.elements[i];\n\t\t\tif (element) this.walkPattern(element);\n\t\t}\n\t}\n\n\t/**\n\t * @param {RestElement} pattern rest element\n\t */\n\twalkRestElement(pattern) {\n\t\tthis.walkPattern(pattern.argument);\n\t}\n\n\t/**\n\t * @param {(Expression | SpreadElement | null)[]} expressions expressions\n\t */\n\twalkExpressions(expressions) {\n\t\tfor (const expression of expressions) {\n\t\t\tif (expression) {\n\t\t\t\tthis.walkExpression(expression);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {TODO} expression expression\n\t */\n\twalkExpression(expression) {\n\t\tswitch (expression.type) {\n\t\t\tcase \"ArrayExpression\":\n\t\t\t\tthis.walkArrayExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrowFunctionExpression\":\n\t\t\t\tthis.walkArrowFunctionExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentExpression\":\n\t\t\t\tthis.walkAssignmentExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"AwaitExpression\":\n\t\t\t\tthis.walkAwaitExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"BinaryExpression\":\n\t\t\t\tthis.walkBinaryExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"CallExpression\":\n\t\t\t\tthis.walkCallExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ChainExpression\":\n\t\t\t\tthis.walkChainExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ClassExpression\":\n\t\t\t\tthis.walkClassExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ConditionalExpression\":\n\t\t\t\tthis.walkConditionalExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionExpression\":\n\t\t\t\tthis.walkFunctionExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"Identifier\":\n\t\t\t\tthis.walkIdentifier(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ImportExpression\":\n\t\t\t\tthis.walkImportExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"LogicalExpression\":\n\t\t\t\tthis.walkLogicalExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"MetaProperty\":\n\t\t\t\tthis.walkMetaProperty(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"MemberExpression\":\n\t\t\t\tthis.walkMemberExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"NewExpression\":\n\t\t\t\tthis.walkNewExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectExpression\":\n\t\t\t\tthis.walkObjectExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"SequenceExpression\":\n\t\t\t\tthis.walkSequenceExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"SpreadElement\":\n\t\t\t\tthis.walkSpreadElement(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"TaggedTemplateExpression\":\n\t\t\t\tthis.walkTaggedTemplateExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"TemplateLiteral\":\n\t\t\t\tthis.walkTemplateLiteral(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ThisExpression\":\n\t\t\t\tthis.walkThisExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"UnaryExpression\":\n\t\t\t\tthis.walkUnaryExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"UpdateExpression\":\n\t\t\t\tthis.walkUpdateExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"YieldExpression\":\n\t\t\t\tthis.walkYieldExpression(expression);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * @param {AwaitExpression} expression await expression\n\t */\n\twalkAwaitExpression(expression) {\n\t\tif (this.scope.topLevelScope === true)\n\t\t\tthis.hooks.topLevelAwait.call(expression);\n\t\tthis.walkExpression(expression.argument);\n\t}\n\n\t/**\n\t * @param {ArrayExpression} expression array expression\n\t */\n\twalkArrayExpression(expression) {\n\t\tif (expression.elements) {\n\t\t\tthis.walkExpressions(expression.elements);\n\t\t}\n\t}\n\n\t/**\n\t * @param {SpreadElement} expression spread element\n\t */\n\twalkSpreadElement(expression) {\n\t\tif (expression.argument) {\n\t\t\tthis.walkExpression(expression.argument);\n\t\t}\n\t}\n\n\t/**\n\t * @param {ObjectExpression} expression object expression\n\t */\n\twalkObjectExpression(expression) {\n\t\tfor (\n\t\t\tlet propIndex = 0, len = expression.properties.length;\n\t\t\tpropIndex < len;\n\t\t\tpropIndex++\n\t\t) {\n\t\t\tconst prop = expression.properties[propIndex];\n\t\t\tthis.walkProperty(prop);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Property | SpreadElement} prop property or spread element\n\t */\n\twalkProperty(prop) {\n\t\tif (prop.type === \"SpreadElement\") {\n\t\t\tthis.walkExpression(prop.argument);\n\t\t\treturn;\n\t\t}\n\t\tif (prop.computed) {\n\t\t\tthis.walkExpression(prop.key);\n\t\t}\n\t\tif (prop.shorthand && prop.value && prop.value.type === \"Identifier\") {\n\t\t\tthis.scope.inShorthand = prop.value.name;\n\t\t\tthis.walkIdentifier(prop.value);\n\t\t\tthis.scope.inShorthand = false;\n\t\t} else {\n\t\t\tthis.walkExpression(prop.value);\n\t\t}\n\t}\n\n\t/**\n\t * @param {FunctionExpression} expression arrow function expression\n\t */\n\twalkFunctionExpression(expression) {\n\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\tthis.scope.topLevelScope = false;\n\t\tconst scopeParams = [...expression.params];\n\n\t\t// Add function name in scope for recursive calls\n\t\tif (expression.id) {\n\t\t\tscopeParams.push(expression.id);\n\t\t}\n\n\t\tthis.inFunctionScope(true, scopeParams, () => {\n\t\t\tfor (const param of expression.params) {\n\t\t\t\tthis.walkPattern(param);\n\t\t\t}\n\t\t\tif (expression.body.type === \"BlockStatement\") {\n\t\t\t\tthis.detectMode(expression.body.body);\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.preWalkStatement(expression.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatement(expression.body);\n\t\t\t} else {\n\t\t\t\tthis.walkExpression(expression.body);\n\t\t\t}\n\t\t});\n\t\tthis.scope.topLevelScope = wasTopLevel;\n\t}\n\n\t/**\n\t * @param {ArrowFunctionExpression} expression arrow function expression\n\t */\n\twalkArrowFunctionExpression(expression) {\n\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\tthis.scope.topLevelScope = wasTopLevel ? \"arrow\" : false;\n\t\tthis.inFunctionScope(false, expression.params, () => {\n\t\t\tfor (const param of expression.params) {\n\t\t\t\tthis.walkPattern(param);\n\t\t\t}\n\t\t\tif (expression.body.type === \"BlockStatement\") {\n\t\t\t\tthis.detectMode(expression.body.body);\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.preWalkStatement(expression.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatement(expression.body);\n\t\t\t} else {\n\t\t\t\tthis.walkExpression(expression.body);\n\t\t\t}\n\t\t});\n\t\tthis.scope.topLevelScope = wasTopLevel;\n\t}\n\n\t/**\n\t * @param {SequenceExpression} expression the sequence\n\t */\n\twalkSequenceExpression(expression) {\n\t\tif (!expression.expressions) return;\n\t\t// We treat sequence expressions like statements when they are one statement level\n\t\t// This has some benefits for optimizations that only work on statement level\n\t\tconst currentStatement = this.statementPath[this.statementPath.length - 1];\n\t\tif (\n\t\t\tcurrentStatement === expression ||\n\t\t\t(currentStatement.type === \"ExpressionStatement\" &&\n\t\t\t\tcurrentStatement.expression === expression)\n\t\t) {\n\t\t\tconst old = /** @type {StatementPathItem} */ (this.statementPath.pop());\n\t\t\tfor (const expr of expression.expressions) {\n\t\t\t\tthis.statementPath.push(expr);\n\t\t\t\tthis.walkExpression(expr);\n\t\t\t\tthis.statementPath.pop();\n\t\t\t}\n\t\t\tthis.statementPath.push(old);\n\t\t} else {\n\t\t\tthis.walkExpressions(expression.expressions);\n\t\t}\n\t}\n\n\t/**\n\t * @param {UpdateExpression} expression the update expression\n\t */\n\twalkUpdateExpression(expression) {\n\t\tthis.walkExpression(expression.argument);\n\t}\n\n\t/**\n\t * @param {UnaryExpression} expression the unary expression\n\t */\n\twalkUnaryExpression(expression) {\n\t\tif (expression.operator === \"typeof\") {\n\t\t\tconst result = this.callHooksForExpression(\n\t\t\t\tthis.hooks.typeof,\n\t\t\t\texpression.argument,\n\t\t\t\texpression\n\t\t\t);\n\t\t\tif (result === true) return;\n\t\t\tif (expression.argument.type === \"ChainExpression\") {\n\t\t\t\tconst result = this.callHooksForExpression(\n\t\t\t\t\tthis.hooks.typeof,\n\t\t\t\t\texpression.argument.expression,\n\t\t\t\t\texpression\n\t\t\t\t);\n\t\t\t\tif (result === true) return;\n\t\t\t}\n\t\t}\n\t\tthis.walkExpression(expression.argument);\n\t}\n\n\t/**\n\t * @param {LogicalExpression | BinaryExpression} expression the expression\n\t */\n\twalkLeftRightExpression(expression) {\n\t\tthis.walkExpression(expression.left);\n\t\tthis.walkExpression(expression.right);\n\t}\n\n\t/**\n\t * @param {BinaryExpression} expression the binary expression\n\t */\n\twalkBinaryExpression(expression) {\n\t\tif (this.hooks.binaryExpression.call(expression) === undefined) {\n\t\t\tthis.walkLeftRightExpression(expression);\n\t\t}\n\t}\n\n\t/**\n\t * @param {LogicalExpression} expression the logical expression\n\t */\n\twalkLogicalExpression(expression) {\n\t\tconst result = this.hooks.expressionLogicalOperator.call(expression);\n\t\tif (result === undefined) {\n\t\t\tthis.walkLeftRightExpression(expression);\n\t\t} else {\n\t\t\tif (result) {\n\t\t\t\tthis.walkExpression(expression.right);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {AssignmentExpression} expression assignment expression\n\t */\n\twalkAssignmentExpression(expression) {\n\t\tif (expression.left.type === \"Identifier\") {\n\t\t\tconst renameIdentifier = this.getRenameIdentifier(expression.right);\n\t\t\tif (renameIdentifier) {\n\t\t\t\tif (\n\t\t\t\t\tthis.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.canRename,\n\t\t\t\t\t\trenameIdentifier,\n\t\t\t\t\t\texpression.right\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\t// renaming \"a = b;\"\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.callHooksForInfo(\n\t\t\t\t\t\t\tthis.hooks.rename,\n\t\t\t\t\t\t\trenameIdentifier,\n\t\t\t\t\t\t\texpression.right\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.setVariable(\n\t\t\t\t\t\t\texpression.left.name,\n\t\t\t\t\t\t\ttypeof renameIdentifier === \"string\"\n\t\t\t\t\t\t\t\t? this.getVariableInfo(renameIdentifier)\n\t\t\t\t\t\t\t\t: renameIdentifier\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.walkExpression(expression.right);\n\t\t\tthis.enterPattern(expression.left, (name, decl) => {\n\t\t\t\tif (!this.callHooksForName(this.hooks.assign, name, expression)) {\n\t\t\t\t\tthis.walkExpression(expression.left);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tif (expression.left.type.endsWith(\"Pattern\")) {\n\t\t\tthis.walkExpression(expression.right);\n\t\t\tthis.enterPattern(expression.left, (name, decl) => {\n\t\t\t\tif (!this.callHooksForName(this.hooks.assign, name, expression)) {\n\t\t\t\t\tthis.defineVariable(name);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.walkPattern(expression.left);\n\t\t} else if (expression.left.type === \"MemberExpression\") {\n\t\t\tconst exprName = this.getMemberExpressionInfo(\n\t\t\t\texpression.left,\n\t\t\t\tALLOWED_MEMBER_TYPES_EXPRESSION\n\t\t\t);\n\t\t\tif (exprName) {\n\t\t\t\tif (\n\t\t\t\t\tthis.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.assignMemberChain,\n\t\t\t\t\t\texprName.rootInfo,\n\t\t\t\t\t\texpression,\n\t\t\t\t\t\texprName.getMembers()\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.walkExpression(expression.right);\n\t\t\tthis.walkExpression(expression.left);\n\t\t} else {\n\t\t\tthis.walkExpression(expression.right);\n\t\t\tthis.walkExpression(expression.left);\n\t\t}\n\t}\n\n\t/**\n\t * @param {ConditionalExpression} expression conditional expression\n\t */\n\twalkConditionalExpression(expression) {\n\t\tconst result = this.hooks.expressionConditionalOperator.call(expression);\n\t\tif (result === undefined) {\n\t\t\tthis.walkExpression(expression.test);\n\t\t\tthis.walkExpression(expression.consequent);\n\t\t\tif (expression.alternate) {\n\t\t\t\tthis.walkExpression(expression.alternate);\n\t\t\t}\n\t\t} else {\n\t\t\tif (result) {\n\t\t\t\tthis.walkExpression(expression.consequent);\n\t\t\t} else if (expression.alternate) {\n\t\t\t\tthis.walkExpression(expression.alternate);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {NewExpression} expression new expression\n\t */\n\twalkNewExpression(expression) {\n\t\tconst result = this.callHooksForExpression(\n\t\t\tthis.hooks.new,\n\t\t\texpression.callee,\n\t\t\texpression\n\t\t);\n\t\tif (result === true) return;\n\t\tthis.walkExpression(expression.callee);\n\t\tif (expression.arguments) {\n\t\t\tthis.walkExpressions(expression.arguments);\n\t\t}\n\t}\n\n\t/**\n\t * @param {YieldExpression} expression yield expression\n\t */\n\twalkYieldExpression(expression) {\n\t\tif (expression.argument) {\n\t\t\tthis.walkExpression(expression.argument);\n\t\t}\n\t}\n\n\t/**\n\t * @param {TemplateLiteral} expression template literal\n\t */\n\twalkTemplateLiteral(expression) {\n\t\tif (expression.expressions) {\n\t\t\tthis.walkExpressions(expression.expressions);\n\t\t}\n\t}\n\n\t/**\n\t * @param {TaggedTemplateExpression} expression tagged template expression\n\t */\n\twalkTaggedTemplateExpression(expression) {\n\t\tif (expression.tag) {\n\t\t\tthis.scope.inTaggedTemplateTag = true;\n\t\t\tthis.walkExpression(expression.tag);\n\t\t\tthis.scope.inTaggedTemplateTag = false;\n\t\t}\n\t\tif (expression.quasi && expression.quasi.expressions) {\n\t\t\tthis.walkExpressions(expression.quasi.expressions);\n\t\t}\n\t}\n\n\t/**\n\t * @param {ClassExpression} expression the class expression\n\t */\n\twalkClassExpression(expression) {\n\t\tthis.walkClass(expression);\n\t}\n\n\t/**\n\t * @param {ChainExpression} expression expression\n\t */\n\twalkChainExpression(expression) {\n\t\tconst result = this.hooks.optionalChaining.call(expression);\n\n\t\tif (result === undefined) {\n\t\t\tif (expression.expression.type === \"CallExpression\") {\n\t\t\t\tthis.walkCallExpression(expression.expression);\n\t\t\t} else {\n\t\t\t\tthis.walkMemberExpression(expression.expression);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {FunctionExpression | ArrowFunctionExpression} functionExpression function expression\n\t * @param {(Expression | SpreadElement)[]} options options\n\t * @param {Expression | SpreadElement | null} currentThis current this\n\t */\n\t_walkIIFE(functionExpression, options, currentThis) {\n\t\t/**\n\t\t * @param {Expression | SpreadElement} argOrThis arg or this\n\t\t * @returns {string | VariableInfoInterface | undefined} var info\n\t\t */\n\t\tconst getVarInfo = argOrThis => {\n\t\t\tconst renameIdentifier = this.getRenameIdentifier(\n\t\t\t\t/** @type {Expression} */ (argOrThis)\n\t\t\t);\n\t\t\tif (renameIdentifier) {\n\t\t\t\tif (\n\t\t\t\t\tthis.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.canRename,\n\t\t\t\t\t\trenameIdentifier,\n\t\t\t\t\t\targOrThis\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.callHooksForInfo(\n\t\t\t\t\t\t\tthis.hooks.rename,\n\t\t\t\t\t\t\trenameIdentifier,\n\t\t\t\t\t\t\targOrThis\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn typeof renameIdentifier === \"string\"\n\t\t\t\t\t\t\t? /** @type {string} */ (this.getVariableInfo(renameIdentifier))\n\t\t\t\t\t\t\t: renameIdentifier;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.walkExpression(argOrThis);\n\t\t};\n\t\tconst { params, type } = functionExpression;\n\t\tconst arrow = type === \"ArrowFunctionExpression\";\n\t\tconst renameThis = currentThis ? getVarInfo(currentThis) : null;\n\t\tconst varInfoForArgs = options.map(getVarInfo);\n\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\tthis.scope.topLevelScope = wasTopLevel && arrow ? \"arrow\" : false;\n\t\tconst scopeParams =\n\t\t\t/** @type {(Identifier | string)[]} */\n\t\t\t(params.filter((identifier, idx) => !varInfoForArgs[idx]));\n\n\t\t// Add function name in scope for recursive calls\n\t\tif (\n\t\t\tfunctionExpression.type === \"FunctionExpression\" &&\n\t\t\tfunctionExpression.id\n\t\t) {\n\t\t\tscopeParams.push(functionExpression.id.name);\n\t\t}\n\n\t\tthis.inFunctionScope(true, scopeParams, () => {\n\t\t\tif (renameThis && !arrow) {\n\t\t\t\tthis.setVariable(\"this\", renameThis);\n\t\t\t}\n\t\t\tfor (let i = 0; i < varInfoForArgs.length; i++) {\n\t\t\t\tconst varInfo = varInfoForArgs[i];\n\t\t\t\tif (!varInfo) continue;\n\t\t\t\tif (!params[i] || params[i].type !== \"Identifier\") continue;\n\t\t\t\tthis.setVariable(/** @type {Identifier} */ (params[i]).name, varInfo);\n\t\t\t}\n\t\t\tif (functionExpression.body.type === \"BlockStatement\") {\n\t\t\t\tthis.detectMode(functionExpression.body.body);\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.preWalkStatement(functionExpression.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatement(functionExpression.body);\n\t\t\t} else {\n\t\t\t\tthis.walkExpression(functionExpression.body);\n\t\t\t}\n\t\t});\n\t\tthis.scope.topLevelScope = wasTopLevel;\n\t}\n\n\t/**\n\t * @param {ImportExpression} expression import expression\n\t */\n\twalkImportExpression(expression) {\n\t\tlet result = this.hooks.importCall.call(expression);\n\t\tif (result === true) return;\n\n\t\tthis.walkExpression(expression.source);\n\t}\n\n\t/**\n\t * @param {CallExpression} expression expression\n\t */\n\twalkCallExpression(expression) {\n\t\tconst isSimpleFunction = fn => {\n\t\t\treturn fn.params.every(p => p.type === \"Identifier\");\n\t\t};\n\t\tif (\n\t\t\texpression.callee.type === \"MemberExpression\" &&\n\t\t\texpression.callee.object.type.endsWith(\"FunctionExpression\") &&\n\t\t\t!expression.callee.computed &&\n\t\t\t// eslint-disable-next-line no-warning-comments\n\t\t\t// @ts-ignore\n\t\t\t// TODO check me and handle more cases\n\t\t\t(expression.callee.property.name === \"call\" ||\n\t\t\t\t// eslint-disable-next-line no-warning-comments\n\t\t\t\t// @ts-ignore\n\t\t\t\texpression.callee.property.name === \"bind\") &&\n\t\t\texpression.arguments.length > 0 &&\n\t\t\tisSimpleFunction(expression.callee.object)\n\t\t) {\n\t\t\t// (function(…) { }.call/bind(?, …))\n\t\t\tthis._walkIIFE(\n\t\t\t\t/** @type {FunctionExpression | ArrowFunctionExpression} */\n\t\t\t\t(expression.callee.object),\n\t\t\t\texpression.arguments.slice(1),\n\t\t\t\texpression.arguments[0]\n\t\t\t);\n\t\t} else if (\n\t\t\texpression.callee.type.endsWith(\"FunctionExpression\") &&\n\t\t\tisSimpleFunction(expression.callee)\n\t\t) {\n\t\t\t// (function(…) { }(…))\n\t\t\tthis._walkIIFE(\n\t\t\t\t/** @type {FunctionExpression | ArrowFunctionExpression} */\n\t\t\t\t(expression.callee),\n\t\t\t\texpression.arguments,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else {\n\t\t\tif (expression.callee.type === \"MemberExpression\") {\n\t\t\t\tconst exprInfo = this.getMemberExpressionInfo(\n\t\t\t\t\texpression.callee,\n\t\t\t\t\tALLOWED_MEMBER_TYPES_CALL_EXPRESSION\n\t\t\t\t);\n\t\t\t\tif (exprInfo && exprInfo.type === \"call\") {\n\t\t\t\t\tconst result = this.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.callMemberChainOfCallMemberChain,\n\t\t\t\t\t\texprInfo.rootInfo,\n\t\t\t\t\t\texpression,\n\t\t\t\t\t\texprInfo.getCalleeMembers(),\n\t\t\t\t\t\texprInfo.call,\n\t\t\t\t\t\texprInfo.getMembers(),\n\t\t\t\t\t\texprInfo.getMemberRanges()\n\t\t\t\t\t);\n\t\t\t\t\tif (result === true) return;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst callee = this.evaluateExpression(\n\t\t\t\t/** @type {TODO} */ (expression.callee)\n\t\t\t);\n\t\t\tif (callee.isIdentifier()) {\n\t\t\t\tconst result1 = this.callHooksForInfo(\n\t\t\t\t\tthis.hooks.callMemberChain,\n\t\t\t\t\tcallee.rootInfo,\n\t\t\t\t\texpression,\n\t\t\t\t\tcallee.getMembers(),\n\t\t\t\t\tcallee.getMembersOptionals\n\t\t\t\t\t\t? callee.getMembersOptionals()\n\t\t\t\t\t\t: callee.getMembers().map(() => false),\n\t\t\t\t\tcallee.getMemberRanges ? callee.getMemberRanges() : []\n\t\t\t\t);\n\t\t\t\tif (result1 === true) return;\n\t\t\t\tconst result2 = this.callHooksForInfo(\n\t\t\t\t\tthis.hooks.call,\n\t\t\t\t\tcallee.identifier,\n\t\t\t\t\texpression\n\t\t\t\t);\n\t\t\t\tif (result2 === true) return;\n\t\t\t}\n\n\t\t\tif (expression.callee) {\n\t\t\t\tif (expression.callee.type === \"MemberExpression\") {\n\t\t\t\t\t// because of call context we need to walk the call context as expression\n\t\t\t\t\tthis.walkExpression(expression.callee.object);\n\t\t\t\t\tif (expression.callee.computed === true)\n\t\t\t\t\t\tthis.walkExpression(expression.callee.property);\n\t\t\t\t} else {\n\t\t\t\t\tthis.walkExpression(expression.callee);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (expression.arguments) this.walkExpressions(expression.arguments);\n\t\t}\n\t}\n\n\t/**\n\t * @param {MemberExpression} expression member expression\n\t */\n\twalkMemberExpression(expression) {\n\t\tconst exprInfo = this.getMemberExpressionInfo(\n\t\t\texpression,\n\t\t\tALLOWED_MEMBER_TYPES_ALL\n\t\t);\n\t\tif (exprInfo) {\n\t\t\tswitch (exprInfo.type) {\n\t\t\t\tcase \"expression\": {\n\t\t\t\t\tconst result1 = this.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.expression,\n\t\t\t\t\t\texprInfo.name,\n\t\t\t\t\t\texpression\n\t\t\t\t\t);\n\t\t\t\t\tif (result1 === true) return;\n\t\t\t\t\tconst members = exprInfo.getMembers();\n\t\t\t\t\tconst membersOptionals = exprInfo.getMembersOptionals();\n\t\t\t\t\tconst memberRanges = exprInfo.getMemberRanges();\n\t\t\t\t\tconst result2 = this.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.expressionMemberChain,\n\t\t\t\t\t\texprInfo.rootInfo,\n\t\t\t\t\t\texpression,\n\t\t\t\t\t\tmembers,\n\t\t\t\t\t\tmembersOptionals,\n\t\t\t\t\t\tmemberRanges\n\t\t\t\t\t);\n\t\t\t\t\tif (result2 === true) return;\n\t\t\t\t\tthis.walkMemberExpressionWithExpressionName(\n\t\t\t\t\t\texpression,\n\t\t\t\t\t\texprInfo.name,\n\t\t\t\t\t\texprInfo.rootInfo,\n\t\t\t\t\t\tmembers.slice(),\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\tthis.callHooksForInfo(\n\t\t\t\t\t\t\t\tthis.hooks.unhandledExpressionMemberChain,\n\t\t\t\t\t\t\t\texprInfo.rootInfo,\n\t\t\t\t\t\t\t\texpression,\n\t\t\t\t\t\t\t\tmembers\n\t\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcase \"call\": {\n\t\t\t\t\tconst result = this.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.memberChainOfCallMemberChain,\n\t\t\t\t\t\texprInfo.rootInfo,\n\t\t\t\t\t\texpression,\n\t\t\t\t\t\texprInfo.getCalleeMembers(),\n\t\t\t\t\t\texprInfo.call,\n\t\t\t\t\t\texprInfo.getMembers(),\n\t\t\t\t\t\texprInfo.getMemberRanges()\n\t\t\t\t\t);\n\t\t\t\t\tif (result === true) return;\n\t\t\t\t\t// Fast skip over the member chain as we already called memberChainOfCallMemberChain\n\t\t\t\t\t// and call computed property are literals anyway\n\t\t\t\t\tthis.walkExpression(exprInfo.call);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.walkExpression(expression.object);\n\t\tif (expression.computed === true) this.walkExpression(expression.property);\n\t}\n\n\t/**\n\t * @param {TODO} expression member expression\n\t * @param {string} name name\n\t * @param {string | VariableInfo} rootInfo root info\n\t * @param {string[]} members members\n\t * @param {TODO} onUnhandled on unhandled callback\n\t */\n\twalkMemberExpressionWithExpressionName(\n\t\texpression,\n\t\tname,\n\t\trootInfo,\n\t\tmembers,\n\t\tonUnhandled\n\t) {\n\t\tif (expression.object.type === \"MemberExpression\") {\n\t\t\t// optimize the case where expression.object is a MemberExpression too.\n\t\t\t// we can keep info here when calling walkMemberExpression directly\n\t\t\tconst property =\n\t\t\t\texpression.property.name || `${expression.property.value}`;\n\t\t\tname = name.slice(0, -property.length - 1);\n\t\t\tmembers.pop();\n\t\t\tconst result = this.callHooksForInfo(\n\t\t\t\tthis.hooks.expression,\n\t\t\t\tname,\n\t\t\t\texpression.object\n\t\t\t);\n\t\t\tif (result === true) return;\n\t\t\tthis.walkMemberExpressionWithExpressionName(\n\t\t\t\texpression.object,\n\t\t\t\tname,\n\t\t\t\trootInfo,\n\t\t\t\tmembers,\n\t\t\t\tonUnhandled\n\t\t\t);\n\t\t} else if (!onUnhandled || !onUnhandled()) {\n\t\t\tthis.walkExpression(expression.object);\n\t\t}\n\t\tif (expression.computed === true) this.walkExpression(expression.property);\n\t}\n\n\t/**\n\t * @param {ThisExpression} expression this expression\n\t */\n\twalkThisExpression(expression) {\n\t\tthis.callHooksForName(this.hooks.expression, \"this\", expression);\n\t}\n\n\t/**\n\t * @param {Identifier} expression identifier\n\t */\n\twalkIdentifier(expression) {\n\t\tthis.callHooksForName(this.hooks.expression, expression.name, expression);\n\t}\n\n\t/**\n\t * @param {MetaProperty} metaProperty meta property\n\t */\n\twalkMetaProperty(metaProperty) {\n\t\tthis.hooks.expression.for(getRootName(metaProperty)).call(metaProperty);\n\t}\n\t/**\n\t * @template T\n\t * @template R\n\t * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n\t * @param {TODO} expr expression\n\t * @param {AsArray<T>} args args for the hook\n\t * @returns {R | undefined} result of hook\n\t */\n\tcallHooksForExpression(hookMap, expr, ...args) {\n\t\treturn this.callHooksForExpressionWithFallback(\n\t\t\thookMap,\n\t\t\texpr,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\t...args\n\t\t);\n\t}\n\n\t/**\n\t * @template T\n\t * @template R\n\t * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n\t * @param {MemberExpression} expr expression info\n\t * @param {(function(string, string | ScopeInfo | VariableInfo, function(): string[]): any) | undefined} fallback callback when variable in not handled by hooks\n\t * @param {(function(string): any) | undefined} defined callback when variable is defined\n\t * @param {AsArray<T>} args args for the hook\n\t * @returns {R | undefined} result of hook\n\t */\n\tcallHooksForExpressionWithFallback(\n\t\thookMap,\n\t\texpr,\n\t\tfallback,\n\t\tdefined,\n\t\t...args\n\t) {\n\t\tconst exprName = this.getMemberExpressionInfo(\n\t\t\texpr,\n\t\t\tALLOWED_MEMBER_TYPES_EXPRESSION\n\t\t);\n\t\tif (exprName !== undefined) {\n\t\t\tconst members = exprName.getMembers();\n\t\t\treturn this.callHooksForInfoWithFallback(\n\t\t\t\thookMap,\n\t\t\t\tmembers.length === 0 ? exprName.rootInfo : exprName.name,\n\t\t\t\tfallback &&\n\t\t\t\t\t(name => fallback(name, exprName.rootInfo, exprName.getMembers)),\n\t\t\t\tdefined && (() => defined(exprName.name)),\n\t\t\t\t...args\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @template T\n\t * @template R\n\t * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n\t * @param {string} name key in map\n\t * @param {AsArray<T>} args args for the hook\n\t * @returns {R | undefined} result of hook\n\t */\n\tcallHooksForName(hookMap, name, ...args) {\n\t\treturn this.callHooksForNameWithFallback(\n\t\t\thookMap,\n\t\t\tname,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\t...args\n\t\t);\n\t}\n\n\t/**\n\t * @template T\n\t * @template R\n\t * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks that should be called\n\t * @param {ExportedVariableInfo} info variable info\n\t * @param  {AsArray<T>} args args for the hook\n\t * @returns {R | undefined} result of hook\n\t */\n\tcallHooksForInfo(hookMap, info, ...args) {\n\t\treturn this.callHooksForInfoWithFallback(\n\t\t\thookMap,\n\t\t\tinfo,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\t...args\n\t\t);\n\t}\n\n\t/**\n\t * @template T\n\t * @template R\n\t * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n\t * @param {ExportedVariableInfo} info variable info\n\t * @param {(function(string): any) | undefined} fallback callback when variable in not handled by hooks\n\t * @param {(function(): any) | undefined} defined callback when variable is defined\n\t * @param {AsArray<T>} args args for the hook\n\t * @returns {R | undefined} result of hook\n\t */\n\tcallHooksForInfoWithFallback(hookMap, info, fallback, defined, ...args) {\n\t\tlet name;\n\t\tif (typeof info === \"string\") {\n\t\t\tname = info;\n\t\t} else {\n\t\t\tif (!(info instanceof VariableInfo)) {\n\t\t\t\tif (defined !== undefined) {\n\t\t\t\t\treturn defined();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet tagInfo = info.tagInfo;\n\t\t\twhile (tagInfo !== undefined) {\n\t\t\t\tconst hook = hookMap.get(tagInfo.tag);\n\t\t\t\tif (hook !== undefined) {\n\t\t\t\t\tthis.currentTagData = tagInfo.data;\n\t\t\t\t\tconst result = hook.call(...args);\n\t\t\t\t\tthis.currentTagData = undefined;\n\t\t\t\t\tif (result !== undefined) return result;\n\t\t\t\t}\n\t\t\t\ttagInfo = tagInfo.next;\n\t\t\t}\n\t\t\tif (info.freeName === true) {\n\t\t\t\tif (defined !== undefined) {\n\t\t\t\t\treturn defined();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tname = info.freeName;\n\t\t}\n\t\tconst hook = hookMap.get(name);\n\t\tif (hook !== undefined) {\n\t\t\tconst result = hook.call(...args);\n\t\t\tif (result !== undefined) return result;\n\t\t}\n\t\tif (fallback !== undefined) {\n\t\t\treturn fallback(name);\n\t\t}\n\t}\n\n\t/**\n\t * @template T\n\t * @template R\n\t * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n\t * @param {string} name key in map\n\t * @param {(function(string): any) | undefined} fallback callback when variable in not handled by hooks\n\t * @param {(function(): any) | undefined} defined callback when variable is defined\n\t * @param {AsArray<T>} args args for the hook\n\t * @returns {R | undefined} result of hook\n\t */\n\tcallHooksForNameWithFallback(hookMap, name, fallback, defined, ...args) {\n\t\treturn this.callHooksForInfoWithFallback(\n\t\t\thookMap,\n\t\t\tthis.getVariableInfo(name),\n\t\t\tfallback,\n\t\t\tdefined,\n\t\t\t...args\n\t\t);\n\t}\n\n\t/**\n\t * @deprecated\n\t * @param {any} params scope params\n\t * @param {function(): void} fn inner function\n\t * @returns {void}\n\t */\n\tinScope(params, fn) {\n\t\tconst oldScope = this.scope;\n\t\tthis.scope = {\n\t\t\ttopLevelScope: oldScope.topLevelScope,\n\t\t\tinTry: false,\n\t\t\tinShorthand: false,\n\t\t\tinTaggedTemplateTag: false,\n\t\t\tisStrict: oldScope.isStrict,\n\t\t\tisAsmJs: oldScope.isAsmJs,\n\t\t\tdefinitions: oldScope.definitions.createChild()\n\t\t};\n\n\t\tthis.undefineVariable(\"this\");\n\n\t\tthis.enterPatterns(params, (ident, pattern) => {\n\t\t\tthis.defineVariable(ident);\n\t\t});\n\n\t\tfn();\n\n\t\tthis.scope = oldScope;\n\t}\n\n\t/**\n\t * @param {boolean} hasThis true, when this is defined\n\t * @param {any} params scope params\n\t * @param {function(): void} fn inner function\n\t * @returns {void}\n\t */\n\tinClassScope(hasThis, params, fn) {\n\t\tconst oldScope = this.scope;\n\t\tthis.scope = {\n\t\t\ttopLevelScope: oldScope.topLevelScope,\n\t\t\tinTry: false,\n\t\t\tinShorthand: false,\n\t\t\tinTaggedTemplateTag: false,\n\t\t\tisStrict: oldScope.isStrict,\n\t\t\tisAsmJs: oldScope.isAsmJs,\n\t\t\tdefinitions: oldScope.definitions.createChild()\n\t\t};\n\n\t\tif (hasThis) {\n\t\t\tthis.undefineVariable(\"this\");\n\t\t}\n\n\t\tthis.enterPatterns(params, (ident, pattern) => {\n\t\t\tthis.defineVariable(ident);\n\t\t});\n\n\t\tfn();\n\n\t\tthis.scope = oldScope;\n\t}\n\n\t/**\n\t * @param {boolean} hasThis true, when this is defined\n\t * @param {any} params scope params\n\t * @param {function(): void} fn inner function\n\t * @returns {void}\n\t */\n\tinFunctionScope(hasThis, params, fn) {\n\t\tconst oldScope = this.scope;\n\t\tthis.scope = {\n\t\t\ttopLevelScope: oldScope.topLevelScope,\n\t\t\tinTry: false,\n\t\t\tinShorthand: false,\n\t\t\tinTaggedTemplateTag: false,\n\t\t\tisStrict: oldScope.isStrict,\n\t\t\tisAsmJs: oldScope.isAsmJs,\n\t\t\tdefinitions: oldScope.definitions.createChild()\n\t\t};\n\n\t\tif (hasThis) {\n\t\t\tthis.undefineVariable(\"this\");\n\t\t}\n\n\t\tthis.enterPatterns(params, (ident, pattern) => {\n\t\t\tthis.defineVariable(ident);\n\t\t});\n\n\t\tfn();\n\n\t\tthis.scope = oldScope;\n\t}\n\n\t/**\n\t * @param {function(): void} fn inner function\n\t * @returns {void}\n\t */\n\tinBlockScope(fn) {\n\t\tconst oldScope = this.scope;\n\t\tthis.scope = {\n\t\t\ttopLevelScope: oldScope.topLevelScope,\n\t\t\tinTry: oldScope.inTry,\n\t\t\tinShorthand: false,\n\t\t\tinTaggedTemplateTag: false,\n\t\t\tisStrict: oldScope.isStrict,\n\t\t\tisAsmJs: oldScope.isAsmJs,\n\t\t\tdefinitions: oldScope.definitions.createChild()\n\t\t};\n\n\t\tfn();\n\n\t\tthis.scope = oldScope;\n\t}\n\n\t/**\n\t * @param {Array<Directive | Statement | ModuleDeclaration>} statements statements\n\t */\n\tdetectMode(statements) {\n\t\tconst isLiteral =\n\t\t\tstatements.length >= 1 &&\n\t\t\tstatements[0].type === \"ExpressionStatement\" &&\n\t\t\tstatements[0].expression.type === \"Literal\";\n\t\tif (\n\t\t\tisLiteral &&\n\t\t\t/** @type {Literal} */\n\t\t\t(/** @type {ExpressionStatement} */ (statements[0]).expression).value ===\n\t\t\t\t\"use strict\"\n\t\t) {\n\t\t\tthis.scope.isStrict = true;\n\t\t}\n\t\tif (\n\t\t\tisLiteral &&\n\t\t\t/** @type {Literal} */\n\t\t\t(/** @type {ExpressionStatement} */ (statements[0]).expression).value ===\n\t\t\t\t\"use asm\"\n\t\t) {\n\t\t\tthis.scope.isAsmJs = true;\n\t\t}\n\t}\n\n\t/**\n\t * @param {(string | Pattern | Property)[]} patterns patterns\n\t * @param {OnIdent} onIdent on ident callback\n\t */\n\tenterPatterns(patterns, onIdent) {\n\t\tfor (const pattern of patterns) {\n\t\t\tif (typeof pattern !== \"string\") {\n\t\t\t\tthis.enterPattern(pattern, onIdent);\n\t\t\t} else if (pattern) {\n\t\t\t\tonIdent(pattern);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {Pattern | Property} pattern pattern\n\t * @param {OnIdent} onIdent on ident callback\n\t */\n\tenterPattern(pattern, onIdent) {\n\t\tif (!pattern) return;\n\t\tswitch (pattern.type) {\n\t\t\tcase \"ArrayPattern\":\n\t\t\t\tthis.enterArrayPattern(pattern, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentPattern\":\n\t\t\t\tthis.enterAssignmentPattern(pattern, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"Identifier\":\n\t\t\t\tthis.enterIdentifier(pattern, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectPattern\":\n\t\t\t\tthis.enterObjectPattern(pattern, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"RestElement\":\n\t\t\t\tthis.enterRestElement(pattern, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"Property\":\n\t\t\t\tif (pattern.shorthand && pattern.value.type === \"Identifier\") {\n\t\t\t\t\tthis.scope.inShorthand = pattern.value.name;\n\t\t\t\t\tthis.enterIdentifier(pattern.value, onIdent);\n\t\t\t\t\tthis.scope.inShorthand = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.enterPattern(/** @type {Identifier} */ (pattern.value), onIdent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Identifier} pattern identifier pattern\n\t * @param {OnIdent} onIdent callback\n\t */\n\tenterIdentifier(pattern, onIdent) {\n\t\tif (!this.callHooksForName(this.hooks.pattern, pattern.name, pattern)) {\n\t\t\tonIdent(pattern.name, pattern);\n\t\t}\n\t}\n\n\t/**\n\t * @param {ObjectPattern} pattern object pattern\n\t * @param {OnIdent} onIdent callback\n\t */\n\tenterObjectPattern(pattern, onIdent) {\n\t\tfor (\n\t\t\tlet propIndex = 0, len = pattern.properties.length;\n\t\t\tpropIndex < len;\n\t\t\tpropIndex++\n\t\t) {\n\t\t\tconst prop = pattern.properties[propIndex];\n\t\t\tthis.enterPattern(prop, onIdent);\n\t\t}\n\t}\n\n\t/**\n\t * @param {ArrayPattern} pattern object pattern\n\t * @param {OnIdent} onIdent callback\n\t */\n\tenterArrayPattern(pattern, onIdent) {\n\t\tfor (\n\t\t\tlet elementIndex = 0, len = pattern.elements.length;\n\t\t\telementIndex < len;\n\t\t\telementIndex++\n\t\t) {\n\t\t\tconst element = pattern.elements[elementIndex];\n\n\t\t\tif (element) {\n\t\t\t\tthis.enterPattern(element, onIdent);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {RestElement} pattern object pattern\n\t * @param {OnIdent} onIdent callback\n\t */\n\tenterRestElement(pattern, onIdent) {\n\t\tthis.enterPattern(pattern.argument, onIdent);\n\t}\n\n\t/**\n\t * @param {AssignmentPattern} pattern object pattern\n\t * @param {OnIdent} onIdent callback\n\t */\n\tenterAssignmentPattern(pattern, onIdent) {\n\t\tthis.enterPattern(pattern.left, onIdent);\n\t}\n\n\t/**\n\t * @param {TODO} expression expression node\n\t * @returns {BasicEvaluatedExpression} evaluation result\n\t */\n\tevaluateExpression(expression) {\n\t\ttry {\n\t\t\tconst hook = this.hooks.evaluate.get(expression.type);\n\t\t\tif (hook !== undefined) {\n\t\t\t\tconst result = hook.call(expression);\n\t\t\t\tif (result !== undefined && result !== null) {\n\t\t\t\t\tresult.setExpression(expression);\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t\t// ignore error\n\t\t}\n\t\treturn new BasicEvaluatedExpression()\n\t\t\t.setRange(/** @type {Range} */ (expression.range))\n\t\t\t.setExpression(expression);\n\t}\n\n\t/**\n\t * @param {Expression} expression expression\n\t * @returns {string} parsed string\n\t */\n\tparseString(expression) {\n\t\tswitch (expression.type) {\n\t\t\tcase \"BinaryExpression\":\n\t\t\t\tif (expression.operator === \"+\") {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tthis.parseString(expression.left) +\n\t\t\t\t\t\tthis.parseString(expression.right)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"Literal\":\n\t\t\t\treturn expression.value + \"\";\n\t\t}\n\t\tthrow new Error(\n\t\t\texpression.type + \" is not supported as parameter for require\"\n\t\t);\n\t}\n\n\t/**\n\t * @param {Expression} expression expression\n\t * @returns {TODO} result\n\t */\n\tparseCalculatedString(expression) {\n\t\tswitch (expression.type) {\n\t\t\tcase \"BinaryExpression\":\n\t\t\t\tif (expression.operator === \"+\") {\n\t\t\t\t\tconst left = this.parseCalculatedString(expression.left);\n\t\t\t\t\tconst right = this.parseCalculatedString(expression.right);\n\t\t\t\t\tif (left.code) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\trange: left.range,\n\t\t\t\t\t\t\tvalue: left.value,\n\t\t\t\t\t\t\tcode: true,\n\t\t\t\t\t\t\tconditional: false\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (right.code) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\trange: [\n\t\t\t\t\t\t\t\tleft.range[0],\n\t\t\t\t\t\t\t\tright.range ? right.range[1] : left.range[1]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tvalue: left.value + right.value,\n\t\t\t\t\t\t\tcode: true,\n\t\t\t\t\t\t\tconditional: false\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\trange: [left.range[0], right.range[1]],\n\t\t\t\t\t\t\tvalue: left.value + right.value,\n\t\t\t\t\t\t\tcode: false,\n\t\t\t\t\t\t\tconditional: false\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"ConditionalExpression\": {\n\t\t\t\tconst consequent = this.parseCalculatedString(expression.consequent);\n\t\t\t\tconst alternate = this.parseCalculatedString(expression.alternate);\n\t\t\t\tconst items = [];\n\t\t\t\tif (consequent.conditional) {\n\t\t\t\t\titems.push(...consequent.conditional);\n\t\t\t\t} else if (!consequent.code) {\n\t\t\t\t\titems.push(consequent);\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (alternate.conditional) {\n\t\t\t\t\titems.push(...alternate.conditional);\n\t\t\t\t} else if (!alternate.code) {\n\t\t\t\t\titems.push(alternate);\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\trange: undefined,\n\t\t\t\t\tvalue: \"\",\n\t\t\t\t\tcode: true,\n\t\t\t\t\tconditional: items\n\t\t\t\t};\n\t\t\t}\n\t\t\tcase \"Literal\":\n\t\t\t\treturn {\n\t\t\t\t\trange: expression.range,\n\t\t\t\t\tvalue: expression.value + \"\",\n\t\t\t\t\tcode: false,\n\t\t\t\t\tconditional: false\n\t\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\trange: undefined,\n\t\t\tvalue: \"\",\n\t\t\tcode: true,\n\t\t\tconditional: false\n\t\t};\n\t}\n\n\t/**\n\t * @param {string | Buffer | PreparsedAst} source the source to parse\n\t * @param {ParserState} state the parser state\n\t * @returns {ParserState} the parser state\n\t */\n\tparse(source, state) {\n\t\tlet ast;\n\t\tlet comments;\n\t\tconst semicolons = new Set();\n\t\tif (source === null) {\n\t\t\tthrow new Error(\"source must not be null\");\n\t\t}\n\t\tif (Buffer.isBuffer(source)) {\n\t\t\tsource = source.toString(\"utf-8\");\n\t\t}\n\t\tif (typeof source === \"object\") {\n\t\t\tast = /** @type {Program} */ (source);\n\t\t\tcomments = source.comments;\n\t\t} else {\n\t\t\tcomments = [];\n\t\t\tast = JavascriptParser._parse(source, {\n\t\t\t\tsourceType: this.sourceType,\n\t\t\t\tonComment: comments,\n\t\t\t\tonInsertedSemicolon: pos => semicolons.add(pos)\n\t\t\t});\n\t\t}\n\n\t\tconst oldScope = this.scope;\n\t\tconst oldState = this.state;\n\t\tconst oldComments = this.comments;\n\t\tconst oldSemicolons = this.semicolons;\n\t\tconst oldStatementPath = this.statementPath;\n\t\tconst oldPrevStatement = this.prevStatement;\n\t\tthis.scope = {\n\t\t\ttopLevelScope: true,\n\t\t\tinTry: false,\n\t\t\tinShorthand: false,\n\t\t\tinTaggedTemplateTag: false,\n\t\t\tisStrict: false,\n\t\t\tisAsmJs: false,\n\t\t\tdefinitions: new StackedMap()\n\t\t};\n\t\t/** @type {ParserState} */\n\t\tthis.state = state;\n\t\tthis.comments = comments;\n\t\tthis.semicolons = semicolons;\n\t\tthis.statementPath = [];\n\t\tthis.prevStatement = undefined;\n\t\tif (this.hooks.program.call(ast, comments) === undefined) {\n\t\t\tthis.destructuringAssignmentProperties = new WeakMap();\n\t\t\tthis.detectMode(ast.body);\n\t\t\tthis.preWalkStatements(ast.body);\n\t\t\tthis.prevStatement = undefined;\n\t\t\tthis.blockPreWalkStatements(ast.body);\n\t\t\tthis.prevStatement = undefined;\n\t\t\tthis.walkStatements(ast.body);\n\t\t\tthis.destructuringAssignmentProperties = undefined;\n\t\t}\n\t\tthis.hooks.finish.call(ast, comments);\n\t\tthis.scope = oldScope;\n\t\t/** @type {ParserState} */\n\t\tthis.state = oldState;\n\t\tthis.comments = oldComments;\n\t\tthis.semicolons = oldSemicolons;\n\t\tthis.statementPath = oldStatementPath;\n\t\tthis.prevStatement = oldPrevStatement;\n\t\treturn state;\n\t}\n\n\t/**\n\t * @param {string} source source code\n\t * @returns {BasicEvaluatedExpression} evaluation result\n\t */\n\tevaluate(source) {\n\t\tconst ast = JavascriptParser._parse(\"(\" + source + \")\", {\n\t\t\tsourceType: this.sourceType,\n\t\t\tlocations: false\n\t\t});\n\t\tif (ast.body.length !== 1 || ast.body[0].type !== \"ExpressionStatement\") {\n\t\t\tthrow new Error(\"evaluate: Source is not a expression\");\n\t\t}\n\t\treturn this.evaluateExpression(ast.body[0].expression);\n\t}\n\n\t/**\n\t * @param {Expression | Declaration | PrivateIdentifier | null | undefined} expr an expression\n\t * @param {number} commentsStartPos source position from which annotation comments are checked\n\t * @returns {boolean} true, when the expression is pure\n\t */\n\tisPure(expr, commentsStartPos) {\n\t\tif (!expr) return true;\n\t\tconst result = this.hooks.isPure\n\t\t\t.for(expr.type)\n\t\t\t.call(expr, commentsStartPos);\n\t\tif (typeof result === \"boolean\") return result;\n\t\tswitch (expr.type) {\n\t\t\t// TODO handle more cases\n\t\t\tcase \"ClassDeclaration\":\n\t\t\tcase \"ClassExpression\": {\n\t\t\t\tif (expr.body.type !== \"ClassBody\") return false;\n\t\t\t\tif (\n\t\t\t\t\texpr.superClass &&\n\t\t\t\t\t!this.isPure(expr.superClass, /** @type {Range} */ (expr.range)[0])\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst items =\n\t\t\t\t\t/** @type {TODO[]} */\n\t\t\t\t\t(expr.body.body);\n\t\t\t\treturn items.every(item => {\n\t\t\t\t\tif (\n\t\t\t\t\t\titem.computed &&\n\t\t\t\t\t\titem.key &&\n\t\t\t\t\t\t!this.isPure(item.key, item.range[0])\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\titem.static &&\n\t\t\t\t\t\titem.value &&\n\t\t\t\t\t\t!this.isPure(\n\t\t\t\t\t\t\titem.value,\n\t\t\t\t\t\t\titem.key ? item.key.range[1] : item.range[0]\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (item.type === \"StaticBlock\") {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\texpr.superClass &&\n\t\t\t\t\t\titem.type === \"MethodDefinition\" &&\n\t\t\t\t\t\titem.kind === \"constructor\"\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\tcase \"FunctionExpression\":\n\t\t\tcase \"ArrowFunctionExpression\":\n\t\t\tcase \"ThisExpression\":\n\t\t\tcase \"Literal\":\n\t\t\tcase \"TemplateLiteral\":\n\t\t\tcase \"Identifier\":\n\t\t\tcase \"PrivateIdentifier\":\n\t\t\t\treturn true;\n\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\treturn expr.declarations.every(decl =>\n\t\t\t\t\tthis.isPure(decl.init, /** @type {Range} */ (decl.range)[0])\n\t\t\t\t);\n\n\t\t\tcase \"ConditionalExpression\":\n\t\t\t\treturn (\n\t\t\t\t\tthis.isPure(expr.test, commentsStartPos) &&\n\t\t\t\t\tthis.isPure(\n\t\t\t\t\t\texpr.consequent,\n\t\t\t\t\t\t/** @type {Range} */ (expr.test.range)[1]\n\t\t\t\t\t) &&\n\t\t\t\t\tthis.isPure(\n\t\t\t\t\t\texpr.alternate,\n\t\t\t\t\t\t/** @type {Range} */ (expr.consequent.range)[1]\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\tcase \"LogicalExpression\":\n\t\t\t\treturn (\n\t\t\t\t\tthis.isPure(expr.left, commentsStartPos) &&\n\t\t\t\t\tthis.isPure(expr.right, /** @type {Range} */ (expr.left.range)[1])\n\t\t\t\t);\n\n\t\t\tcase \"SequenceExpression\":\n\t\t\t\treturn expr.expressions.every(expr => {\n\t\t\t\t\tconst pureFlag = this.isPure(expr, commentsStartPos);\n\t\t\t\t\tcommentsStartPos = /** @type {Range} */ (expr.range)[1];\n\t\t\t\t\treturn pureFlag;\n\t\t\t\t});\n\n\t\t\tcase \"CallExpression\": {\n\t\t\t\tconst pureFlag =\n\t\t\t\t\t/** @type {Range} */ (expr.range)[0] - commentsStartPos > 12 &&\n\t\t\t\t\tthis.getComments([\n\t\t\t\t\t\tcommentsStartPos,\n\t\t\t\t\t\t/** @type {Range} */ (expr.range)[0]\n\t\t\t\t\t]).some(\n\t\t\t\t\t\tcomment =>\n\t\t\t\t\t\t\tcomment.type === \"Block\" &&\n\t\t\t\t\t\t\t/^\\s*(#|@)__PURE__\\s*$/.test(comment.value)\n\t\t\t\t\t);\n\t\t\t\tif (!pureFlag) return false;\n\t\t\t\tcommentsStartPos = /** @type {Range} */ (expr.callee.range)[1];\n\t\t\t\treturn expr.arguments.every(arg => {\n\t\t\t\t\tif (arg.type === \"SpreadElement\") return false;\n\t\t\t\t\tconst pureFlag = this.isPure(arg, commentsStartPos);\n\t\t\t\t\tcommentsStartPos = /** @type {Range} */ (arg.range)[1];\n\t\t\t\t\treturn pureFlag;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tconst evaluated = this.evaluateExpression(expr);\n\t\treturn !evaluated.couldHaveSideEffects();\n\t}\n\n\t/**\n\t * @param {Range} range range\n\t * @returns {Comment[]} comments in the range\n\t */\n\tgetComments(range) {\n\t\tconst [rangeStart, rangeEnd] = range;\n\t\t/**\n\t\t * @param {Comment} comment comment\n\t\t * @param {number} needle needle\n\t\t * @returns {number} compared\n\t\t */\n\t\tconst compare = (comment, needle) =>\n\t\t\t/** @type {Range} */ (comment.range)[0] - needle;\n\t\tconst comments = /** @type {Comment[]} */ (this.comments);\n\t\tlet idx = binarySearchBounds.ge(comments, rangeStart, compare);\n\t\t/** @type {Comment[]} */\n\t\tlet commentsInRange = [];\n\t\twhile (\n\t\t\tcomments[idx] &&\n\t\t\t/** @type {Range} */ (comments[idx].range)[1] <= rangeEnd\n\t\t) {\n\t\t\tcommentsInRange.push(comments[idx]);\n\t\t\tidx++;\n\t\t}\n\n\t\treturn commentsInRange;\n\t}\n\n\t/**\n\t * @param {number} pos source code position\n\t * @returns {boolean} true when a semicolon has been inserted before this position, false if not\n\t */\n\tisAsiPosition(pos) {\n\t\tconst currentStatement = this.statementPath[this.statementPath.length - 1];\n\t\tif (currentStatement === undefined) throw new Error(\"Not in statement\");\n\t\treturn (\n\t\t\t// Either asking directly for the end position of the current statement\n\t\t\t(currentStatement.range[1] === pos &&\n\t\t\t\t/** @type {Set<number>} */ (this.semicolons).has(pos)) ||\n\t\t\t// Or asking for the start position of the current statement,\n\t\t\t// here we have to check multiple things\n\t\t\t(currentStatement.range[0] === pos &&\n\t\t\t\t// is there a previous statement which might be relevant?\n\t\t\t\tthis.prevStatement !== undefined &&\n\t\t\t\t// is the end position of the previous statement an ASI position?\n\t\t\t\t/** @type {Set<number>} */ (this.semicolons).has(\n\t\t\t\t\tthis.prevStatement.range[1]\n\t\t\t\t))\n\t\t);\n\t}\n\n\t/**\n\t * @param {number} pos source code position\n\t * @returns {void}\n\t */\n\tunsetAsiPosition(pos) {\n\t\t/** @type {Set<number>} */ (this.semicolons).delete(pos);\n\t}\n\n\t/**\n\t * @param {Expression} expr expression\n\t * @returns {boolean} true, when the expression is a statement level expression\n\t */\n\tisStatementLevelExpression(expr) {\n\t\tconst currentStatement = this.statementPath[this.statementPath.length - 1];\n\t\treturn (\n\t\t\texpr === currentStatement ||\n\t\t\t(currentStatement.type === \"ExpressionStatement\" &&\n\t\t\t\tcurrentStatement.expression === expr)\n\t\t);\n\t}\n\n\t/**\n\t * @param {string} name name\n\t * @param {TODO} tag tag info\n\t * @returns {TODO} tag data\n\t */\n\tgetTagData(name, tag) {\n\t\tconst info = this.scope.definitions.get(name);\n\t\tif (info instanceof VariableInfo) {\n\t\t\tlet tagInfo = info.tagInfo;\n\t\t\twhile (tagInfo !== undefined) {\n\t\t\t\tif (tagInfo.tag === tag) return tagInfo.data;\n\t\t\t\ttagInfo = tagInfo.next;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} name name\n\t * @param {TODO} tag tag info\n\t * @param {TODO=} data data\n\t */\n\ttagVariable(name, tag, data) {\n\t\tconst oldInfo = this.scope.definitions.get(name);\n\t\t/** @type {VariableInfo} */\n\t\tlet newInfo;\n\t\tif (oldInfo === undefined) {\n\t\t\tnewInfo = new VariableInfo(this.scope, name, {\n\t\t\t\ttag,\n\t\t\t\tdata,\n\t\t\t\tnext: undefined\n\t\t\t});\n\t\t} else if (oldInfo instanceof VariableInfo) {\n\t\t\tnewInfo = new VariableInfo(oldInfo.declaredScope, oldInfo.freeName, {\n\t\t\t\ttag,\n\t\t\t\tdata,\n\t\t\t\tnext: oldInfo.tagInfo\n\t\t\t});\n\t\t} else {\n\t\t\tnewInfo = new VariableInfo(oldInfo, true, {\n\t\t\t\ttag,\n\t\t\t\tdata,\n\t\t\t\tnext: undefined\n\t\t\t});\n\t\t}\n\t\tthis.scope.definitions.set(name, newInfo);\n\t}\n\n\t/**\n\t * @param {string} name variable name\n\t */\n\tdefineVariable(name) {\n\t\tconst oldInfo = this.scope.definitions.get(name);\n\t\t// Don't redefine variable in same scope to keep existing tags\n\t\tif (oldInfo instanceof VariableInfo && oldInfo.declaredScope === this.scope)\n\t\t\treturn;\n\t\tthis.scope.definitions.set(name, this.scope);\n\t}\n\n\t/**\n\t * @param {string} name variable name\n\t */\n\tundefineVariable(name) {\n\t\tthis.scope.definitions.delete(name);\n\t}\n\n\t/**\n\t * @param {string} name variable name\n\t * @returns {boolean} true, when variable is defined\n\t */\n\tisVariableDefined(name) {\n\t\tconst info = this.scope.definitions.get(name);\n\t\tif (info === undefined) return false;\n\t\tif (info instanceof VariableInfo) {\n\t\t\treturn info.freeName === true;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {string} name variable name\n\t * @returns {string | ExportedVariableInfo} info for this variable\n\t */\n\tgetVariableInfo(name) {\n\t\tconst value = this.scope.definitions.get(name);\n\t\tif (value === undefined) {\n\t\t\treturn name;\n\t\t} else {\n\t\t\treturn value;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} name variable name\n\t * @param {string | ExportedVariableInfo} variableInfo new info for this variable\n\t * @returns {void}\n\t */\n\tsetVariable(name, variableInfo) {\n\t\tif (typeof variableInfo === \"string\") {\n\t\t\tif (variableInfo === name) {\n\t\t\t\tthis.scope.definitions.delete(name);\n\t\t\t} else {\n\t\t\t\tthis.scope.definitions.set(\n\t\t\t\t\tname,\n\t\t\t\t\tnew VariableInfo(this.scope, variableInfo, undefined)\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.scope.definitions.set(name, variableInfo);\n\t\t}\n\t}\n\n\t/**\n\t * @param {TagInfo} tagInfo tag info\n\t * @returns {VariableInfo} variable info\n\t */\n\tevaluatedVariable(tagInfo) {\n\t\treturn new VariableInfo(this.scope, undefined, tagInfo);\n\t}\n\n\t/**\n\t * @param {Range} range range of the comment\n\t * @returns {TODO} TODO\n\t */\n\tparseCommentOptions(range) {\n\t\tconst comments = this.getComments(range);\n\t\tif (comments.length === 0) {\n\t\t\treturn EMPTY_COMMENT_OPTIONS;\n\t\t}\n\t\tlet options = {};\n\t\t/** @type {unknown[]} */\n\t\tlet errors = [];\n\t\tfor (const comment of comments) {\n\t\t\tconst { value } = comment;\n\t\t\tif (value && webpackCommentRegExp.test(value)) {\n\t\t\t\t// try compile only if webpack options comment is present\n\t\t\t\ttry {\n\t\t\t\t\tfor (let [key, val] of Object.entries(\n\t\t\t\t\t\tvm.runInContext(\n\t\t\t\t\t\t\t`(function(){return {${value}};})()`,\n\t\t\t\t\t\t\tthis.magicCommentContext\n\t\t\t\t\t\t)\n\t\t\t\t\t)) {\n\t\t\t\t\t\tif (typeof val === \"object\" && val !== null) {\n\t\t\t\t\t\t\tif (val.constructor.name === \"RegExp\") val = new RegExp(val);\n\t\t\t\t\t\t\telse val = JSON.parse(JSON.stringify(val));\n\t\t\t\t\t\t}\n\t\t\t\t\t\toptions[key] = val;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconst newErr = new Error(String(e.message));\n\t\t\t\t\tnewErr.stack = String(e.stack);\n\t\t\t\t\tObject.assign(newErr, { comment });\n\t\t\t\t\terrors.push(newErr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { options, errors };\n\t}\n\n\t/**\n\t * @param {MemberExpression} expression a member expression\n\t * @returns {{ members: string[], object: Expression | Super, membersOptionals: boolean[], memberRanges: Range[] }} member names (reverse order) and remaining object\n\t */\n\textractMemberExpressionChain(expression) {\n\t\t/** @type {AnyNode} */\n\t\tlet expr = expression;\n\t\tconst members = [];\n\t\tconst membersOptionals = [];\n\t\tconst memberRanges = [];\n\t\twhile (expr.type === \"MemberExpression\") {\n\t\t\tif (expr.computed) {\n\t\t\t\tif (expr.property.type !== \"Literal\") break;\n\t\t\t\tmembers.push(`${expr.property.value}`); // the literal\n\t\t\t\tmemberRanges.push(/** @type {Range} */ (expr.object.range)); // the range of the expression fragment before the literal\n\t\t\t} else {\n\t\t\t\tif (expr.property.type !== \"Identifier\") break;\n\t\t\t\tmembers.push(expr.property.name); // the identifier\n\t\t\t\tmemberRanges.push(/** @type {Range} */ (expr.object.range)); // the range of the expression fragment before the identifier\n\t\t\t}\n\t\t\tmembersOptionals.push(expr.optional);\n\t\t\texpr = expr.object;\n\t\t}\n\n\t\treturn {\n\t\t\tmembers,\n\t\t\tmembersOptionals,\n\t\t\tmemberRanges,\n\t\t\tobject: expr\n\t\t};\n\t}\n\n\t/**\n\t * @param {string} varName variable name\n\t * @returns {{name: string, info: VariableInfo | string} | undefined} name of the free variable and variable info for that\n\t */\n\tgetFreeInfoFromVariable(varName) {\n\t\tconst info = this.getVariableInfo(varName);\n\t\tlet name;\n\t\tif (info instanceof VariableInfo) {\n\t\t\tname = info.freeName;\n\t\t\tif (typeof name !== \"string\") return undefined;\n\t\t} else if (typeof info !== \"string\") {\n\t\t\treturn undefined;\n\t\t} else {\n\t\t\tname = info;\n\t\t}\n\t\treturn { info, name };\n\t}\n\n\t/** @typedef {{ type: \"call\", call: CallExpression, calleeName: string, rootInfo: string | VariableInfo, getCalleeMembers: () => string[], name: string, getMembers: () => string[], getMembersOptionals: () => boolean[], getMemberRanges: () => Range[]}} CallExpressionInfo */\n\t/** @typedef {{ type: \"expression\", rootInfo: string | VariableInfo, name: string, getMembers: () => string[], getMembersOptionals: () => boolean[], getMemberRanges: () => Range[]}} ExpressionExpressionInfo */\n\n\t/**\n\t * @param {MemberExpression} expression a member expression\n\t * @param {number} allowedTypes which types should be returned, presented in bit mask\n\t * @returns {CallExpressionInfo | ExpressionExpressionInfo | undefined} expression info\n\t */\n\tgetMemberExpressionInfo(expression, allowedTypes) {\n\t\tconst { object, members, membersOptionals, memberRanges } =\n\t\t\tthis.extractMemberExpressionChain(expression);\n\t\tswitch (object.type) {\n\t\t\tcase \"CallExpression\": {\n\t\t\t\tif ((allowedTypes & ALLOWED_MEMBER_TYPES_CALL_EXPRESSION) === 0)\n\t\t\t\t\treturn undefined;\n\t\t\t\tlet callee = object.callee;\n\t\t\t\tlet rootMembers = EMPTY_ARRAY;\n\t\t\t\tif (callee.type === \"MemberExpression\") {\n\t\t\t\t\t({ object: callee, members: rootMembers } =\n\t\t\t\t\t\tthis.extractMemberExpressionChain(callee));\n\t\t\t\t}\n\t\t\t\tconst rootName = getRootName(callee);\n\t\t\t\tif (!rootName) return undefined;\n\t\t\t\tconst result = this.getFreeInfoFromVariable(rootName);\n\t\t\t\tif (!result) return undefined;\n\t\t\t\tconst { info: rootInfo, name: resolvedRoot } = result;\n\t\t\t\tconst calleeName = objectAndMembersToName(resolvedRoot, rootMembers);\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"call\",\n\t\t\t\t\tcall: object,\n\t\t\t\t\tcalleeName,\n\t\t\t\t\trootInfo,\n\t\t\t\t\tgetCalleeMembers: memoize(() => rootMembers.reverse()),\n\t\t\t\t\tname: objectAndMembersToName(`${calleeName}()`, members),\n\t\t\t\t\tgetMembers: memoize(() => members.reverse()),\n\t\t\t\t\tgetMembersOptionals: memoize(() => membersOptionals.reverse()),\n\t\t\t\t\tgetMemberRanges: memoize(() => memberRanges.reverse())\n\t\t\t\t};\n\t\t\t}\n\t\t\tcase \"Identifier\":\n\t\t\tcase \"MetaProperty\":\n\t\t\tcase \"ThisExpression\": {\n\t\t\t\tif ((allowedTypes & ALLOWED_MEMBER_TYPES_EXPRESSION) === 0)\n\t\t\t\t\treturn undefined;\n\t\t\t\tconst rootName = getRootName(object);\n\t\t\t\tif (!rootName) return undefined;\n\n\t\t\t\tconst result = this.getFreeInfoFromVariable(rootName);\n\t\t\t\tif (!result) return undefined;\n\t\t\t\tconst { info: rootInfo, name: resolvedRoot } = result;\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"expression\",\n\t\t\t\t\tname: objectAndMembersToName(resolvedRoot, members),\n\t\t\t\t\trootInfo,\n\t\t\t\t\tgetMembers: memoize(() => members.reverse()),\n\t\t\t\t\tgetMembersOptionals: memoize(() => membersOptionals.reverse()),\n\t\t\t\t\tgetMemberRanges: memoize(() => memberRanges.reverse())\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {MemberExpression} expression an expression\n\t * @returns {{ name: string, rootInfo: ExportedVariableInfo, getMembers: () => string[]} | undefined} name info\n\t */\n\tgetNameForExpression(expression) {\n\t\treturn this.getMemberExpressionInfo(\n\t\t\texpression,\n\t\t\tALLOWED_MEMBER_TYPES_EXPRESSION\n\t\t);\n\t}\n\n\t/**\n\t * @param {string} code source code\n\t * @param {ParseOptions} options parsing options\n\t * @returns {Program} parsed ast\n\t */\n\tstatic _parse(code, options) {\n\t\tconst type = options ? options.sourceType : \"module\";\n\t\t/** @type {AcornOptions} */\n\t\tconst parserOptions = {\n\t\t\t...defaultParserOptions,\n\t\t\tallowReturnOutsideFunction: type === \"script\",\n\t\t\t...options,\n\t\t\tsourceType: type === \"auto\" ? \"module\" : type\n\t\t};\n\n\t\t/** @type {AnyNode | undefined} */\n\t\tlet ast;\n\t\tlet error;\n\t\tlet threw = false;\n\t\ttry {\n\t\t\tast = /** @type {AnyNode} */ (parser.parse(code, parserOptions));\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t\tthrew = true;\n\t\t}\n\n\t\tif (threw && type === \"auto\") {\n\t\t\tparserOptions.sourceType = \"script\";\n\t\t\tif (!(\"allowReturnOutsideFunction\" in options)) {\n\t\t\t\tparserOptions.allowReturnOutsideFunction = true;\n\t\t\t}\n\t\t\tif (Array.isArray(parserOptions.onComment)) {\n\t\t\t\tparserOptions.onComment.length = 0;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tast = /** @type {AnyNode} */ (parser.parse(code, parserOptions));\n\t\t\t\tthrew = false;\n\t\t\t} catch (e) {\n\t\t\t\t// we use the error from first parse try\n\t\t\t\t// so nothing to do here\n\t\t\t}\n\t\t}\n\n\t\tif (threw) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn /** @type {Program} */ (ast);\n\t}\n}\n\nmodule.exports = JavascriptParser;\nmodule.exports.ALLOWED_MEMBER_TYPES_ALL = ALLOWED_MEMBER_TYPES_ALL;\nmodule.exports.ALLOWED_MEMBER_TYPES_EXPRESSION =\n\tALLOWED_MEMBER_TYPES_EXPRESSION;\nmodule.exports.ALLOWED_MEMBER_TYPES_CALL_EXPRESSION =\n\tALLOWED_MEMBER_TYPES_CALL_EXPRESSION;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}