{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst parseJson = require(\"json-parse-even-better-errors\");\nconst DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\nconst ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\nconst WebpackError = require(\"./WebpackError\");\nconst DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\nconst makePathsRelative = require(\"./util/identifier\").makePathsRelative;\n\n/** @typedef {import(\"../declarations/WebpackOptions\").Externals} Externals */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./util/fs\").InputFileSystem} InputFileSystem */\n\nconst validate = createSchemaValidation(require(\"../schemas/plugins/DllReferencePlugin.check.js\"), () => require(\"../schemas/plugins/DllReferencePlugin.json\"), {\n  name: \"Dll Reference Plugin\",\n  baseDataPath: \"options\"\n});\nclass DllReferencePlugin {\n  /**\n   * @param {DllReferencePluginOptions} options options object\n   */\n  constructor(options) {\n    validate(options);\n    this.options = options;\n    /** @type {WeakMap<Object, {path: string, data: DllReferencePluginOptionsManifest?, error: Error?}>} */\n    this._compilationData = new WeakMap();\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"DllReferencePlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(DelegatedSourceDependency, normalModuleFactory);\n    });\n    compiler.hooks.beforeCompile.tapAsync(\"DllReferencePlugin\", (params, callback) => {\n      if (\"manifest\" in this.options) {\n        const manifest = this.options.manifest;\n        if (typeof manifest === \"string\") {\n          /** @type {InputFileSystem} */\n          compiler.inputFileSystem.readFile(manifest, (err, result) => {\n            if (err) return callback(err);\n            const data = {\n              path: manifest,\n              data: undefined,\n              error: undefined\n            };\n            // Catch errors parsing the manifest so that blank\n            // or malformed manifest files don't kill the process.\n            try {\n              data.data = parseJson( /** @type {Buffer} */result.toString(\"utf-8\"));\n            } catch (e) {\n              // Store the error in the params so that it can\n              // be added as a compilation error later on.\n              const manifestPath = makePathsRelative(compiler.options.context, manifest, compiler.root);\n              data.error = new DllManifestError(manifestPath, e.message);\n            }\n            this._compilationData.set(params, data);\n            return callback();\n          });\n          return;\n        }\n      }\n      return callback();\n    });\n    compiler.hooks.compile.tap(\"DllReferencePlugin\", params => {\n      let name = this.options.name;\n      let sourceType = this.options.sourceType;\n      let content = \"content\" in this.options ? this.options.content : undefined;\n      if (\"manifest\" in this.options) {\n        let manifestParameter = this.options.manifest;\n        let manifest;\n        if (typeof manifestParameter === \"string\") {\n          const data = this._compilationData.get(params);\n          // If there was an error parsing the manifest\n          // file, exit now because the error will be added\n          // as a compilation error in the \"compilation\" hook.\n          if (data.error) {\n            return;\n          }\n          manifest = data.data;\n        } else {\n          manifest = manifestParameter;\n        }\n        if (manifest) {\n          if (!name) name = manifest.name;\n          if (!sourceType) sourceType = manifest.type;\n          if (!content) content = manifest.content;\n        }\n      }\n      /** @type {Externals} */\n      const externals = {};\n      const source = \"dll-reference \" + name;\n      externals[source] = name;\n      const normalModuleFactory = params.normalModuleFactory;\n      new ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(normalModuleFactory);\n      new DelegatedModuleFactoryPlugin({\n        source: source,\n        type: this.options.type,\n        scope: this.options.scope,\n        context: this.options.context || compiler.options.context,\n        content,\n        extensions: this.options.extensions,\n        associatedObjectForCache: compiler.root\n      }).apply(normalModuleFactory);\n    });\n    compiler.hooks.compilation.tap(\"DllReferencePlugin\", (compilation, params) => {\n      if (\"manifest\" in this.options) {\n        let manifest = this.options.manifest;\n        if (typeof manifest === \"string\") {\n          const data = this._compilationData.get(params);\n          // If there was an error parsing the manifest file, add the\n          // error as a compilation error to make the compilation fail.\n          if (data.error) {\n            compilation.errors.push( /** @type {DllManifestError} */data.error);\n          }\n          compilation.fileDependencies.add(manifest);\n        }\n      }\n    });\n  }\n}\nclass DllManifestError extends WebpackError {\n  /**\n   * @param {string} filename filename of the manifest\n   * @param {string} message error message\n   */\n  constructor(filename, message) {\n    super();\n    this.name = \"DllManifestError\";\n    this.message = `Dll manifest ${filename}\\n${message}`;\n  }\n}\nmodule.exports = DllReferencePlugin;","map":{"version":3,"names":["parseJson","require","DelegatedModuleFactoryPlugin","ExternalModuleFactoryPlugin","WebpackError","DelegatedSourceDependency","createSchemaValidation","makePathsRelative","validate","name","baseDataPath","DllReferencePlugin","constructor","options","_compilationData","WeakMap","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","beforeCompile","tapAsync","params","callback","manifest","inputFileSystem","readFile","err","result","data","path","undefined","error","toString","e","manifestPath","context","root","DllManifestError","message","compile","sourceType","content","manifestParameter","get","type","externals","source","scope","extensions","associatedObjectForCache","errors","push","fileDependencies","add","filename","module","exports"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/DllReferencePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst parseJson = require(\"json-parse-even-better-errors\");\nconst DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\nconst ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\nconst WebpackError = require(\"./WebpackError\");\nconst DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\nconst makePathsRelative = require(\"./util/identifier\").makePathsRelative;\n\n/** @typedef {import(\"../declarations/WebpackOptions\").Externals} Externals */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./util/fs\").InputFileSystem} InputFileSystem */\n\nconst validate = createSchemaValidation(\n\trequire(\"../schemas/plugins/DllReferencePlugin.check.js\"),\n\t() => require(\"../schemas/plugins/DllReferencePlugin.json\"),\n\t{\n\t\tname: \"Dll Reference Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nclass DllReferencePlugin {\n\t/**\n\t * @param {DllReferencePluginOptions} options options object\n\t */\n\tconstructor(options) {\n\t\tvalidate(options);\n\t\tthis.options = options;\n\t\t/** @type {WeakMap<Object, {path: string, data: DllReferencePluginOptionsManifest?, error: Error?}>} */\n\t\tthis._compilationData = new WeakMap();\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tDelegatedSourceDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.beforeCompile.tapAsync(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(params, callback) => {\n\t\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\t\tconst manifest = this.options.manifest;\n\t\t\t\t\tif (typeof manifest === \"string\") {\n\t\t\t\t\t\t/** @type {InputFileSystem} */\n\t\t\t\t\t\t(compiler.inputFileSystem).readFile(manifest, (err, result) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tconst data = {\n\t\t\t\t\t\t\t\tpath: manifest,\n\t\t\t\t\t\t\t\tdata: undefined,\n\t\t\t\t\t\t\t\terror: undefined\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t// Catch errors parsing the manifest so that blank\n\t\t\t\t\t\t\t// or malformed manifest files don't kill the process.\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdata.data = parseJson(\n\t\t\t\t\t\t\t\t\t/** @type {Buffer} */ (result).toString(\"utf-8\")\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t// Store the error in the params so that it can\n\t\t\t\t\t\t\t\t// be added as a compilation error later on.\n\t\t\t\t\t\t\t\tconst manifestPath = makePathsRelative(\n\t\t\t\t\t\t\t\t\tcompiler.options.context,\n\t\t\t\t\t\t\t\t\tmanifest,\n\t\t\t\t\t\t\t\t\tcompiler.root\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdata.error = new DllManifestError(manifestPath, e.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis._compilationData.set(params, data);\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn callback();\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.compile.tap(\"DllReferencePlugin\", params => {\n\t\t\tlet name = this.options.name;\n\t\t\tlet sourceType = this.options.sourceType;\n\t\t\tlet content =\n\t\t\t\t\"content\" in this.options ? this.options.content : undefined;\n\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\tlet manifestParameter = this.options.manifest;\n\t\t\t\tlet manifest;\n\t\t\t\tif (typeof manifestParameter === \"string\") {\n\t\t\t\t\tconst data = this._compilationData.get(params);\n\t\t\t\t\t// If there was an error parsing the manifest\n\t\t\t\t\t// file, exit now because the error will be added\n\t\t\t\t\t// as a compilation error in the \"compilation\" hook.\n\t\t\t\t\tif (data.error) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tmanifest = data.data;\n\t\t\t\t} else {\n\t\t\t\t\tmanifest = manifestParameter;\n\t\t\t\t}\n\t\t\t\tif (manifest) {\n\t\t\t\t\tif (!name) name = manifest.name;\n\t\t\t\t\tif (!sourceType) sourceType = manifest.type;\n\t\t\t\t\tif (!content) content = manifest.content;\n\t\t\t\t}\n\t\t\t}\n\t\t\t/** @type {Externals} */\n\t\t\tconst externals = {};\n\t\t\tconst source = \"dll-reference \" + name;\n\t\t\texternals[source] = name;\n\t\t\tconst normalModuleFactory = params.normalModuleFactory;\n\t\t\tnew ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(\n\t\t\t\tnormalModuleFactory\n\t\t\t);\n\t\t\tnew DelegatedModuleFactoryPlugin({\n\t\t\t\tsource: source,\n\t\t\t\ttype: this.options.type,\n\t\t\t\tscope: this.options.scope,\n\t\t\t\tcontext: this.options.context || compiler.options.context,\n\t\t\t\tcontent,\n\t\t\t\textensions: this.options.extensions,\n\t\t\t\tassociatedObjectForCache: compiler.root\n\t\t\t}).apply(normalModuleFactory);\n\t\t});\n\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(compilation, params) => {\n\t\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\t\tlet manifest = this.options.manifest;\n\t\t\t\t\tif (typeof manifest === \"string\") {\n\t\t\t\t\t\tconst data = this._compilationData.get(params);\n\t\t\t\t\t\t// If there was an error parsing the manifest file, add the\n\t\t\t\t\t\t// error as a compilation error to make the compilation fail.\n\t\t\t\t\t\tif (data.error) {\n\t\t\t\t\t\t\tcompilation.errors.push(\n\t\t\t\t\t\t\t\t/** @type {DllManifestError} */ (data.error)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcompilation.fileDependencies.add(manifest);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n}\n\nclass DllManifestError extends WebpackError {\n\t/**\n\t * @param {string} filename filename of the manifest\n\t * @param {string} message error message\n\t */\n\tconstructor(filename, message) {\n\t\tsuper();\n\n\t\tthis.name = \"DllManifestError\";\n\t\tthis.message = `Dll manifest ${filename}\\n${message}`;\n\t}\n}\n\nmodule.exports = DllReferencePlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}