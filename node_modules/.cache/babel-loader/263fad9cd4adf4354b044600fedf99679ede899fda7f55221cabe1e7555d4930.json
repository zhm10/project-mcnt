{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst InitFragment = require(\"../InitFragment\");\nconst makeSerializable = require(\"../util/makeSerializable\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {Map<string, Set<string>>} ImportSpecifiers */\n\n/**\n * @extends {InitFragment<GenerateContext>}\n */\nclass ExternalModuleInitFragment extends InitFragment {\n  /**\n   * @param {string} importedModule imported module\n   * @param {Array<{ name: string, value?: string }> | ImportSpecifiers} specifiers import specifiers\n   * @param {string=} defaultImport default import\n   */\n  constructor(importedModule, specifiers, defaultImport) {\n    super(undefined, InitFragment.STAGE_CONSTANTS, 0, `external module imports|${importedModule}|${defaultImport || \"null\"}`);\n    this.importedModule = importedModule;\n    if (Array.isArray(specifiers)) {\n      /** @type {ImportSpecifiers} */\n      this.specifiers = new Map();\n      for (const {\n        name,\n        value\n      } of specifiers) {\n        let specifiers = this.specifiers.get(name);\n        if (!specifiers) {\n          specifiers = new Set();\n          this.specifiers.set(name, specifiers);\n        }\n        specifiers.add(value || name);\n      }\n    } else {\n      this.specifiers = specifiers;\n    }\n    this.defaultImport = defaultImport;\n  }\n\n  /**\n   * @param {ExternalModuleInitFragment} other other\n   * @returns {ExternalModuleInitFragment} ExternalModuleInitFragment\n   */\n  merge(other) {\n    const newSpecifiersMap = new Map(this.specifiers);\n    for (const [name, specifiers] of other.specifiers) {\n      if (newSpecifiersMap.has(name)) {\n        const currentSpecifiers = /** @type {Set<string>} */\n        newSpecifiersMap.get(name);\n        for (const spec of specifiers) currentSpecifiers.add(spec);\n      } else {\n        newSpecifiersMap.set(name, specifiers);\n      }\n    }\n    return new ExternalModuleInitFragment(this.importedModule, newSpecifiersMap, this.defaultImport);\n  }\n\n  /**\n   * @param {GenerateContext} context context\n   * @returns {string | Source | undefined} the source code that will be included as initialization code\n   */\n  getContent({\n    runtimeRequirements\n  }) {\n    const namedImports = [];\n    for (const [name, specifiers] of this.specifiers) {\n      for (const spec of specifiers) {\n        if (spec === name) {\n          namedImports.push(name);\n        } else {\n          namedImports.push(`${name} as ${spec}`);\n        }\n      }\n    }\n    let importsString = namedImports.length > 0 ? `{${namedImports.join(\",\")}}` : \"\";\n    if (this.defaultImport) {\n      importsString = `${this.defaultImport}${importsString ? `, ${importsString}` : \"\"}`;\n    }\n    return `import ${importsString} from ${JSON.stringify(this.importedModule)};`;\n  }\n\n  /**\n   * @param {ObjectSerializerContext} context context\n   */\n  serialize(context) {\n    super.serialize(context);\n    const {\n      write\n    } = context;\n    write(this.importedModule);\n    write(this.specifiers);\n    write(this.defaultImport);\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   */\n  deserialize(context) {\n    super.deserialize(context);\n    const {\n      read\n    } = context;\n    this.importedModule = read();\n    this.specifiers = read();\n    this.defaultImport = read();\n  }\n}\nmakeSerializable(ExternalModuleInitFragment, \"webpack/lib/dependencies/ExternalModuleInitFragment\");\nmodule.exports = ExternalModuleInitFragment;","map":{"version":3,"names":["InitFragment","require","makeSerializable","ExternalModuleInitFragment","constructor","importedModule","specifiers","defaultImport","undefined","STAGE_CONSTANTS","Array","isArray","Map","name","value","get","Set","set","add","merge","other","newSpecifiersMap","has","currentSpecifiers","spec","getContent","runtimeRequirements","namedImports","push","importsString","length","join","JSON","stringify","serialize","context","write","deserialize","read","module","exports"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/dependencies/ExternalModuleInitFragment.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst InitFragment = require(\"../InitFragment\");\nconst makeSerializable = require(\"../util/makeSerializable\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {Map<string, Set<string>>} ImportSpecifiers */\n\n/**\n * @extends {InitFragment<GenerateContext>}\n */\nclass ExternalModuleInitFragment extends InitFragment {\n\t/**\n\t * @param {string} importedModule imported module\n\t * @param {Array<{ name: string, value?: string }> | ImportSpecifiers} specifiers import specifiers\n\t * @param {string=} defaultImport default import\n\t */\n\tconstructor(importedModule, specifiers, defaultImport) {\n\t\tsuper(\n\t\t\tundefined,\n\t\t\tInitFragment.STAGE_CONSTANTS,\n\t\t\t0,\n\t\t\t`external module imports|${importedModule}|${defaultImport || \"null\"}`\n\t\t);\n\t\tthis.importedModule = importedModule;\n\t\tif (Array.isArray(specifiers)) {\n\t\t\t/** @type {ImportSpecifiers} */\n\t\t\tthis.specifiers = new Map();\n\t\t\tfor (const { name, value } of specifiers) {\n\t\t\t\tlet specifiers = this.specifiers.get(name);\n\t\t\t\tif (!specifiers) {\n\t\t\t\t\tspecifiers = new Set();\n\t\t\t\t\tthis.specifiers.set(name, specifiers);\n\t\t\t\t}\n\t\t\t\tspecifiers.add(value || name);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.specifiers = specifiers;\n\t\t}\n\t\tthis.defaultImport = defaultImport;\n\t}\n\n\t/**\n\t * @param {ExternalModuleInitFragment} other other\n\t * @returns {ExternalModuleInitFragment} ExternalModuleInitFragment\n\t */\n\tmerge(other) {\n\t\tconst newSpecifiersMap = new Map(this.specifiers);\n\t\tfor (const [name, specifiers] of other.specifiers) {\n\t\t\tif (newSpecifiersMap.has(name)) {\n\t\t\t\tconst currentSpecifiers =\n\t\t\t\t\t/** @type {Set<string>} */\n\t\t\t\t\t(newSpecifiersMap.get(name));\n\t\t\t\tfor (const spec of specifiers) currentSpecifiers.add(spec);\n\t\t\t} else {\n\t\t\t\tnewSpecifiersMap.set(name, specifiers);\n\t\t\t}\n\t\t}\n\t\treturn new ExternalModuleInitFragment(\n\t\t\tthis.importedModule,\n\t\t\tnewSpecifiersMap,\n\t\t\tthis.defaultImport\n\t\t);\n\t}\n\n\t/**\n\t * @param {GenerateContext} context context\n\t * @returns {string | Source | undefined} the source code that will be included as initialization code\n\t */\n\tgetContent({ runtimeRequirements }) {\n\t\tconst namedImports = [];\n\n\t\tfor (const [name, specifiers] of this.specifiers) {\n\t\t\tfor (const spec of specifiers) {\n\t\t\t\tif (spec === name) {\n\t\t\t\t\tnamedImports.push(name);\n\t\t\t\t} else {\n\t\t\t\t\tnamedImports.push(`${name} as ${spec}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet importsString =\n\t\t\tnamedImports.length > 0 ? `{${namedImports.join(\",\")}}` : \"\";\n\n\t\tif (this.defaultImport) {\n\t\t\timportsString = `${this.defaultImport}${\n\t\t\t\timportsString ? `, ${importsString}` : \"\"\n\t\t\t}`;\n\t\t}\n\n\t\treturn `import ${importsString} from ${JSON.stringify(\n\t\t\tthis.importedModule\n\t\t)};`;\n\t}\n\n\t/**\n\t * @param {ObjectSerializerContext} context context\n\t */\n\tserialize(context) {\n\t\tsuper.serialize(context);\n\t\tconst { write } = context;\n\t\twrite(this.importedModule);\n\t\twrite(this.specifiers);\n\t\twrite(this.defaultImport);\n\t}\n\n\t/**\n\t * @param {ObjectDeserializerContext} context context\n\t */\n\tdeserialize(context) {\n\t\tsuper.deserialize(context);\n\t\tconst { read } = context;\n\t\tthis.importedModule = read();\n\t\tthis.specifiers = read();\n\t\tthis.defaultImport = read();\n\t}\n}\n\nmakeSerializable(\n\tExternalModuleInitFragment,\n\t\"webpack/lib/dependencies/ExternalModuleInitFragment\"\n);\n\nmodule.exports = ExternalModuleInitFragment;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}