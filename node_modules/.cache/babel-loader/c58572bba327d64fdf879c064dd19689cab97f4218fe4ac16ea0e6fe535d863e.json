{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Gengkun He @ahabhgk\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorExportsConvention} CssGeneratorExportsConvention */\n\n/**\n * @param {string} input input\n * @param {CssGeneratorExportsConvention} convention convention\n * @returns {Set<string>} results\n */\nexports.cssExportConvention = (input, convention) => {\n  const set = new Set();\n  if (typeof convention === \"function\") {\n    set.add(convention(input));\n  } else {\n    switch (convention) {\n      case \"camel-case\":\n        {\n          set.add(input);\n          set.add(exports.camelCase(input));\n          break;\n        }\n      case \"camel-case-only\":\n        {\n          set.add(exports.camelCase(input));\n          break;\n        }\n      case \"dashes\":\n        {\n          set.add(input);\n          set.add(exports.dashesCamelCase(input));\n          break;\n        }\n      case \"dashes-only\":\n        {\n          set.add(exports.dashesCamelCase(input));\n          break;\n        }\n      case \"as-is\":\n        {\n          set.add(input);\n          break;\n        }\n    }\n  }\n  return set;\n};\n\n// Copy from css-loader\n/**\n * @param {string} input input\n * @returns {string} result\n */\nexports.dashesCamelCase = input => {\n  return input.replace(/-+(\\w)/g, (match, firstLetter) => firstLetter.toUpperCase());\n};\n\n// Copy from css-loader\n/**\n * @param {string} input input\n * @returns {string} result\n */\nexports.camelCase = input => {\n  let result = input.trim();\n  if (result.length === 0) {\n    return \"\";\n  }\n  if (result.length === 1) {\n    return result.toLowerCase();\n  }\n  const hasUpperCase = result !== result.toLowerCase();\n  if (hasUpperCase) {\n    result = preserveCamelCase(result);\n  }\n  return result.replace(/^[_.\\- ]+/, \"\").toLowerCase().replace(/[_.\\- ]+([\\p{Alpha}\\p{N}_]|$)/gu, (_, p1) => p1.toUpperCase()).replace(/\\d+([\\p{Alpha}\\p{N}_]|$)/gu, m => m.toUpperCase());\n};\n\n// Copy from css-loader\n/**\n * @param {string} string string\n * @returns {string} result\n */\nconst preserveCamelCase = string => {\n  let result = string;\n  let isLastCharLower = false;\n  let isLastCharUpper = false;\n  let isLastLastCharUpper = false;\n  for (let i = 0; i < result.length; i++) {\n    const character = result[i];\n    if (isLastCharLower && /[\\p{Lu}]/u.test(character)) {\n      result = `${result.slice(0, i)}-${result.slice(i)}`;\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i += 1;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[\\p{Ll}]/u.test(character)) {\n      result = `${result.slice(0, i - 1)}-${result.slice(i - 1)}`;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n  return result;\n};","map":{"version":3,"names":["exports","cssExportConvention","input","convention","set","Set","add","camelCase","dashesCamelCase","replace","match","firstLetter","toUpperCase","result","trim","length","toLowerCase","hasUpperCase","preserveCamelCase","_","p1","m","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/util/conventions.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Gengkun He @ahabhgk\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorExportsConvention} CssGeneratorExportsConvention */\n\n/**\n * @param {string} input input\n * @param {CssGeneratorExportsConvention} convention convention\n * @returns {Set<string>} results\n */\nexports.cssExportConvention = (input, convention) => {\n\tconst set = new Set();\n\tif (typeof convention === \"function\") {\n\t\tset.add(convention(input));\n\t} else {\n\t\tswitch (convention) {\n\t\t\tcase \"camel-case\": {\n\t\t\t\tset.add(input);\n\t\t\t\tset.add(exports.camelCase(input));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"camel-case-only\": {\n\t\t\t\tset.add(exports.camelCase(input));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"dashes\": {\n\t\t\t\tset.add(input);\n\t\t\t\tset.add(exports.dashesCamelCase(input));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"dashes-only\": {\n\t\t\t\tset.add(exports.dashesCamelCase(input));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"as-is\": {\n\t\t\t\tset.add(input);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn set;\n};\n\n// Copy from css-loader\n/**\n * @param {string} input input\n * @returns {string} result\n */\nexports.dashesCamelCase = input => {\n\treturn input.replace(/-+(\\w)/g, (match, firstLetter) =>\n\t\tfirstLetter.toUpperCase()\n\t);\n};\n\n// Copy from css-loader\n/**\n * @param {string} input input\n * @returns {string} result\n */\nexports.camelCase = input => {\n\tlet result = input.trim();\n\n\tif (result.length === 0) {\n\t\treturn \"\";\n\t}\n\n\tif (result.length === 1) {\n\t\treturn result.toLowerCase();\n\t}\n\n\tconst hasUpperCase = result !== result.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tresult = preserveCamelCase(result);\n\t}\n\n\treturn result\n\t\t.replace(/^[_.\\- ]+/, \"\")\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+([\\p{Alpha}\\p{N}_]|$)/gu, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+([\\p{Alpha}\\p{N}_]|$)/gu, m => m.toUpperCase());\n};\n\n// Copy from css-loader\n/**\n * @param {string} string string\n * @returns {string} result\n */\nconst preserveCamelCase = string => {\n\tlet result = string;\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < result.length; i++) {\n\t\tconst character = result[i];\n\n\t\tif (isLastCharLower && /[\\p{Lu}]/u.test(character)) {\n\t\t\tresult = `${result.slice(0, i)}-${result.slice(i)}`;\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti += 1;\n\t\t} else if (\n\t\t\tisLastCharUpper &&\n\t\t\tisLastLastCharUpper &&\n\t\t\t/[\\p{Ll}]/u.test(character)\n\t\t) {\n\t\t\tresult = `${result.slice(0, i - 1)}-${result.slice(i - 1)}`;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower =\n\t\t\t\tcharacter.toLowerCase() === character &&\n\t\t\t\tcharacter.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper =\n\t\t\t\tcharacter.toUpperCase() === character &&\n\t\t\t\tcharacter.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn result;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;;AAEA;AACA;AACA;AACA;AACA;AACAA,OAAO,CAACC,mBAAmB,GAAG,CAACC,KAAK,EAAEC,UAAU,KAAK;EACpD,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,CAAC;EACrB,IAAI,OAAOF,UAAU,KAAK,UAAU,EAAE;IACrCC,GAAG,CAACE,GAAG,CAACH,UAAU,CAACD,KAAK,CAAC,CAAC;EAC3B,CAAC,MAAM;IACN,QAAQC,UAAU;MACjB,KAAK,YAAY;QAAE;UAClBC,GAAG,CAACE,GAAG,CAACJ,KAAK,CAAC;UACdE,GAAG,CAACE,GAAG,CAACN,OAAO,CAACO,SAAS,CAACL,KAAK,CAAC,CAAC;UACjC;QACD;MACA,KAAK,iBAAiB;QAAE;UACvBE,GAAG,CAACE,GAAG,CAACN,OAAO,CAACO,SAAS,CAACL,KAAK,CAAC,CAAC;UACjC;QACD;MACA,KAAK,QAAQ;QAAE;UACdE,GAAG,CAACE,GAAG,CAACJ,KAAK,CAAC;UACdE,GAAG,CAACE,GAAG,CAACN,OAAO,CAACQ,eAAe,CAACN,KAAK,CAAC,CAAC;UACvC;QACD;MACA,KAAK,aAAa;QAAE;UACnBE,GAAG,CAACE,GAAG,CAACN,OAAO,CAACQ,eAAe,CAACN,KAAK,CAAC,CAAC;UACvC;QACD;MACA,KAAK,OAAO;QAAE;UACbE,GAAG,CAACE,GAAG,CAACJ,KAAK,CAAC;UACd;QACD;IACD;EACD;EACA,OAAOE,GAAG;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAJ,OAAO,CAACQ,eAAe,GAAGN,KAAK,IAAI;EAClC,OAAOA,KAAK,CAACO,OAAO,CAAC,SAAS,EAAE,CAACC,KAAK,EAAEC,WAAW,KAClDA,WAAW,CAACC,WAAW,CAAC,CACzB,CAAC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAZ,OAAO,CAACO,SAAS,GAAGL,KAAK,IAAI;EAC5B,IAAIW,MAAM,GAAGX,KAAK,CAACY,IAAI,CAAC,CAAC;EAEzB,IAAID,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE;IACxB,OAAO,EAAE;EACV;EAEA,IAAIF,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE;IACxB,OAAOF,MAAM,CAACG,WAAW,CAAC,CAAC;EAC5B;EAEA,MAAMC,YAAY,GAAGJ,MAAM,KAAKA,MAAM,CAACG,WAAW,CAAC,CAAC;EAEpD,IAAIC,YAAY,EAAE;IACjBJ,MAAM,GAAGK,iBAAiB,CAACL,MAAM,CAAC;EACnC;EAEA,OAAOA,MAAM,CACXJ,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CACxBO,WAAW,CAAC,CAAC,CACbP,OAAO,CAAC,iCAAiC,EAAE,CAACU,CAAC,EAAEC,EAAE,KAAKA,EAAE,CAACR,WAAW,CAAC,CAAC,CAAC,CACvEH,OAAO,CAAC,4BAA4B,EAAEY,CAAC,IAAIA,CAAC,CAACT,WAAW,CAAC,CAAC,CAAC;AAC9D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMM,iBAAiB,GAAGI,MAAM,IAAI;EACnC,IAAIT,MAAM,GAAGS,MAAM;EACnB,IAAIC,eAAe,GAAG,KAAK;EAC3B,IAAIC,eAAe,GAAG,KAAK;EAC3B,IAAIC,mBAAmB,GAAG,KAAK;EAE/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,MAAM,CAACE,MAAM,EAAEW,CAAC,EAAE,EAAE;IACvC,MAAMC,SAAS,GAAGd,MAAM,CAACa,CAAC,CAAC;IAE3B,IAAIH,eAAe,IAAI,WAAW,CAACK,IAAI,CAACD,SAAS,CAAC,EAAE;MACnDd,MAAM,GAAG,GAAGA,MAAM,CAACgB,KAAK,CAAC,CAAC,EAAEH,CAAC,CAAC,IAAIb,MAAM,CAACgB,KAAK,CAACH,CAAC,CAAC,EAAE;MACnDH,eAAe,GAAG,KAAK;MACvBE,mBAAmB,GAAGD,eAAe;MACrCA,eAAe,GAAG,IAAI;MACtBE,CAAC,IAAI,CAAC;IACP,CAAC,MAAM,IACNF,eAAe,IACfC,mBAAmB,IACnB,WAAW,CAACG,IAAI,CAACD,SAAS,CAAC,EAC1B;MACDd,MAAM,GAAG,GAAGA,MAAM,CAACgB,KAAK,CAAC,CAAC,EAAEH,CAAC,GAAG,CAAC,CAAC,IAAIb,MAAM,CAACgB,KAAK,CAACH,CAAC,GAAG,CAAC,CAAC,EAAE;MAC3DD,mBAAmB,GAAGD,eAAe;MACrCA,eAAe,GAAG,KAAK;MACvBD,eAAe,GAAG,IAAI;IACvB,CAAC,MAAM;MACNA,eAAe,GACdI,SAAS,CAACX,WAAW,CAAC,CAAC,KAAKW,SAAS,IACrCA,SAAS,CAACf,WAAW,CAAC,CAAC,KAAKe,SAAS;MACtCF,mBAAmB,GAAGD,eAAe;MACrCA,eAAe,GACdG,SAAS,CAACf,WAAW,CAAC,CAAC,KAAKe,SAAS,IACrCA,SAAS,CAACX,WAAW,CAAC,CAAC,KAAKW,SAAS;IACvC;EACD;EAEA,OAAOd,MAAM;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}