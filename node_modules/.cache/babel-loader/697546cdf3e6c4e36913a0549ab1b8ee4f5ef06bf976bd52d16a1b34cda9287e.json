{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst {\n  JAVASCRIPT_MODULE_TYPE_AUTO,\n  JAVASCRIPT_MODULE_TYPE_DYNAMIC,\n  JAVASCRIPT_MODULE_TYPE_ESM\n} = require(\"./ModuleTypeConstants\");\nconst InnerGraph = require(\"./optimize/InnerGraph\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Module\").BuildInfo} BuildInfo */\n/** @typedef {import(\"./javascript/JavascriptParser\")} JavascriptParser */\n\nconst PLUGIN_NAME = \"JavascriptMetaInfoPlugin\";\nclass JavascriptMetaInfoPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation, {\n      normalModuleFactory\n    }) => {\n      /**\n       * @param {JavascriptParser} parser the parser\n       * @returns {void}\n       */\n      const handler = parser => {\n        parser.hooks.call.for(\"eval\").tap(PLUGIN_NAME, () => {\n          const buildInfo = /** @type {BuildInfo} */\n          parser.state.module.buildInfo;\n          buildInfo.moduleConcatenationBailout = \"eval()\";\n          buildInfo.usingEval = true;\n          const currentSymbol = InnerGraph.getTopLevelSymbol(parser.state);\n          if (currentSymbol) {\n            InnerGraph.addUsage(parser.state, null, currentSymbol);\n          } else {\n            InnerGraph.bailout(parser.state);\n          }\n        });\n        parser.hooks.finish.tap(PLUGIN_NAME, () => {\n          const buildInfo = /** @type {BuildInfo} */\n          parser.state.module.buildInfo;\n          let topLevelDeclarations = buildInfo.topLevelDeclarations;\n          if (topLevelDeclarations === undefined) {\n            topLevelDeclarations = buildInfo.topLevelDeclarations = new Set();\n          }\n          for (const name of parser.scope.definitions.asSet()) {\n            const freeInfo = parser.getFreeInfoFromVariable(name);\n            if (freeInfo === undefined) {\n              topLevelDeclarations.add(name);\n            }\n          }\n        });\n      };\n      normalModuleFactory.hooks.parser.for(JAVASCRIPT_MODULE_TYPE_AUTO).tap(PLUGIN_NAME, handler);\n      normalModuleFactory.hooks.parser.for(JAVASCRIPT_MODULE_TYPE_DYNAMIC).tap(PLUGIN_NAME, handler);\n      normalModuleFactory.hooks.parser.for(JAVASCRIPT_MODULE_TYPE_ESM).tap(PLUGIN_NAME, handler);\n    });\n  }\n}\nmodule.exports = JavascriptMetaInfoPlugin;","map":{"version":3,"names":["JAVASCRIPT_MODULE_TYPE_AUTO","JAVASCRIPT_MODULE_TYPE_DYNAMIC","JAVASCRIPT_MODULE_TYPE_ESM","require","InnerGraph","PLUGIN_NAME","JavascriptMetaInfoPlugin","apply","compiler","hooks","compilation","tap","normalModuleFactory","handler","parser","call","for","buildInfo","state","module","moduleConcatenationBailout","usingEval","currentSymbol","getTopLevelSymbol","addUsage","bailout","finish","topLevelDeclarations","undefined","Set","name","scope","definitions","asSet","freeInfo","getFreeInfoFromVariable","add","exports"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/JavascriptMetaInfoPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst {\n\tJAVASCRIPT_MODULE_TYPE_AUTO,\n\tJAVASCRIPT_MODULE_TYPE_DYNAMIC,\n\tJAVASCRIPT_MODULE_TYPE_ESM\n} = require(\"./ModuleTypeConstants\");\nconst InnerGraph = require(\"./optimize/InnerGraph\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Module\").BuildInfo} BuildInfo */\n/** @typedef {import(\"./javascript/JavascriptParser\")} JavascriptParser */\n\nconst PLUGIN_NAME = \"JavascriptMetaInfoPlugin\";\n\nclass JavascriptMetaInfoPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\tPLUGIN_NAME,\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\t/**\n\t\t\t\t * @param {JavascriptParser} parser the parser\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\tconst handler = parser => {\n\t\t\t\t\tparser.hooks.call.for(\"eval\").tap(PLUGIN_NAME, () => {\n\t\t\t\t\t\tconst buildInfo =\n\t\t\t\t\t\t\t/** @type {BuildInfo} */\n\t\t\t\t\t\t\t(parser.state.module.buildInfo);\n\t\t\t\t\t\tbuildInfo.moduleConcatenationBailout = \"eval()\";\n\t\t\t\t\t\tbuildInfo.usingEval = true;\n\t\t\t\t\t\tconst currentSymbol = InnerGraph.getTopLevelSymbol(parser.state);\n\t\t\t\t\t\tif (currentSymbol) {\n\t\t\t\t\t\t\tInnerGraph.addUsage(parser.state, null, currentSymbol);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tInnerGraph.bailout(parser.state);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.finish.tap(PLUGIN_NAME, () => {\n\t\t\t\t\t\tconst buildInfo =\n\t\t\t\t\t\t\t/** @type {BuildInfo} */\n\t\t\t\t\t\t\t(parser.state.module.buildInfo);\n\t\t\t\t\t\tlet topLevelDeclarations = buildInfo.topLevelDeclarations;\n\t\t\t\t\t\tif (topLevelDeclarations === undefined) {\n\t\t\t\t\t\t\ttopLevelDeclarations = buildInfo.topLevelDeclarations = new Set();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const name of parser.scope.definitions.asSet()) {\n\t\t\t\t\t\t\tconst freeInfo = parser.getFreeInfoFromVariable(name);\n\t\t\t\t\t\t\tif (freeInfo === undefined) {\n\t\t\t\t\t\t\t\ttopLevelDeclarations.add(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(JAVASCRIPT_MODULE_TYPE_AUTO)\n\t\t\t\t\t.tap(PLUGIN_NAME, handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(JAVASCRIPT_MODULE_TYPE_DYNAMIC)\n\t\t\t\t\t.tap(PLUGIN_NAME, handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(JAVASCRIPT_MODULE_TYPE_ESM)\n\t\t\t\t\t.tap(PLUGIN_NAME, handler);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = JavascriptMetaInfoPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EACLA,2BAA2B;EAC3BC,8BAA8B;EAC9BC;AACD,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,uBAAuB,CAAC;;AAEnD;AACA;AACA;;AAEA,MAAME,WAAW,GAAG,0BAA0B;AAE9C,MAAMC,wBAAwB,CAAC;EAC9B;AACD;AACA;AACA;AACA;EACCC,KAAKA,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7BN,WAAW,EACX,CAACK,WAAW,EAAE;MAAEE;IAAoB,CAAC,KAAK;MACzC;AACJ;AACA;AACA;MACI,MAAMC,OAAO,GAAGC,MAAM,IAAI;QACzBA,MAAM,CAACL,KAAK,CAACM,IAAI,CAACC,GAAG,CAAC,MAAM,CAAC,CAACL,GAAG,CAACN,WAAW,EAAE,MAAM;UACpD,MAAMY,SAAS,GACd;UACCH,MAAM,CAACI,KAAK,CAACC,MAAM,CAACF,SAAU;UAChCA,SAAS,CAACG,0BAA0B,GAAG,QAAQ;UAC/CH,SAAS,CAACI,SAAS,GAAG,IAAI;UAC1B,MAAMC,aAAa,GAAGlB,UAAU,CAACmB,iBAAiB,CAACT,MAAM,CAACI,KAAK,CAAC;UAChE,IAAII,aAAa,EAAE;YAClBlB,UAAU,CAACoB,QAAQ,CAACV,MAAM,CAACI,KAAK,EAAE,IAAI,EAAEI,aAAa,CAAC;UACvD,CAAC,MAAM;YACNlB,UAAU,CAACqB,OAAO,CAACX,MAAM,CAACI,KAAK,CAAC;UACjC;QACD,CAAC,CAAC;QACFJ,MAAM,CAACL,KAAK,CAACiB,MAAM,CAACf,GAAG,CAACN,WAAW,EAAE,MAAM;UAC1C,MAAMY,SAAS,GACd;UACCH,MAAM,CAACI,KAAK,CAACC,MAAM,CAACF,SAAU;UAChC,IAAIU,oBAAoB,GAAGV,SAAS,CAACU,oBAAoB;UACzD,IAAIA,oBAAoB,KAAKC,SAAS,EAAE;YACvCD,oBAAoB,GAAGV,SAAS,CAACU,oBAAoB,GAAG,IAAIE,GAAG,CAAC,CAAC;UAClE;UACA,KAAK,MAAMC,IAAI,IAAIhB,MAAM,CAACiB,KAAK,CAACC,WAAW,CAACC,KAAK,CAAC,CAAC,EAAE;YACpD,MAAMC,QAAQ,GAAGpB,MAAM,CAACqB,uBAAuB,CAACL,IAAI,CAAC;YACrD,IAAII,QAAQ,KAAKN,SAAS,EAAE;cAC3BD,oBAAoB,CAACS,GAAG,CAACN,IAAI,CAAC;YAC/B;UACD;QACD,CAAC,CAAC;MACH,CAAC;MAEDlB,mBAAmB,CAACH,KAAK,CAACK,MAAM,CAC9BE,GAAG,CAAChB,2BAA2B,CAAC,CAChCW,GAAG,CAACN,WAAW,EAAEQ,OAAO,CAAC;MAC3BD,mBAAmB,CAACH,KAAK,CAACK,MAAM,CAC9BE,GAAG,CAACf,8BAA8B,CAAC,CACnCU,GAAG,CAACN,WAAW,EAAEQ,OAAO,CAAC;MAC3BD,mBAAmB,CAACH,KAAK,CAACK,MAAM,CAC9BE,GAAG,CAACd,0BAA0B,CAAC,CAC/BS,GAAG,CAACN,WAAW,EAAEQ,OAAO,CAAC;IAC5B,CACD,CAAC;EACF;AACD;AAEAM,MAAM,CAACkB,OAAO,GAAG/B,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}