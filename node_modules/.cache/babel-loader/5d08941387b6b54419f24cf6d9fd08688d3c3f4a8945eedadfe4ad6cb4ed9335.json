{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nfunction useIntersectionObserver(options, attributeName, containersRef) {\n  _s();\n  const [activeIndex, setActiveIndex] = useState(null);\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const observerCallback = entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          const index = parseInt(entry.target.getAttribute(attributeName), 10);\n          setActiveIndex(index);\n        }\n      });\n    };\n    const observer = new IntersectionObserver(observerCallback, options);\n    const sections = containerRef.current.querySelectorAll(`[${attributeName}]`);\n    sections.forEach(section => {\n      observer.observe(section);\n    });\n    return () => {\n      sections.forEach(section => {\n        observer.unobserve(section);\n      });\n    };\n  }, [options, attributeName]);\n  return [containerRef, activeIndex, setActiveIndex];\n}\n_s(useIntersectionObserver, \"77K/bZMSRTUBph0RG5Ex2p07GBQ=\");\nexport default useIntersectionObserver;","map":{"version":3,"names":["useState","useEffect","useRef","useIntersectionObserver","options","attributeName","containersRef","_s","activeIndex","setActiveIndex","containerRef","observerCallback","entries","forEach","entry","isIntersecting","index","parseInt","target","getAttribute","observer","IntersectionObserver","sections","current","querySelectorAll","section","observe","unobserve"],"sources":["/Volumes/storage/projects/project-mcnt/src/components/ServicesMenu/useIntersectionObserver.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nfunction useIntersectionObserver(options, attributeName, containersRef) {\n    const [activeIndex, setActiveIndex] = useState(null);\n    const containerRef = useRef(null);\n\n    useEffect(() => {\n        const observerCallback = (entries) => {\n            entries.forEach((entry) => {\n                if (entry.isIntersecting) {\n                    const index = parseInt(entry.target.getAttribute(attributeName), 10);\n                    setActiveIndex(index);\n                }\n            });\n        };\n\n        const observer = new IntersectionObserver(observerCallback, options);\n\n        const sections = containerRef.current.querySelectorAll(`[${attributeName}]`);\n        sections.forEach((section) => {\n            observer.observe(section);\n        });\n\n        return () => {\n            sections.forEach((section) => {\n                observer.unobserve(section);\n            });\n        };\n    }, [options, attributeName]);\n\n    return [containerRef, activeIndex, setActiveIndex];\n}\n\nexport default useIntersectionObserver;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEnD,SAASC,uBAAuBA,CAACC,OAAO,EAAEC,aAAa,EAAEC,aAAa,EAAE;EAAAC,EAAA;EACpE,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMU,YAAY,GAAGR,MAAM,CAAC,IAAI,CAAC;EAEjCD,SAAS,CAAC,MAAM;IACZ,MAAMU,gBAAgB,GAAIC,OAAO,IAAK;MAClCA,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;QACvB,IAAIA,KAAK,CAACC,cAAc,EAAE;UACtB,MAAMC,KAAK,GAAGC,QAAQ,CAACH,KAAK,CAACI,MAAM,CAACC,YAAY,CAACd,aAAa,CAAC,EAAE,EAAE,CAAC;UACpEI,cAAc,CAACO,KAAK,CAAC;QACzB;MACJ,CAAC,CAAC;IACN,CAAC;IAED,MAAMI,QAAQ,GAAG,IAAIC,oBAAoB,CAACV,gBAAgB,EAAEP,OAAO,CAAC;IAEpE,MAAMkB,QAAQ,GAAGZ,YAAY,CAACa,OAAO,CAACC,gBAAgB,CAAC,IAAInB,aAAa,GAAG,CAAC;IAC5EiB,QAAQ,CAACT,OAAO,CAAEY,OAAO,IAAK;MAC1BL,QAAQ,CAACM,OAAO,CAACD,OAAO,CAAC;IAC7B,CAAC,CAAC;IAEF,OAAO,MAAM;MACTH,QAAQ,CAACT,OAAO,CAAEY,OAAO,IAAK;QAC1BL,QAAQ,CAACO,SAAS,CAACF,OAAO,CAAC;MAC/B,CAAC,CAAC;IACN,CAAC;EACL,CAAC,EAAE,CAACrB,OAAO,EAAEC,aAAa,CAAC,CAAC;EAE5B,OAAO,CAACK,YAAY,EAAEF,WAAW,EAAEC,cAAc,CAAC;AACtD;AAACF,EAAA,CA7BQJ,uBAAuB;AA+BhC,eAAeA,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}