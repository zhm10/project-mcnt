{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Compiler = require(\"./Compiler\");\nconst MultiCompiler = require(\"./MultiCompiler\");\nconst NormalModule = require(\"./NormalModule\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\nconst {\n  contextify\n} = require(\"./util/identifier\");\n\n/** @typedef {import(\"tapable\").Tap} Tap */\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").HandlerFunction} HandlerFunction */\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginArgument} ProgressPluginArgument */\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginOptions} ProgressPluginOptions */\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./Entrypoint\").EntryOptions} EntryOptions */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./logging/Logger\").Logger} Logger */\n\n/**\n * @typedef {Object} CountsData\n * @property {number} modulesCount modules count\n * @property {number} dependenciesCount dependencies count\n */\n\nconst validate = createSchemaValidation(require(\"../schemas/plugins/ProgressPlugin.check.js\"), () => require(\"../schemas/plugins/ProgressPlugin.json\"), {\n  name: \"Progress Plugin\",\n  baseDataPath: \"options\"\n});\n\n/**\n * @param {number} a a\n * @param {number} b b\n * @param {number} c c\n * @returns {number} median\n */\nconst median3 = (a, b, c) => {\n  return a + b + c - Math.max(a, b, c) - Math.min(a, b, c);\n};\n\n/**\n * @param {boolean | null | undefined} profile need profile\n * @param {Logger} logger logger\n * @returns {defaultHandler} default handler\n */\nconst createDefaultHandler = (profile, logger) => {\n  /** @type {{ value: string | undefined, time: number }[]} */\n  const lastStateInfo = [];\n\n  /**\n   * @param {number} percentage percentage\n   * @param {string} msg message\n   * @param {...string} args additional arguments\n   */\n  const defaultHandler = (percentage, msg, ...args) => {\n    if (profile) {\n      if (percentage === 0) {\n        lastStateInfo.length = 0;\n      }\n      const fullState = [msg, ...args];\n      const state = fullState.map(s => s.replace(/\\d+\\/\\d+ /g, \"\"));\n      const now = Date.now();\n      const len = Math.max(state.length, lastStateInfo.length);\n      for (let i = len; i >= 0; i--) {\n        const stateItem = i < state.length ? state[i] : undefined;\n        const lastStateItem = i < lastStateInfo.length ? lastStateInfo[i] : undefined;\n        if (lastStateItem) {\n          if (stateItem !== lastStateItem.value) {\n            const diff = now - lastStateItem.time;\n            if (lastStateItem.value) {\n              let reportState = lastStateItem.value;\n              if (i > 0) {\n                reportState = lastStateInfo[i - 1].value + \" > \" + reportState;\n              }\n              const stateMsg = `${\" | \".repeat(i)}${diff} ms ${reportState}`;\n              const d = diff;\n              // This depends on timing so we ignore it for coverage\n              /* istanbul ignore next */\n              {\n                if (d > 10000) {\n                  logger.error(stateMsg);\n                } else if (d > 1000) {\n                  logger.warn(stateMsg);\n                } else if (d > 10) {\n                  logger.info(stateMsg);\n                } else if (d > 5) {\n                  logger.log(stateMsg);\n                } else {\n                  logger.debug(stateMsg);\n                }\n              }\n            }\n            if (stateItem === undefined) {\n              lastStateInfo.length = i;\n            } else {\n              lastStateItem.value = stateItem;\n              lastStateItem.time = now;\n              lastStateInfo.length = i + 1;\n            }\n          }\n        } else {\n          lastStateInfo[i] = {\n            value: stateItem,\n            time: now\n          };\n        }\n      }\n    }\n    logger.status(`${Math.floor(percentage * 100)}%`, msg, ...args);\n    if (percentage === 1 || !msg && args.length === 0) logger.status();\n  };\n  return defaultHandler;\n};\n\n/**\n * @callback ReportProgress\n * @param {number} p percentage\n * @param {...string} args additional arguments\n * @returns {void}\n */\n\n/** @type {WeakMap<Compiler, ReportProgress | undefined>} */\nconst progressReporters = new WeakMap();\nclass ProgressPlugin {\n  /**\n   * @param {Compiler} compiler the current compiler\n   * @returns {ReportProgress | undefined} a progress reporter, if any\n   */\n  static getReporter(compiler) {\n    return progressReporters.get(compiler);\n  }\n\n  /**\n   * @param {ProgressPluginArgument} options options\n   */\n  constructor(options = {}) {\n    if (typeof options === \"function\") {\n      options = {\n        handler: options\n      };\n    }\n    validate(options);\n    options = {\n      ...ProgressPlugin.defaultOptions,\n      ...options\n    };\n    this.profile = options.profile;\n    this.handler = options.handler;\n    this.modulesCount = options.modulesCount;\n    this.dependenciesCount = options.dependenciesCount;\n    this.showEntries = options.entries;\n    this.showModules = options.modules;\n    this.showDependencies = options.dependencies;\n    this.showActiveModules = options.activeModules;\n    this.percentBy = options.percentBy;\n  }\n\n  /**\n   * @param {Compiler | MultiCompiler} compiler webpack compiler\n   * @returns {void}\n   */\n  apply(compiler) {\n    const handler = this.handler || createDefaultHandler(this.profile, compiler.getInfrastructureLogger(\"webpack.Progress\"));\n    if (compiler instanceof MultiCompiler) {\n      this._applyOnMultiCompiler(compiler, handler);\n    } else if (compiler instanceof Compiler) {\n      this._applyOnCompiler(compiler, handler);\n    }\n  }\n\n  /**\n   * @param {MultiCompiler} compiler webpack multi-compiler\n   * @param {HandlerFunction} handler function that executes for every progress step\n   * @returns {void}\n   */\n  _applyOnMultiCompiler(compiler, handler) {\n    const states = compiler.compilers.map(() => ( /** @type {[number, ...string[]]} */[0]));\n    compiler.compilers.forEach((compiler, idx) => {\n      new ProgressPlugin((p, msg, ...args) => {\n        states[idx] = [p, msg, ...args];\n        let sum = 0;\n        for (const [p] of states) sum += p;\n        handler(sum / states.length, `[${idx}] ${msg}`, ...args);\n      }).apply(compiler);\n    });\n  }\n\n  /**\n   * @param {Compiler} compiler webpack compiler\n   * @param {HandlerFunction} handler function that executes for every progress step\n   * @returns {void}\n   */\n  _applyOnCompiler(compiler, handler) {\n    const showEntries = this.showEntries;\n    const showModules = this.showModules;\n    const showDependencies = this.showDependencies;\n    const showActiveModules = this.showActiveModules;\n    let lastActiveModule = \"\";\n    let currentLoader = \"\";\n    let lastModulesCount = 0;\n    let lastDependenciesCount = 0;\n    let lastEntriesCount = 0;\n    let modulesCount = 0;\n    let dependenciesCount = 0;\n    let entriesCount = 1;\n    let doneModules = 0;\n    let doneDependencies = 0;\n    let doneEntries = 0;\n    const activeModules = new Set();\n    let lastUpdate = 0;\n    const updateThrottled = () => {\n      if (lastUpdate + 500 < Date.now()) update();\n    };\n    const update = () => {\n      /** @type {string[]} */\n      const items = [];\n      const percentByModules = doneModules / Math.max(lastModulesCount || this.modulesCount || 1, modulesCount);\n      const percentByEntries = doneEntries / Math.max(lastEntriesCount || this.dependenciesCount || 1, entriesCount);\n      const percentByDependencies = doneDependencies / Math.max(lastDependenciesCount || 1, dependenciesCount);\n      let percentageFactor;\n      switch (this.percentBy) {\n        case \"entries\":\n          percentageFactor = percentByEntries;\n          break;\n        case \"dependencies\":\n          percentageFactor = percentByDependencies;\n          break;\n        case \"modules\":\n          percentageFactor = percentByModules;\n          break;\n        default:\n          percentageFactor = median3(percentByModules, percentByEntries, percentByDependencies);\n      }\n      const percentage = 0.1 + percentageFactor * 0.55;\n      if (currentLoader) {\n        items.push(`import loader ${contextify(compiler.context, currentLoader, compiler.root)}`);\n      } else {\n        const statItems = [];\n        if (showEntries) {\n          statItems.push(`${doneEntries}/${entriesCount} entries`);\n        }\n        if (showDependencies) {\n          statItems.push(`${doneDependencies}/${dependenciesCount} dependencies`);\n        }\n        if (showModules) {\n          statItems.push(`${doneModules}/${modulesCount} modules`);\n        }\n        if (showActiveModules) {\n          statItems.push(`${activeModules.size} active`);\n        }\n        if (statItems.length > 0) {\n          items.push(statItems.join(\" \"));\n        }\n        if (showActiveModules) {\n          items.push(lastActiveModule);\n        }\n      }\n      handler(percentage, \"building\", ...items);\n      lastUpdate = Date.now();\n    };\n    const factorizeAdd = () => {\n      dependenciesCount++;\n      if (dependenciesCount < 50 || dependenciesCount % 100 === 0) updateThrottled();\n    };\n    const factorizeDone = () => {\n      doneDependencies++;\n      if (doneDependencies < 50 || doneDependencies % 100 === 0) updateThrottled();\n    };\n    const moduleAdd = () => {\n      modulesCount++;\n      if (modulesCount < 50 || modulesCount % 100 === 0) updateThrottled();\n    };\n\n    // only used when showActiveModules is set\n    /**\n     * @param {Module} module the module\n     */\n    const moduleBuild = module => {\n      const ident = module.identifier();\n      if (ident) {\n        activeModules.add(ident);\n        lastActiveModule = ident;\n        update();\n      }\n    };\n\n    /**\n     * @param {Dependency} entry entry dependency\n     * @param {EntryOptions} options options object\n     */\n    const entryAdd = (entry, options) => {\n      entriesCount++;\n      if (entriesCount < 5 || entriesCount % 10 === 0) updateThrottled();\n    };\n\n    /**\n     * @param {Module} module the module\n     */\n    const moduleDone = module => {\n      doneModules++;\n      if (showActiveModules) {\n        const ident = module.identifier();\n        if (ident) {\n          activeModules.delete(ident);\n          if (lastActiveModule === ident) {\n            lastActiveModule = \"\";\n            for (const m of activeModules) {\n              lastActiveModule = m;\n            }\n            update();\n            return;\n          }\n        }\n      }\n      if (doneModules < 50 || doneModules % 100 === 0) updateThrottled();\n    };\n\n    /**\n     * @param {Dependency} entry entry dependency\n     * @param {EntryOptions} options options object\n     */\n    const entryDone = (entry, options) => {\n      doneEntries++;\n      update();\n    };\n    const cache = compiler.getCache(\"ProgressPlugin\").getItemCache(\"counts\", null);\n\n    /** @type {Promise<CountsData> | undefined} */\n    let cacheGetPromise;\n    compiler.hooks.beforeCompile.tap(\"ProgressPlugin\", () => {\n      if (!cacheGetPromise) {\n        cacheGetPromise = cache.getPromise().then(data => {\n          if (data) {\n            lastModulesCount = lastModulesCount || data.modulesCount;\n            lastDependenciesCount = lastDependenciesCount || data.dependenciesCount;\n          }\n          return data;\n        }, err => {\n          // Ignore error\n        });\n      }\n    });\n    compiler.hooks.afterCompile.tapPromise(\"ProgressPlugin\", compilation => {\n      if (compilation.compiler.isChild()) return Promise.resolve();\n      return /** @type {Promise<CountsData>} */cacheGetPromise.then(async oldData => {\n        if (!oldData || oldData.modulesCount !== modulesCount || oldData.dependenciesCount !== dependenciesCount) {\n          await cache.storePromise({\n            modulesCount,\n            dependenciesCount\n          });\n        }\n      });\n    });\n    compiler.hooks.compilation.tap(\"ProgressPlugin\", compilation => {\n      if (compilation.compiler.isChild()) return;\n      lastModulesCount = modulesCount;\n      lastEntriesCount = entriesCount;\n      lastDependenciesCount = dependenciesCount;\n      modulesCount = dependenciesCount = entriesCount = 0;\n      doneModules = doneDependencies = doneEntries = 0;\n      compilation.factorizeQueue.hooks.added.tap(\"ProgressPlugin\", factorizeAdd);\n      compilation.factorizeQueue.hooks.result.tap(\"ProgressPlugin\", factorizeDone);\n      compilation.addModuleQueue.hooks.added.tap(\"ProgressPlugin\", moduleAdd);\n      compilation.processDependenciesQueue.hooks.result.tap(\"ProgressPlugin\", moduleDone);\n      if (showActiveModules) {\n        compilation.hooks.buildModule.tap(\"ProgressPlugin\", moduleBuild);\n      }\n      compilation.hooks.addEntry.tap(\"ProgressPlugin\", entryAdd);\n      compilation.hooks.failedEntry.tap(\"ProgressPlugin\", entryDone);\n      compilation.hooks.succeedEntry.tap(\"ProgressPlugin\", entryDone);\n\n      // avoid dynamic require if bundled with webpack\n      // @ts-expect-error\n      if (typeof __webpack_require__ !== \"function\") {\n        const requiredLoaders = new Set();\n        NormalModule.getCompilationHooks(compilation).beforeLoaders.tap(\"ProgressPlugin\", loaders => {\n          for (const loader of loaders) {\n            if (loader.type !== \"module\" && !requiredLoaders.has(loader.loader)) {\n              requiredLoaders.add(loader.loader);\n              currentLoader = loader.loader;\n              update();\n              require(loader.loader);\n            }\n          }\n          if (currentLoader) {\n            currentLoader = \"\";\n            update();\n          }\n        });\n      }\n      const hooks = {\n        finishModules: \"finish module graph\",\n        seal: \"plugins\",\n        optimizeDependencies: \"dependencies optimization\",\n        afterOptimizeDependencies: \"after dependencies optimization\",\n        beforeChunks: \"chunk graph\",\n        afterChunks: \"after chunk graph\",\n        optimize: \"optimizing\",\n        optimizeModules: \"module optimization\",\n        afterOptimizeModules: \"after module optimization\",\n        optimizeChunks: \"chunk optimization\",\n        afterOptimizeChunks: \"after chunk optimization\",\n        optimizeTree: \"module and chunk tree optimization\",\n        afterOptimizeTree: \"after module and chunk tree optimization\",\n        optimizeChunkModules: \"chunk modules optimization\",\n        afterOptimizeChunkModules: \"after chunk modules optimization\",\n        reviveModules: \"module reviving\",\n        beforeModuleIds: \"before module ids\",\n        moduleIds: \"module ids\",\n        optimizeModuleIds: \"module id optimization\",\n        afterOptimizeModuleIds: \"module id optimization\",\n        reviveChunks: \"chunk reviving\",\n        beforeChunkIds: \"before chunk ids\",\n        chunkIds: \"chunk ids\",\n        optimizeChunkIds: \"chunk id optimization\",\n        afterOptimizeChunkIds: \"after chunk id optimization\",\n        recordModules: \"record modules\",\n        recordChunks: \"record chunks\",\n        beforeModuleHash: \"module hashing\",\n        beforeCodeGeneration: \"code generation\",\n        beforeRuntimeRequirements: \"runtime requirements\",\n        beforeHash: \"hashing\",\n        afterHash: \"after hashing\",\n        recordHash: \"record hash\",\n        beforeModuleAssets: \"module assets processing\",\n        beforeChunkAssets: \"chunk assets processing\",\n        processAssets: \"asset processing\",\n        afterProcessAssets: \"after asset optimization\",\n        record: \"recording\",\n        afterSeal: \"after seal\"\n      };\n      const numberOfHooks = Object.keys(hooks).length;\n      Object.keys(hooks).forEach((name, idx) => {\n        const title = hooks[( /** @type {keyof typeof hooks} */name)];\n        const percentage = idx / numberOfHooks * 0.25 + 0.7;\n        compilation.hooks[( /** @type {keyof typeof hooks} */name)].intercept({\n          name: \"ProgressPlugin\",\n          call() {\n            handler(percentage, \"sealing\", title);\n          },\n          done() {\n            progressReporters.set(compiler, undefined);\n            handler(percentage, \"sealing\", title);\n          },\n          result() {\n            handler(percentage, \"sealing\", title);\n          },\n          error() {\n            handler(percentage, \"sealing\", title);\n          },\n          tap(tap) {\n            // p is percentage from 0 to 1\n            // args is any number of messages in a hierarchical matter\n            progressReporters.set(compilation.compiler, (p, ...args) => {\n              handler(percentage, \"sealing\", title, tap.name, ...args);\n            });\n            handler(percentage, \"sealing\", title, tap.name);\n          }\n        });\n      });\n    });\n    compiler.hooks.make.intercept({\n      name: \"ProgressPlugin\",\n      call() {\n        handler(0.1, \"building\");\n      },\n      done() {\n        handler(0.65, \"building\");\n      }\n    });\n    /**\n     * @param {TODO} hook hook\n     * @param {number} progress progress from 0 to 1\n     * @param {string} category category\n     * @param {string} name name\n     */\n    const interceptHook = (hook, progress, category, name) => {\n      hook.intercept({\n        name: \"ProgressPlugin\",\n        call() {\n          handler(progress, category, name);\n        },\n        done() {\n          progressReporters.set(compiler, undefined);\n          handler(progress, category, name);\n        },\n        result() {\n          handler(progress, category, name);\n        },\n        error() {\n          handler(progress, category, name);\n        },\n        /**\n         * @param {Tap} tap tap\n         */\n        tap(tap) {\n          progressReporters.set(compiler, (p, ...args) => {\n            handler(progress, category, name, tap.name, ...args);\n          });\n          handler(progress, category, name, tap.name);\n        }\n      });\n    };\n    compiler.cache.hooks.endIdle.intercept({\n      name: \"ProgressPlugin\",\n      call() {\n        handler(0, \"\");\n      }\n    });\n    interceptHook(compiler.cache.hooks.endIdle, 0.01, \"cache\", \"end idle\");\n    compiler.hooks.beforeRun.intercept({\n      name: \"ProgressPlugin\",\n      call() {\n        handler(0, \"\");\n      }\n    });\n    interceptHook(compiler.hooks.beforeRun, 0.01, \"setup\", \"before run\");\n    interceptHook(compiler.hooks.run, 0.02, \"setup\", \"run\");\n    interceptHook(compiler.hooks.watchRun, 0.03, \"setup\", \"watch run\");\n    interceptHook(compiler.hooks.normalModuleFactory, 0.04, \"setup\", \"normal module factory\");\n    interceptHook(compiler.hooks.contextModuleFactory, 0.05, \"setup\", \"context module factory\");\n    interceptHook(compiler.hooks.beforeCompile, 0.06, \"setup\", \"before compile\");\n    interceptHook(compiler.hooks.compile, 0.07, \"setup\", \"compile\");\n    interceptHook(compiler.hooks.thisCompilation, 0.08, \"setup\", \"compilation\");\n    interceptHook(compiler.hooks.compilation, 0.09, \"setup\", \"compilation\");\n    interceptHook(compiler.hooks.finishMake, 0.69, \"building\", \"finish\");\n    interceptHook(compiler.hooks.emit, 0.95, \"emitting\", \"emit\");\n    interceptHook(compiler.hooks.afterEmit, 0.98, \"emitting\", \"after emit\");\n    interceptHook(compiler.hooks.done, 0.99, \"done\", \"plugins\");\n    compiler.hooks.done.intercept({\n      name: \"ProgressPlugin\",\n      done() {\n        handler(0.99, \"\");\n      }\n    });\n    interceptHook(compiler.cache.hooks.storeBuildDependencies, 0.99, \"cache\", \"store build dependencies\");\n    interceptHook(compiler.cache.hooks.shutdown, 0.99, \"cache\", \"shutdown\");\n    interceptHook(compiler.cache.hooks.beginIdle, 0.99, \"cache\", \"begin idle\");\n    interceptHook(compiler.hooks.watchClose, 0.99, \"end\", \"closing watch compilation\");\n    compiler.cache.hooks.beginIdle.intercept({\n      name: \"ProgressPlugin\",\n      done() {\n        handler(1, \"\");\n      }\n    });\n    compiler.cache.hooks.shutdown.intercept({\n      name: \"ProgressPlugin\",\n      done() {\n        handler(1, \"\");\n      }\n    });\n  }\n}\nProgressPlugin.defaultOptions = {\n  profile: false,\n  modulesCount: 5000,\n  dependenciesCount: 10000,\n  modules: true,\n  dependencies: true,\n  activeModules: false,\n  entries: true\n};\nProgressPlugin.createDefaultHandler = createDefaultHandler;\nmodule.exports = ProgressPlugin;","map":{"version":3,"names":["Compiler","require","MultiCompiler","NormalModule","createSchemaValidation","contextify","validate","name","baseDataPath","median3","a","b","c","Math","max","min","createDefaultHandler","profile","logger","lastStateInfo","defaultHandler","percentage","msg","args","length","fullState","state","map","s","replace","now","Date","len","i","stateItem","undefined","lastStateItem","value","diff","time","reportState","stateMsg","repeat","d","error","warn","info","log","debug","status","floor","progressReporters","WeakMap","ProgressPlugin","getReporter","compiler","get","constructor","options","handler","defaultOptions","modulesCount","dependenciesCount","showEntries","entries","showModules","modules","showDependencies","dependencies","showActiveModules","activeModules","percentBy","apply","getInfrastructureLogger","_applyOnMultiCompiler","_applyOnCompiler","states","compilers","forEach","idx","p","sum","lastActiveModule","currentLoader","lastModulesCount","lastDependenciesCount","lastEntriesCount","entriesCount","doneModules","doneDependencies","doneEntries","Set","lastUpdate","updateThrottled","update","items","percentByModules","percentByEntries","percentByDependencies","percentageFactor","push","context","root","statItems","size","join","factorizeAdd","factorizeDone","moduleAdd","moduleBuild","module","ident","identifier","add","entryAdd","entry","moduleDone","delete","m","entryDone","cache","getCache","getItemCache","cacheGetPromise","hooks","beforeCompile","tap","getPromise","then","data","err","afterCompile","tapPromise","compilation","isChild","Promise","resolve","oldData","storePromise","factorizeQueue","added","result","addModuleQueue","processDependenciesQueue","buildModule","addEntry","failedEntry","succeedEntry","__webpack_require__","requiredLoaders","getCompilationHooks","beforeLoaders","loaders","loader","type","has","finishModules","seal","optimizeDependencies","afterOptimizeDependencies","beforeChunks","afterChunks","optimize","optimizeModules","afterOptimizeModules","optimizeChunks","afterOptimizeChunks","optimizeTree","afterOptimizeTree","optimizeChunkModules","afterOptimizeChunkModules","reviveModules","beforeModuleIds","moduleIds","optimizeModuleIds","afterOptimizeModuleIds","reviveChunks","beforeChunkIds","chunkIds","optimizeChunkIds","afterOptimizeChunkIds","recordModules","recordChunks","beforeModuleHash","beforeCodeGeneration","beforeRuntimeRequirements","beforeHash","afterHash","recordHash","beforeModuleAssets","beforeChunkAssets","processAssets","afterProcessAssets","record","afterSeal","numberOfHooks","Object","keys","title","intercept","call","done","set","make","interceptHook","hook","progress","category","endIdle","beforeRun","run","watchRun","normalModuleFactory","contextModuleFactory","compile","thisCompilation","finishMake","emit","afterEmit","storeBuildDependencies","shutdown","beginIdle","watchClose","exports"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/ProgressPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Compiler = require(\"./Compiler\");\nconst MultiCompiler = require(\"./MultiCompiler\");\nconst NormalModule = require(\"./NormalModule\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\nconst { contextify } = require(\"./util/identifier\");\n\n/** @typedef {import(\"tapable\").Tap} Tap */\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").HandlerFunction} HandlerFunction */\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginArgument} ProgressPluginArgument */\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginOptions} ProgressPluginOptions */\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./Entrypoint\").EntryOptions} EntryOptions */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./logging/Logger\").Logger} Logger */\n\n/**\n * @typedef {Object} CountsData\n * @property {number} modulesCount modules count\n * @property {number} dependenciesCount dependencies count\n */\n\nconst validate = createSchemaValidation(\n\trequire(\"../schemas/plugins/ProgressPlugin.check.js\"),\n\t() => require(\"../schemas/plugins/ProgressPlugin.json\"),\n\t{\n\t\tname: \"Progress Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\n/**\n * @param {number} a a\n * @param {number} b b\n * @param {number} c c\n * @returns {number} median\n */\nconst median3 = (a, b, c) => {\n\treturn a + b + c - Math.max(a, b, c) - Math.min(a, b, c);\n};\n\n/**\n * @param {boolean | null | undefined} profile need profile\n * @param {Logger} logger logger\n * @returns {defaultHandler} default handler\n */\nconst createDefaultHandler = (profile, logger) => {\n\t/** @type {{ value: string | undefined, time: number }[]} */\n\tconst lastStateInfo = [];\n\n\t/**\n\t * @param {number} percentage percentage\n\t * @param {string} msg message\n\t * @param {...string} args additional arguments\n\t */\n\tconst defaultHandler = (percentage, msg, ...args) => {\n\t\tif (profile) {\n\t\t\tif (percentage === 0) {\n\t\t\t\tlastStateInfo.length = 0;\n\t\t\t}\n\t\t\tconst fullState = [msg, ...args];\n\t\t\tconst state = fullState.map(s => s.replace(/\\d+\\/\\d+ /g, \"\"));\n\t\t\tconst now = Date.now();\n\t\t\tconst len = Math.max(state.length, lastStateInfo.length);\n\t\t\tfor (let i = len; i >= 0; i--) {\n\t\t\t\tconst stateItem = i < state.length ? state[i] : undefined;\n\t\t\t\tconst lastStateItem =\n\t\t\t\t\ti < lastStateInfo.length ? lastStateInfo[i] : undefined;\n\t\t\t\tif (lastStateItem) {\n\t\t\t\t\tif (stateItem !== lastStateItem.value) {\n\t\t\t\t\t\tconst diff = now - lastStateItem.time;\n\t\t\t\t\t\tif (lastStateItem.value) {\n\t\t\t\t\t\t\tlet reportState = lastStateItem.value;\n\t\t\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\t\t\treportState = lastStateInfo[i - 1].value + \" > \" + reportState;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst stateMsg = `${\" | \".repeat(i)}${diff} ms ${reportState}`;\n\t\t\t\t\t\t\tconst d = diff;\n\t\t\t\t\t\t\t// This depends on timing so we ignore it for coverage\n\t\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (d > 10000) {\n\t\t\t\t\t\t\t\t\tlogger.error(stateMsg);\n\t\t\t\t\t\t\t\t} else if (d > 1000) {\n\t\t\t\t\t\t\t\t\tlogger.warn(stateMsg);\n\t\t\t\t\t\t\t\t} else if (d > 10) {\n\t\t\t\t\t\t\t\t\tlogger.info(stateMsg);\n\t\t\t\t\t\t\t\t} else if (d > 5) {\n\t\t\t\t\t\t\t\t\tlogger.log(stateMsg);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tlogger.debug(stateMsg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (stateItem === undefined) {\n\t\t\t\t\t\t\tlastStateInfo.length = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlastStateItem.value = stateItem;\n\t\t\t\t\t\t\tlastStateItem.time = now;\n\t\t\t\t\t\t\tlastStateInfo.length = i + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlastStateInfo[i] = {\n\t\t\t\t\t\tvalue: stateItem,\n\t\t\t\t\t\ttime: now\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlogger.status(`${Math.floor(percentage * 100)}%`, msg, ...args);\n\t\tif (percentage === 1 || (!msg && args.length === 0)) logger.status();\n\t};\n\n\treturn defaultHandler;\n};\n\n/**\n * @callback ReportProgress\n * @param {number} p percentage\n * @param {...string} args additional arguments\n * @returns {void}\n */\n\n/** @type {WeakMap<Compiler, ReportProgress | undefined>} */\nconst progressReporters = new WeakMap();\n\nclass ProgressPlugin {\n\t/**\n\t * @param {Compiler} compiler the current compiler\n\t * @returns {ReportProgress | undefined} a progress reporter, if any\n\t */\n\tstatic getReporter(compiler) {\n\t\treturn progressReporters.get(compiler);\n\t}\n\n\t/**\n\t * @param {ProgressPluginArgument} options options\n\t */\n\tconstructor(options = {}) {\n\t\tif (typeof options === \"function\") {\n\t\t\toptions = {\n\t\t\t\thandler: options\n\t\t\t};\n\t\t}\n\n\t\tvalidate(options);\n\t\toptions = { ...ProgressPlugin.defaultOptions, ...options };\n\n\t\tthis.profile = options.profile;\n\t\tthis.handler = options.handler;\n\t\tthis.modulesCount = options.modulesCount;\n\t\tthis.dependenciesCount = options.dependenciesCount;\n\t\tthis.showEntries = options.entries;\n\t\tthis.showModules = options.modules;\n\t\tthis.showDependencies = options.dependencies;\n\t\tthis.showActiveModules = options.activeModules;\n\t\tthis.percentBy = options.percentBy;\n\t}\n\n\t/**\n\t * @param {Compiler | MultiCompiler} compiler webpack compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst handler =\n\t\t\tthis.handler ||\n\t\t\tcreateDefaultHandler(\n\t\t\t\tthis.profile,\n\t\t\t\tcompiler.getInfrastructureLogger(\"webpack.Progress\")\n\t\t\t);\n\t\tif (compiler instanceof MultiCompiler) {\n\t\t\tthis._applyOnMultiCompiler(compiler, handler);\n\t\t} else if (compiler instanceof Compiler) {\n\t\t\tthis._applyOnCompiler(compiler, handler);\n\t\t}\n\t}\n\n\t/**\n\t * @param {MultiCompiler} compiler webpack multi-compiler\n\t * @param {HandlerFunction} handler function that executes for every progress step\n\t * @returns {void}\n\t */\n\t_applyOnMultiCompiler(compiler, handler) {\n\t\tconst states = compiler.compilers.map(\n\t\t\t() => /** @type {[number, ...string[]]} */ ([0])\n\t\t);\n\t\tcompiler.compilers.forEach((compiler, idx) => {\n\t\t\tnew ProgressPlugin((p, msg, ...args) => {\n\t\t\t\tstates[idx] = [p, msg, ...args];\n\t\t\t\tlet sum = 0;\n\t\t\t\tfor (const [p] of states) sum += p;\n\t\t\t\thandler(sum / states.length, `[${idx}] ${msg}`, ...args);\n\t\t\t}).apply(compiler);\n\t\t});\n\t}\n\n\t/**\n\t * @param {Compiler} compiler webpack compiler\n\t * @param {HandlerFunction} handler function that executes for every progress step\n\t * @returns {void}\n\t */\n\t_applyOnCompiler(compiler, handler) {\n\t\tconst showEntries = this.showEntries;\n\t\tconst showModules = this.showModules;\n\t\tconst showDependencies = this.showDependencies;\n\t\tconst showActiveModules = this.showActiveModules;\n\t\tlet lastActiveModule = \"\";\n\t\tlet currentLoader = \"\";\n\t\tlet lastModulesCount = 0;\n\t\tlet lastDependenciesCount = 0;\n\t\tlet lastEntriesCount = 0;\n\t\tlet modulesCount = 0;\n\t\tlet dependenciesCount = 0;\n\t\tlet entriesCount = 1;\n\t\tlet doneModules = 0;\n\t\tlet doneDependencies = 0;\n\t\tlet doneEntries = 0;\n\t\tconst activeModules = new Set();\n\t\tlet lastUpdate = 0;\n\n\t\tconst updateThrottled = () => {\n\t\t\tif (lastUpdate + 500 < Date.now()) update();\n\t\t};\n\n\t\tconst update = () => {\n\t\t\t/** @type {string[]} */\n\t\t\tconst items = [];\n\t\t\tconst percentByModules =\n\t\t\t\tdoneModules /\n\t\t\t\tMath.max(lastModulesCount || this.modulesCount || 1, modulesCount);\n\t\t\tconst percentByEntries =\n\t\t\t\tdoneEntries /\n\t\t\t\tMath.max(lastEntriesCount || this.dependenciesCount || 1, entriesCount);\n\t\t\tconst percentByDependencies =\n\t\t\t\tdoneDependencies /\n\t\t\t\tMath.max(lastDependenciesCount || 1, dependenciesCount);\n\t\t\tlet percentageFactor;\n\n\t\t\tswitch (this.percentBy) {\n\t\t\t\tcase \"entries\":\n\t\t\t\t\tpercentageFactor = percentByEntries;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"dependencies\":\n\t\t\t\t\tpercentageFactor = percentByDependencies;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"modules\":\n\t\t\t\t\tpercentageFactor = percentByModules;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tpercentageFactor = median3(\n\t\t\t\t\t\tpercentByModules,\n\t\t\t\t\t\tpercentByEntries,\n\t\t\t\t\t\tpercentByDependencies\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst percentage = 0.1 + percentageFactor * 0.55;\n\n\t\t\tif (currentLoader) {\n\t\t\t\titems.push(\n\t\t\t\t\t`import loader ${contextify(\n\t\t\t\t\t\tcompiler.context,\n\t\t\t\t\t\tcurrentLoader,\n\t\t\t\t\t\tcompiler.root\n\t\t\t\t\t)}`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst statItems = [];\n\t\t\t\tif (showEntries) {\n\t\t\t\t\tstatItems.push(`${doneEntries}/${entriesCount} entries`);\n\t\t\t\t}\n\t\t\t\tif (showDependencies) {\n\t\t\t\t\tstatItems.push(\n\t\t\t\t\t\t`${doneDependencies}/${dependenciesCount} dependencies`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (showModules) {\n\t\t\t\t\tstatItems.push(`${doneModules}/${modulesCount} modules`);\n\t\t\t\t}\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\tstatItems.push(`${activeModules.size} active`);\n\t\t\t\t}\n\t\t\t\tif (statItems.length > 0) {\n\t\t\t\t\titems.push(statItems.join(\" \"));\n\t\t\t\t}\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\titems.push(lastActiveModule);\n\t\t\t\t}\n\t\t\t}\n\t\t\thandler(percentage, \"building\", ...items);\n\t\t\tlastUpdate = Date.now();\n\t\t};\n\n\t\tconst factorizeAdd = () => {\n\t\t\tdependenciesCount++;\n\t\t\tif (dependenciesCount < 50 || dependenciesCount % 100 === 0)\n\t\t\t\tupdateThrottled();\n\t\t};\n\n\t\tconst factorizeDone = () => {\n\t\t\tdoneDependencies++;\n\t\t\tif (doneDependencies < 50 || doneDependencies % 100 === 0)\n\t\t\t\tupdateThrottled();\n\t\t};\n\n\t\tconst moduleAdd = () => {\n\t\t\tmodulesCount++;\n\t\t\tif (modulesCount < 50 || modulesCount % 100 === 0) updateThrottled();\n\t\t};\n\n\t\t// only used when showActiveModules is set\n\t\t/**\n\t\t * @param {Module} module the module\n\t\t */\n\t\tconst moduleBuild = module => {\n\t\t\tconst ident = module.identifier();\n\t\t\tif (ident) {\n\t\t\t\tactiveModules.add(ident);\n\t\t\t\tlastActiveModule = ident;\n\t\t\t\tupdate();\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @param {Dependency} entry entry dependency\n\t\t * @param {EntryOptions} options options object\n\t\t */\n\t\tconst entryAdd = (entry, options) => {\n\t\t\tentriesCount++;\n\t\t\tif (entriesCount < 5 || entriesCount % 10 === 0) updateThrottled();\n\t\t};\n\n\t\t/**\n\t\t * @param {Module} module the module\n\t\t */\n\t\tconst moduleDone = module => {\n\t\t\tdoneModules++;\n\t\t\tif (showActiveModules) {\n\t\t\t\tconst ident = module.identifier();\n\t\t\t\tif (ident) {\n\t\t\t\t\tactiveModules.delete(ident);\n\t\t\t\t\tif (lastActiveModule === ident) {\n\t\t\t\t\t\tlastActiveModule = \"\";\n\t\t\t\t\t\tfor (const m of activeModules) {\n\t\t\t\t\t\t\tlastActiveModule = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (doneModules < 50 || doneModules % 100 === 0) updateThrottled();\n\t\t};\n\n\t\t/**\n\t\t * @param {Dependency} entry entry dependency\n\t\t * @param {EntryOptions} options options object\n\t\t */\n\t\tconst entryDone = (entry, options) => {\n\t\t\tdoneEntries++;\n\t\t\tupdate();\n\t\t};\n\n\t\tconst cache = compiler\n\t\t\t.getCache(\"ProgressPlugin\")\n\t\t\t.getItemCache(\"counts\", null);\n\n\t\t/** @type {Promise<CountsData> | undefined} */\n\t\tlet cacheGetPromise;\n\n\t\tcompiler.hooks.beforeCompile.tap(\"ProgressPlugin\", () => {\n\t\t\tif (!cacheGetPromise) {\n\t\t\t\tcacheGetPromise = cache.getPromise().then(\n\t\t\t\t\tdata => {\n\t\t\t\t\t\tif (data) {\n\t\t\t\t\t\t\tlastModulesCount = lastModulesCount || data.modulesCount;\n\t\t\t\t\t\t\tlastDependenciesCount =\n\t\t\t\t\t\t\t\tlastDependenciesCount || data.dependenciesCount;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\terr => {\n\t\t\t\t\t\t// Ignore error\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tcompiler.hooks.afterCompile.tapPromise(\"ProgressPlugin\", compilation => {\n\t\t\tif (compilation.compiler.isChild()) return Promise.resolve();\n\t\t\treturn /** @type {Promise<CountsData>} */ (cacheGetPromise).then(\n\t\t\t\tasync oldData => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!oldData ||\n\t\t\t\t\t\toldData.modulesCount !== modulesCount ||\n\t\t\t\t\t\toldData.dependenciesCount !== dependenciesCount\n\t\t\t\t\t) {\n\t\t\t\t\t\tawait cache.storePromise({ modulesCount, dependenciesCount });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\n\t\tcompiler.hooks.compilation.tap(\"ProgressPlugin\", compilation => {\n\t\t\tif (compilation.compiler.isChild()) return;\n\t\t\tlastModulesCount = modulesCount;\n\t\t\tlastEntriesCount = entriesCount;\n\t\t\tlastDependenciesCount = dependenciesCount;\n\t\t\tmodulesCount = dependenciesCount = entriesCount = 0;\n\t\t\tdoneModules = doneDependencies = doneEntries = 0;\n\n\t\t\tcompilation.factorizeQueue.hooks.added.tap(\n\t\t\t\t\"ProgressPlugin\",\n\t\t\t\tfactorizeAdd\n\t\t\t);\n\t\t\tcompilation.factorizeQueue.hooks.result.tap(\n\t\t\t\t\"ProgressPlugin\",\n\t\t\t\tfactorizeDone\n\t\t\t);\n\n\t\t\tcompilation.addModuleQueue.hooks.added.tap(\"ProgressPlugin\", moduleAdd);\n\t\t\tcompilation.processDependenciesQueue.hooks.result.tap(\n\t\t\t\t\"ProgressPlugin\",\n\t\t\t\tmoduleDone\n\t\t\t);\n\n\t\t\tif (showActiveModules) {\n\t\t\t\tcompilation.hooks.buildModule.tap(\"ProgressPlugin\", moduleBuild);\n\t\t\t}\n\n\t\t\tcompilation.hooks.addEntry.tap(\"ProgressPlugin\", entryAdd);\n\t\t\tcompilation.hooks.failedEntry.tap(\"ProgressPlugin\", entryDone);\n\t\t\tcompilation.hooks.succeedEntry.tap(\"ProgressPlugin\", entryDone);\n\n\t\t\t// avoid dynamic require if bundled with webpack\n\t\t\t// @ts-expect-error\n\t\t\tif (typeof __webpack_require__ !== \"function\") {\n\t\t\t\tconst requiredLoaders = new Set();\n\t\t\t\tNormalModule.getCompilationHooks(compilation).beforeLoaders.tap(\n\t\t\t\t\t\"ProgressPlugin\",\n\t\t\t\t\tloaders => {\n\t\t\t\t\t\tfor (const loader of loaders) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tloader.type !== \"module\" &&\n\t\t\t\t\t\t\t\t!requiredLoaders.has(loader.loader)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\trequiredLoaders.add(loader.loader);\n\t\t\t\t\t\t\t\tcurrentLoader = loader.loader;\n\t\t\t\t\t\t\t\tupdate();\n\t\t\t\t\t\t\t\trequire(loader.loader);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (currentLoader) {\n\t\t\t\t\t\t\tcurrentLoader = \"\";\n\t\t\t\t\t\t\tupdate();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst hooks = {\n\t\t\t\tfinishModules: \"finish module graph\",\n\t\t\t\tseal: \"plugins\",\n\t\t\t\toptimizeDependencies: \"dependencies optimization\",\n\t\t\t\tafterOptimizeDependencies: \"after dependencies optimization\",\n\t\t\t\tbeforeChunks: \"chunk graph\",\n\t\t\t\tafterChunks: \"after chunk graph\",\n\t\t\t\toptimize: \"optimizing\",\n\t\t\t\toptimizeModules: \"module optimization\",\n\t\t\t\tafterOptimizeModules: \"after module optimization\",\n\t\t\t\toptimizeChunks: \"chunk optimization\",\n\t\t\t\tafterOptimizeChunks: \"after chunk optimization\",\n\t\t\t\toptimizeTree: \"module and chunk tree optimization\",\n\t\t\t\tafterOptimizeTree: \"after module and chunk tree optimization\",\n\t\t\t\toptimizeChunkModules: \"chunk modules optimization\",\n\t\t\t\tafterOptimizeChunkModules: \"after chunk modules optimization\",\n\t\t\t\treviveModules: \"module reviving\",\n\t\t\t\tbeforeModuleIds: \"before module ids\",\n\t\t\t\tmoduleIds: \"module ids\",\n\t\t\t\toptimizeModuleIds: \"module id optimization\",\n\t\t\t\tafterOptimizeModuleIds: \"module id optimization\",\n\t\t\t\treviveChunks: \"chunk reviving\",\n\t\t\t\tbeforeChunkIds: \"before chunk ids\",\n\t\t\t\tchunkIds: \"chunk ids\",\n\t\t\t\toptimizeChunkIds: \"chunk id optimization\",\n\t\t\t\tafterOptimizeChunkIds: \"after chunk id optimization\",\n\t\t\t\trecordModules: \"record modules\",\n\t\t\t\trecordChunks: \"record chunks\",\n\t\t\t\tbeforeModuleHash: \"module hashing\",\n\t\t\t\tbeforeCodeGeneration: \"code generation\",\n\t\t\t\tbeforeRuntimeRequirements: \"runtime requirements\",\n\t\t\t\tbeforeHash: \"hashing\",\n\t\t\t\tafterHash: \"after hashing\",\n\t\t\t\trecordHash: \"record hash\",\n\t\t\t\tbeforeModuleAssets: \"module assets processing\",\n\t\t\t\tbeforeChunkAssets: \"chunk assets processing\",\n\t\t\t\tprocessAssets: \"asset processing\",\n\t\t\t\tafterProcessAssets: \"after asset optimization\",\n\t\t\t\trecord: \"recording\",\n\t\t\t\tafterSeal: \"after seal\"\n\t\t\t};\n\t\t\tconst numberOfHooks = Object.keys(hooks).length;\n\t\t\tObject.keys(hooks).forEach((name, idx) => {\n\t\t\t\tconst title = hooks[/** @type {keyof typeof hooks} */ (name)];\n\t\t\t\tconst percentage = (idx / numberOfHooks) * 0.25 + 0.7;\n\t\t\t\tcompilation.hooks[/** @type {keyof typeof hooks} */ (name)].intercept({\n\t\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\t\tcall() {\n\t\t\t\t\t\thandler(percentage, \"sealing\", title);\n\t\t\t\t\t},\n\t\t\t\t\tdone() {\n\t\t\t\t\t\tprogressReporters.set(compiler, undefined);\n\t\t\t\t\t\thandler(percentage, \"sealing\", title);\n\t\t\t\t\t},\n\t\t\t\t\tresult() {\n\t\t\t\t\t\thandler(percentage, \"sealing\", title);\n\t\t\t\t\t},\n\t\t\t\t\terror() {\n\t\t\t\t\t\thandler(percentage, \"sealing\", title);\n\t\t\t\t\t},\n\t\t\t\t\ttap(tap) {\n\t\t\t\t\t\t// p is percentage from 0 to 1\n\t\t\t\t\t\t// args is any number of messages in a hierarchical matter\n\t\t\t\t\t\tprogressReporters.set(compilation.compiler, (p, ...args) => {\n\t\t\t\t\t\t\thandler(percentage, \"sealing\", title, tap.name, ...args);\n\t\t\t\t\t\t});\n\t\t\t\t\t\thandler(percentage, \"sealing\", title, tap.name);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tcompiler.hooks.make.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tcall() {\n\t\t\t\thandler(0.1, \"building\");\n\t\t\t},\n\t\t\tdone() {\n\t\t\t\thandler(0.65, \"building\");\n\t\t\t}\n\t\t});\n\t\t/**\n\t\t * @param {TODO} hook hook\n\t\t * @param {number} progress progress from 0 to 1\n\t\t * @param {string} category category\n\t\t * @param {string} name name\n\t\t */\n\t\tconst interceptHook = (hook, progress, category, name) => {\n\t\t\thook.intercept({\n\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\tcall() {\n\t\t\t\t\thandler(progress, category, name);\n\t\t\t\t},\n\t\t\t\tdone() {\n\t\t\t\t\tprogressReporters.set(compiler, undefined);\n\t\t\t\t\thandler(progress, category, name);\n\t\t\t\t},\n\t\t\t\tresult() {\n\t\t\t\t\thandler(progress, category, name);\n\t\t\t\t},\n\t\t\t\terror() {\n\t\t\t\t\thandler(progress, category, name);\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * @param {Tap} tap tap\n\t\t\t\t */\n\t\t\t\ttap(tap) {\n\t\t\t\t\tprogressReporters.set(compiler, (p, ...args) => {\n\t\t\t\t\t\thandler(progress, category, name, tap.name, ...args);\n\t\t\t\t\t});\n\t\t\t\t\thandler(progress, category, name, tap.name);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tcompiler.cache.hooks.endIdle.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tcall() {\n\t\t\t\thandler(0, \"\");\n\t\t\t}\n\t\t});\n\t\tinterceptHook(compiler.cache.hooks.endIdle, 0.01, \"cache\", \"end idle\");\n\t\tcompiler.hooks.beforeRun.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tcall() {\n\t\t\t\thandler(0, \"\");\n\t\t\t}\n\t\t});\n\t\tinterceptHook(compiler.hooks.beforeRun, 0.01, \"setup\", \"before run\");\n\t\tinterceptHook(compiler.hooks.run, 0.02, \"setup\", \"run\");\n\t\tinterceptHook(compiler.hooks.watchRun, 0.03, \"setup\", \"watch run\");\n\t\tinterceptHook(\n\t\t\tcompiler.hooks.normalModuleFactory,\n\t\t\t0.04,\n\t\t\t\"setup\",\n\t\t\t\"normal module factory\"\n\t\t);\n\t\tinterceptHook(\n\t\t\tcompiler.hooks.contextModuleFactory,\n\t\t\t0.05,\n\t\t\t\"setup\",\n\t\t\t\"context module factory\"\n\t\t);\n\t\tinterceptHook(\n\t\t\tcompiler.hooks.beforeCompile,\n\t\t\t0.06,\n\t\t\t\"setup\",\n\t\t\t\"before compile\"\n\t\t);\n\t\tinterceptHook(compiler.hooks.compile, 0.07, \"setup\", \"compile\");\n\t\tinterceptHook(compiler.hooks.thisCompilation, 0.08, \"setup\", \"compilation\");\n\t\tinterceptHook(compiler.hooks.compilation, 0.09, \"setup\", \"compilation\");\n\t\tinterceptHook(compiler.hooks.finishMake, 0.69, \"building\", \"finish\");\n\t\tinterceptHook(compiler.hooks.emit, 0.95, \"emitting\", \"emit\");\n\t\tinterceptHook(compiler.hooks.afterEmit, 0.98, \"emitting\", \"after emit\");\n\t\tinterceptHook(compiler.hooks.done, 0.99, \"done\", \"plugins\");\n\t\tcompiler.hooks.done.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tdone() {\n\t\t\t\thandler(0.99, \"\");\n\t\t\t}\n\t\t});\n\t\tinterceptHook(\n\t\t\tcompiler.cache.hooks.storeBuildDependencies,\n\t\t\t0.99,\n\t\t\t\"cache\",\n\t\t\t\"store build dependencies\"\n\t\t);\n\t\tinterceptHook(compiler.cache.hooks.shutdown, 0.99, \"cache\", \"shutdown\");\n\t\tinterceptHook(compiler.cache.hooks.beginIdle, 0.99, \"cache\", \"begin idle\");\n\t\tinterceptHook(\n\t\t\tcompiler.hooks.watchClose,\n\t\t\t0.99,\n\t\t\t\"end\",\n\t\t\t\"closing watch compilation\"\n\t\t);\n\t\tcompiler.cache.hooks.beginIdle.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tdone() {\n\t\t\t\thandler(1, \"\");\n\t\t\t}\n\t\t});\n\t\tcompiler.cache.hooks.shutdown.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tdone() {\n\t\t\t\thandler(1, \"\");\n\t\t\t}\n\t\t});\n\t}\n}\n\nProgressPlugin.defaultOptions = {\n\tprofile: false,\n\tmodulesCount: 5000,\n\tdependenciesCount: 10000,\n\tmodules: true,\n\tdependencies: true,\n\tactiveModules: false,\n\tentries: true\n};\n\nProgressPlugin.createDefaultHandler = createDefaultHandler;\n\nmodule.exports = ProgressPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}