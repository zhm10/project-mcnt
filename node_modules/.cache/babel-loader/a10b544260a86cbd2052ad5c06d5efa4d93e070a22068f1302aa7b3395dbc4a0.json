{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n  register\n} = require(\"./serialization\");\nconst Position = /** @type {TODO} */require(\"acorn\").Position;\nconst SourceLocation = require(\"acorn\").SourceLocation;\nconst ValidationError = require(\"schema-utils/dist/ValidationError\").default;\nconst {\n  CachedSource,\n  ConcatSource,\n  OriginalSource,\n  PrefixSource,\n  RawSource,\n  ReplaceSource,\n  SourceMapSource\n} = require(\"webpack-sources\");\n\n/** @typedef {import(\"acorn\").Position} Position */\n/** @typedef {import(\"../Dependency\").RealDependencyLocation} RealDependencyLocation */\n/** @typedef {import(\"../Dependency\").SourcePosition} SourcePosition */\n/** @typedef {import(\"./serialization\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"./serialization\").ObjectSerializerContext} ObjectSerializerContext */\n\n/** @typedef {ObjectSerializerContext & { writeLazy?: (value: any) => void }} WebpackObjectSerializerContext */\n\nconst CURRENT_MODULE = \"webpack/lib/util/registerExternalSerializer\";\nregister(CachedSource, CURRENT_MODULE, \"webpack-sources/CachedSource\", new class CachedSourceSerializer {\n  /**\n   * @param {CachedSource} source the cached source to be serialized\n   * @param {WebpackObjectSerializerContext} context context\n   * @returns {void}\n   */\n  serialize(source, {\n    write,\n    writeLazy\n  }) {\n    if (writeLazy) {\n      writeLazy(source.originalLazy());\n    } else {\n      write(source.original());\n    }\n    write(source.getCachedData());\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   * @returns {CachedSource} cached source\n   */\n  deserialize({\n    read\n  }) {\n    const source = read();\n    const cachedData = read();\n    return new CachedSource(source, cachedData);\n  }\n}());\nregister(RawSource, CURRENT_MODULE, \"webpack-sources/RawSource\", new class RawSourceSerializer {\n  /**\n   * @param {RawSource} source the raw source to be serialized\n   * @param {WebpackObjectSerializerContext} context context\n   * @returns {void}\n   */\n  serialize(source, {\n    write\n  }) {\n    write(source.buffer());\n    write(!source.isBuffer());\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   * @returns {RawSource} raw source\n   */\n  deserialize({\n    read\n  }) {\n    const source = read();\n    const convertToString = read();\n    return new RawSource(source, convertToString);\n  }\n}());\nregister(ConcatSource, CURRENT_MODULE, \"webpack-sources/ConcatSource\", new class ConcatSourceSerializer {\n  /**\n   * @param {ConcatSource} source the concat source to be serialized\n   * @param {WebpackObjectSerializerContext} context context\n   * @returns {void}\n   */\n  serialize(source, {\n    write\n  }) {\n    write(source.getChildren());\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   * @returns {ConcatSource} concat source\n   */\n  deserialize({\n    read\n  }) {\n    const source = new ConcatSource();\n    source.addAllSkipOptimizing(read());\n    return source;\n  }\n}());\nregister(PrefixSource, CURRENT_MODULE, \"webpack-sources/PrefixSource\", new class PrefixSourceSerializer {\n  /**\n   * @param {PrefixSource} source the prefix source to be serialized\n   * @param {WebpackObjectSerializerContext} context context\n   * @returns {void}\n   */\n  serialize(source, {\n    write\n  }) {\n    write(source.getPrefix());\n    write(source.original());\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   * @returns {PrefixSource} prefix source\n   */\n  deserialize({\n    read\n  }) {\n    return new PrefixSource(read(), read());\n  }\n}());\nregister(ReplaceSource, CURRENT_MODULE, \"webpack-sources/ReplaceSource\", new class ReplaceSourceSerializer {\n  /**\n   * @param {ReplaceSource} source the replace source to be serialized\n   * @param {WebpackObjectSerializerContext} context context\n   * @returns {void}\n   */\n  serialize(source, {\n    write\n  }) {\n    write(source.original());\n    write(source.getName());\n    const replacements = source.getReplacements();\n    write(replacements.length);\n    for (const repl of replacements) {\n      write(repl.start);\n      write(repl.end);\n    }\n    for (const repl of replacements) {\n      write(repl.content);\n      write(repl.name);\n    }\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   * @returns {ReplaceSource} replace source\n   */\n  deserialize({\n    read\n  }) {\n    const source = new ReplaceSource(read(), read());\n    const len = read();\n    const startEndBuffer = [];\n    for (let i = 0; i < len; i++) {\n      startEndBuffer.push(read(), read());\n    }\n    let j = 0;\n    for (let i = 0; i < len; i++) {\n      source.replace(startEndBuffer[j++], startEndBuffer[j++], read(), read());\n    }\n    return source;\n  }\n}());\nregister(OriginalSource, CURRENT_MODULE, \"webpack-sources/OriginalSource\", new class OriginalSourceSerializer {\n  /**\n   * @param {OriginalSource} source the original source to be serialized\n   * @param {WebpackObjectSerializerContext} context context\n   * @returns {void}\n   */\n  serialize(source, {\n    write\n  }) {\n    write(source.buffer());\n    write(source.getName());\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   * @returns {OriginalSource} original source\n   */\n  deserialize({\n    read\n  }) {\n    const buffer = read();\n    const name = read();\n    return new OriginalSource(buffer, name);\n  }\n}());\nregister(SourceLocation, CURRENT_MODULE, \"acorn/SourceLocation\", new class SourceLocationSerializer {\n  /**\n   * @param {SourceLocation} loc the location to be serialized\n   * @param {WebpackObjectSerializerContext} context context\n   * @returns {void}\n   */\n  serialize(loc, {\n    write\n  }) {\n    write(loc.start.line);\n    write(loc.start.column);\n    write(loc.end.line);\n    write(loc.end.column);\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   * @returns {RealDependencyLocation} location\n   */\n  deserialize({\n    read\n  }) {\n    return {\n      start: {\n        line: read(),\n        column: read()\n      },\n      end: {\n        line: read(),\n        column: read()\n      }\n    };\n  }\n}());\nregister(Position, CURRENT_MODULE, \"acorn/Position\", new class PositionSerializer {\n  /**\n   * @param {Position} pos the position to be serialized\n   * @param {WebpackObjectSerializerContext} context context\n   * @returns {void}\n   */\n  serialize(pos, {\n    write\n  }) {\n    write(pos.line);\n    write(pos.column);\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   * @returns {SourcePosition} position\n   */\n  deserialize({\n    read\n  }) {\n    return {\n      line: read(),\n      column: read()\n    };\n  }\n}());\nregister(SourceMapSource, CURRENT_MODULE, \"webpack-sources/SourceMapSource\", new class SourceMapSourceSerializer {\n  /**\n   * @param {SourceMapSource} source the source map source to be serialized\n   * @param {WebpackObjectSerializerContext} context context\n   * @returns {void}\n   */\n  serialize(source, {\n    write\n  }) {\n    write(source.getArgsAsBuffers());\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   * @returns {SourceMapSource} source source map source\n   */\n  deserialize({\n    read\n  }) {\n    // @ts-expect-error\n    return new SourceMapSource(...read());\n  }\n}());\nregister(ValidationError, CURRENT_MODULE, \"schema-utils/ValidationError\", new class ValidationErrorSerializer {\n  // TODO error should be ValidationError, but this fails the type checks\n  /**\n   * @param {TODO} error the source map source to be serialized\n   * @param {WebpackObjectSerializerContext} context context\n   * @returns {void}\n   */\n  serialize(error, {\n    write\n  }) {\n    write(error.errors);\n    write(error.schema);\n    write({\n      name: error.headerName,\n      baseDataPath: error.baseDataPath,\n      postFormatter: error.postFormatter\n    });\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   * @returns {TODO} error\n   */\n  deserialize({\n    read\n  }) {\n    return new ValidationError(read(), read(), read());\n  }\n}());","map":{"version":3,"names":["register","require","Position","SourceLocation","ValidationError","default","CachedSource","ConcatSource","OriginalSource","PrefixSource","RawSource","ReplaceSource","SourceMapSource","CURRENT_MODULE","CachedSourceSerializer","serialize","source","write","writeLazy","originalLazy","original","getCachedData","deserialize","read","cachedData","RawSourceSerializer","buffer","isBuffer","convertToString","ConcatSourceSerializer","getChildren","addAllSkipOptimizing","PrefixSourceSerializer","getPrefix","ReplaceSourceSerializer","getName","replacements","getReplacements","length","repl","start","end","content","name","len","startEndBuffer","i","push","j","replace","OriginalSourceSerializer","SourceLocationSerializer","loc","line","column","PositionSerializer","pos","SourceMapSourceSerializer","getArgsAsBuffers","ValidationErrorSerializer","error","errors","schema","headerName","baseDataPath","postFormatter"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/util/registerExternalSerializer.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { register } = require(\"./serialization\");\n\nconst Position = /** @type {TODO} */ (require(\"acorn\")).Position;\nconst SourceLocation = require(\"acorn\").SourceLocation;\nconst ValidationError = require(\"schema-utils/dist/ValidationError\").default;\nconst {\n\tCachedSource,\n\tConcatSource,\n\tOriginalSource,\n\tPrefixSource,\n\tRawSource,\n\tReplaceSource,\n\tSourceMapSource\n} = require(\"webpack-sources\");\n\n/** @typedef {import(\"acorn\").Position} Position */\n/** @typedef {import(\"../Dependency\").RealDependencyLocation} RealDependencyLocation */\n/** @typedef {import(\"../Dependency\").SourcePosition} SourcePosition */\n/** @typedef {import(\"./serialization\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"./serialization\").ObjectSerializerContext} ObjectSerializerContext */\n\n/** @typedef {ObjectSerializerContext & { writeLazy?: (value: any) => void }} WebpackObjectSerializerContext */\n\nconst CURRENT_MODULE = \"webpack/lib/util/registerExternalSerializer\";\n\nregister(\n\tCachedSource,\n\tCURRENT_MODULE,\n\t\"webpack-sources/CachedSource\",\n\tnew (class CachedSourceSerializer {\n\t\t/**\n\t\t * @param {CachedSource} source the cached source to be serialized\n\t\t * @param {WebpackObjectSerializerContext} context context\n\t\t * @returns {void}\n\t\t */\n\t\tserialize(source, { write, writeLazy }) {\n\t\t\tif (writeLazy) {\n\t\t\t\twriteLazy(source.originalLazy());\n\t\t\t} else {\n\t\t\t\twrite(source.original());\n\t\t\t}\n\t\t\twrite(source.getCachedData());\n\t\t}\n\n\t\t/**\n\t\t * @param {ObjectDeserializerContext} context context\n\t\t * @returns {CachedSource} cached source\n\t\t */\n\t\tdeserialize({ read }) {\n\t\t\tconst source = read();\n\t\t\tconst cachedData = read();\n\t\t\treturn new CachedSource(source, cachedData);\n\t\t}\n\t})()\n);\n\nregister(\n\tRawSource,\n\tCURRENT_MODULE,\n\t\"webpack-sources/RawSource\",\n\tnew (class RawSourceSerializer {\n\t\t/**\n\t\t * @param {RawSource} source the raw source to be serialized\n\t\t * @param {WebpackObjectSerializerContext} context context\n\t\t * @returns {void}\n\t\t */\n\t\tserialize(source, { write }) {\n\t\t\twrite(source.buffer());\n\t\t\twrite(!source.isBuffer());\n\t\t}\n\n\t\t/**\n\t\t * @param {ObjectDeserializerContext} context context\n\t\t * @returns {RawSource} raw source\n\t\t */\n\t\tdeserialize({ read }) {\n\t\t\tconst source = read();\n\t\t\tconst convertToString = read();\n\t\t\treturn new RawSource(source, convertToString);\n\t\t}\n\t})()\n);\n\nregister(\n\tConcatSource,\n\tCURRENT_MODULE,\n\t\"webpack-sources/ConcatSource\",\n\tnew (class ConcatSourceSerializer {\n\t\t/**\n\t\t * @param {ConcatSource} source the concat source to be serialized\n\t\t * @param {WebpackObjectSerializerContext} context context\n\t\t * @returns {void}\n\t\t */\n\t\tserialize(source, { write }) {\n\t\t\twrite(source.getChildren());\n\t\t}\n\n\t\t/**\n\t\t * @param {ObjectDeserializerContext} context context\n\t\t * @returns {ConcatSource} concat source\n\t\t */\n\t\tdeserialize({ read }) {\n\t\t\tconst source = new ConcatSource();\n\t\t\tsource.addAllSkipOptimizing(read());\n\t\t\treturn source;\n\t\t}\n\t})()\n);\n\nregister(\n\tPrefixSource,\n\tCURRENT_MODULE,\n\t\"webpack-sources/PrefixSource\",\n\tnew (class PrefixSourceSerializer {\n\t\t/**\n\t\t * @param {PrefixSource} source the prefix source to be serialized\n\t\t * @param {WebpackObjectSerializerContext} context context\n\t\t * @returns {void}\n\t\t */\n\t\tserialize(source, { write }) {\n\t\t\twrite(source.getPrefix());\n\t\t\twrite(source.original());\n\t\t}\n\n\t\t/**\n\t\t * @param {ObjectDeserializerContext} context context\n\t\t * @returns {PrefixSource} prefix source\n\t\t */\n\t\tdeserialize({ read }) {\n\t\t\treturn new PrefixSource(read(), read());\n\t\t}\n\t})()\n);\n\nregister(\n\tReplaceSource,\n\tCURRENT_MODULE,\n\t\"webpack-sources/ReplaceSource\",\n\tnew (class ReplaceSourceSerializer {\n\t\t/**\n\t\t * @param {ReplaceSource} source the replace source to be serialized\n\t\t * @param {WebpackObjectSerializerContext} context context\n\t\t * @returns {void}\n\t\t */\n\t\tserialize(source, { write }) {\n\t\t\twrite(source.original());\n\t\t\twrite(source.getName());\n\t\t\tconst replacements = source.getReplacements();\n\t\t\twrite(replacements.length);\n\t\t\tfor (const repl of replacements) {\n\t\t\t\twrite(repl.start);\n\t\t\t\twrite(repl.end);\n\t\t\t}\n\t\t\tfor (const repl of replacements) {\n\t\t\t\twrite(repl.content);\n\t\t\t\twrite(repl.name);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {ObjectDeserializerContext} context context\n\t\t * @returns {ReplaceSource} replace source\n\t\t */\n\t\tdeserialize({ read }) {\n\t\t\tconst source = new ReplaceSource(read(), read());\n\t\t\tconst len = read();\n\t\t\tconst startEndBuffer = [];\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tstartEndBuffer.push(read(), read());\n\t\t\t}\n\t\t\tlet j = 0;\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tsource.replace(\n\t\t\t\t\tstartEndBuffer[j++],\n\t\t\t\t\tstartEndBuffer[j++],\n\t\t\t\t\tread(),\n\t\t\t\t\tread()\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn source;\n\t\t}\n\t})()\n);\n\nregister(\n\tOriginalSource,\n\tCURRENT_MODULE,\n\t\"webpack-sources/OriginalSource\",\n\tnew (class OriginalSourceSerializer {\n\t\t/**\n\t\t * @param {OriginalSource} source the original source to be serialized\n\t\t * @param {WebpackObjectSerializerContext} context context\n\t\t * @returns {void}\n\t\t */\n\t\tserialize(source, { write }) {\n\t\t\twrite(source.buffer());\n\t\t\twrite(source.getName());\n\t\t}\n\n\t\t/**\n\t\t * @param {ObjectDeserializerContext} context context\n\t\t * @returns {OriginalSource} original source\n\t\t */\n\t\tdeserialize({ read }) {\n\t\t\tconst buffer = read();\n\t\t\tconst name = read();\n\t\t\treturn new OriginalSource(buffer, name);\n\t\t}\n\t})()\n);\n\nregister(\n\tSourceLocation,\n\tCURRENT_MODULE,\n\t\"acorn/SourceLocation\",\n\tnew (class SourceLocationSerializer {\n\t\t/**\n\t\t * @param {SourceLocation} loc the location to be serialized\n\t\t * @param {WebpackObjectSerializerContext} context context\n\t\t * @returns {void}\n\t\t */\n\t\tserialize(loc, { write }) {\n\t\t\twrite(loc.start.line);\n\t\t\twrite(loc.start.column);\n\t\t\twrite(loc.end.line);\n\t\t\twrite(loc.end.column);\n\t\t}\n\n\t\t/**\n\t\t * @param {ObjectDeserializerContext} context context\n\t\t * @returns {RealDependencyLocation} location\n\t\t */\n\t\tdeserialize({ read }) {\n\t\t\treturn {\n\t\t\t\tstart: {\n\t\t\t\t\tline: read(),\n\t\t\t\t\tcolumn: read()\n\t\t\t\t},\n\t\t\t\tend: {\n\t\t\t\t\tline: read(),\n\t\t\t\t\tcolumn: read()\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t})()\n);\n\nregister(\n\tPosition,\n\tCURRENT_MODULE,\n\t\"acorn/Position\",\n\tnew (class PositionSerializer {\n\t\t/**\n\t\t * @param {Position} pos the position to be serialized\n\t\t * @param {WebpackObjectSerializerContext} context context\n\t\t * @returns {void}\n\t\t */\n\t\tserialize(pos, { write }) {\n\t\t\twrite(pos.line);\n\t\t\twrite(pos.column);\n\t\t}\n\n\t\t/**\n\t\t * @param {ObjectDeserializerContext} context context\n\t\t * @returns {SourcePosition} position\n\t\t */\n\t\tdeserialize({ read }) {\n\t\t\treturn {\n\t\t\t\tline: read(),\n\t\t\t\tcolumn: read()\n\t\t\t};\n\t\t}\n\t})()\n);\n\nregister(\n\tSourceMapSource,\n\tCURRENT_MODULE,\n\t\"webpack-sources/SourceMapSource\",\n\tnew (class SourceMapSourceSerializer {\n\t\t/**\n\t\t * @param {SourceMapSource} source the source map source to be serialized\n\t\t * @param {WebpackObjectSerializerContext} context context\n\t\t * @returns {void}\n\t\t */\n\t\tserialize(source, { write }) {\n\t\t\twrite(source.getArgsAsBuffers());\n\t\t}\n\n\t\t/**\n\t\t * @param {ObjectDeserializerContext} context context\n\t\t * @returns {SourceMapSource} source source map source\n\t\t */\n\t\tdeserialize({ read }) {\n\t\t\t// @ts-expect-error\n\t\t\treturn new SourceMapSource(...read());\n\t\t}\n\t})()\n);\n\nregister(\n\tValidationError,\n\tCURRENT_MODULE,\n\t\"schema-utils/ValidationError\",\n\tnew (class ValidationErrorSerializer {\n\t\t// TODO error should be ValidationError, but this fails the type checks\n\t\t/**\n\t\t * @param {TODO} error the source map source to be serialized\n\t\t * @param {WebpackObjectSerializerContext} context context\n\t\t * @returns {void}\n\t\t */\n\t\tserialize(error, { write }) {\n\t\t\twrite(error.errors);\n\t\t\twrite(error.schema);\n\t\t\twrite({\n\t\t\t\tname: error.headerName,\n\t\t\t\tbaseDataPath: error.baseDataPath,\n\t\t\t\tpostFormatter: error.postFormatter\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {ObjectDeserializerContext} context context\n\t\t * @returns {TODO} error\n\t\t */\n\t\tdeserialize({ read }) {\n\t\t\treturn new ValidationError(read(), read(), read());\n\t\t}\n\t})()\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}