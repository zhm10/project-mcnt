{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Parser = require(\"../Parser\");\nconst JsonExportsDependency = require(\"../dependencies/JsonExportsDependency\");\nconst memoize = require(\"../util/memoize\");\nconst JsonData = require(\"./JsonData\");\n\n/** @typedef {import(\"../../declarations/plugins/JsonModulesPluginParser\").JsonModulesPluginParserOptions} JsonModulesPluginParserOptions */\n/** @typedef {import(\"../Module\").BuildInfo} BuildInfo */\n/** @typedef {import(\"../Module\").BuildMeta} BuildMeta */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n/** @typedef {import(\"./JsonModulesPlugin\").RawJsonData} RawJsonData */\n\nconst getParseJson = memoize(() => require(\"json-parse-even-better-errors\"));\nclass JsonParser extends Parser {\n  /**\n   * @param {JsonModulesPluginParserOptions} options parser options\n   */\n  constructor(options) {\n    super();\n    this.options = options || {};\n  }\n\n  /**\n   * @param {string | Buffer | PreparsedAst} source the source to parse\n   * @param {ParserState} state the parser state\n   * @returns {ParserState} the parser state\n   */\n  parse(source, state) {\n    if (Buffer.isBuffer(source)) {\n      source = source.toString(\"utf-8\");\n    }\n\n    /** @type {NonNullable<JsonModulesPluginParserOptions[\"parse\"]>} */\n    const parseFn = typeof this.options.parse === \"function\" ? this.options.parse : getParseJson();\n    /** @type {Buffer | RawJsonData | undefined} */\n    let data;\n    try {\n      data = typeof source === \"object\" ? source : parseFn(source[0] === \"\\ufeff\" ? source.slice(1) : source);\n    } catch (e) {\n      throw new Error(`Cannot parse JSON: ${/** @type {Error} */e.message}`);\n    }\n    const jsonData = new JsonData( /** @type {Buffer | RawJsonData} */data);\n    const buildInfo = /** @type {BuildInfo} */state.module.buildInfo;\n    buildInfo.jsonData = jsonData;\n    buildInfo.strict = true;\n    const buildMeta = /** @type {BuildMeta} */state.module.buildMeta;\n    buildMeta.exportsType = \"default\";\n    buildMeta.defaultObject = typeof data === \"object\" ? \"redirect-warn\" : false;\n    state.module.addDependency(new JsonExportsDependency(jsonData));\n    return state;\n  }\n}\nmodule.exports = JsonParser;","map":{"version":3,"names":["Parser","require","JsonExportsDependency","memoize","JsonData","getParseJson","JsonParser","constructor","options","parse","source","state","Buffer","isBuffer","toString","parseFn","data","slice","e","Error","message","jsonData","buildInfo","module","strict","buildMeta","exportsType","defaultObject","addDependency","exports"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/json/JsonParser.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Parser = require(\"../Parser\");\nconst JsonExportsDependency = require(\"../dependencies/JsonExportsDependency\");\nconst memoize = require(\"../util/memoize\");\nconst JsonData = require(\"./JsonData\");\n\n/** @typedef {import(\"../../declarations/plugins/JsonModulesPluginParser\").JsonModulesPluginParserOptions} JsonModulesPluginParserOptions */\n/** @typedef {import(\"../Module\").BuildInfo} BuildInfo */\n/** @typedef {import(\"../Module\").BuildMeta} BuildMeta */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n/** @typedef {import(\"./JsonModulesPlugin\").RawJsonData} RawJsonData */\n\nconst getParseJson = memoize(() => require(\"json-parse-even-better-errors\"));\n\nclass JsonParser extends Parser {\n\t/**\n\t * @param {JsonModulesPluginParserOptions} options parser options\n\t */\n\tconstructor(options) {\n\t\tsuper();\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * @param {string | Buffer | PreparsedAst} source the source to parse\n\t * @param {ParserState} state the parser state\n\t * @returns {ParserState} the parser state\n\t */\n\tparse(source, state) {\n\t\tif (Buffer.isBuffer(source)) {\n\t\t\tsource = source.toString(\"utf-8\");\n\t\t}\n\n\t\t/** @type {NonNullable<JsonModulesPluginParserOptions[\"parse\"]>} */\n\t\tconst parseFn =\n\t\t\ttypeof this.options.parse === \"function\"\n\t\t\t\t? this.options.parse\n\t\t\t\t: getParseJson();\n\t\t/** @type {Buffer | RawJsonData | undefined} */\n\t\tlet data;\n\t\ttry {\n\t\t\tdata =\n\t\t\t\ttypeof source === \"object\"\n\t\t\t\t\t? source\n\t\t\t\t\t: parseFn(source[0] === \"\\ufeff\" ? source.slice(1) : source);\n\t\t} catch (e) {\n\t\t\tthrow new Error(`Cannot parse JSON: ${/** @type {Error} */ (e).message}`);\n\t\t}\n\t\tconst jsonData = new JsonData(/** @type {Buffer | RawJsonData} */ (data));\n\t\tconst buildInfo = /** @type {BuildInfo} */ (state.module.buildInfo);\n\t\tbuildInfo.jsonData = jsonData;\n\t\tbuildInfo.strict = true;\n\t\tconst buildMeta = /** @type {BuildMeta} */ (state.module.buildMeta);\n\t\tbuildMeta.exportsType = \"default\";\n\t\tbuildMeta.defaultObject =\n\t\t\ttypeof data === \"object\" ? \"redirect-warn\" : false;\n\t\tstate.module.addDependency(new JsonExportsDependency(jsonData));\n\t\treturn state;\n\t}\n}\n\nmodule.exports = JsonParser;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAW,CAAC;AACnC,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,uCAAuC,CAAC;AAC9E,MAAME,OAAO,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAC1C,MAAMG,QAAQ,GAAGH,OAAO,CAAC,YAAY,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMI,YAAY,GAAGF,OAAO,CAAC,MAAMF,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAE5E,MAAMK,UAAU,SAASN,MAAM,CAAC;EAC/B;AACD;AACA;EACCO,WAAWA,CAACC,OAAO,EAAE;IACpB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAC7B;;EAEA;AACD;AACA;AACA;AACA;EACCC,KAAKA,CAACC,MAAM,EAAEC,KAAK,EAAE;IACpB,IAAIC,MAAM,CAACC,QAAQ,CAACH,MAAM,CAAC,EAAE;MAC5BA,MAAM,GAAGA,MAAM,CAACI,QAAQ,CAAC,OAAO,CAAC;IAClC;;IAEA;IACA,MAAMC,OAAO,GACZ,OAAO,IAAI,CAACP,OAAO,CAACC,KAAK,KAAK,UAAU,GACrC,IAAI,CAACD,OAAO,CAACC,KAAK,GAClBJ,YAAY,CAAC,CAAC;IAClB;IACA,IAAIW,IAAI;IACR,IAAI;MACHA,IAAI,GACH,OAAON,MAAM,KAAK,QAAQ,GACvBA,MAAM,GACNK,OAAO,CAACL,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAGA,MAAM,CAACO,KAAK,CAAC,CAAC,CAAC,GAAGP,MAAM,CAAC;IAC/D,CAAC,CAAC,OAAOQ,CAAC,EAAE;MACX,MAAM,IAAIC,KAAK,CAAC,sBAAsB,oBAAsBD,CAAC,CAAEE,OAAO,EAAE,CAAC;IAC1E;IACA,MAAMC,QAAQ,GAAG,IAAIjB,QAAQ,EAAC,mCAAqCY,IAAK,CAAC;IACzE,MAAMM,SAAS,GAAG,wBAA0BX,KAAK,CAACY,MAAM,CAACD,SAAU;IACnEA,SAAS,CAACD,QAAQ,GAAGA,QAAQ;IAC7BC,SAAS,CAACE,MAAM,GAAG,IAAI;IACvB,MAAMC,SAAS,GAAG,wBAA0Bd,KAAK,CAACY,MAAM,CAACE,SAAU;IACnEA,SAAS,CAACC,WAAW,GAAG,SAAS;IACjCD,SAAS,CAACE,aAAa,GACtB,OAAOX,IAAI,KAAK,QAAQ,GAAG,eAAe,GAAG,KAAK;IACnDL,KAAK,CAACY,MAAM,CAACK,aAAa,CAAC,IAAI1B,qBAAqB,CAACmB,QAAQ,CAAC,CAAC;IAC/D,OAAOV,KAAK;EACb;AACD;AAEAY,MAAM,CAACM,OAAO,GAAGvB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}