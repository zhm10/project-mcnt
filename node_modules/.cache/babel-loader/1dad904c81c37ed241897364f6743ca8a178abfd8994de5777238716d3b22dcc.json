{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/**\n * Threshold for switching from 32-bit to 64-bit hashing. This is selected to ensure that the bias towards lower modulo results when using 32-bit hashing is <0.5%.\n * @type {number}\n */\nconst FNV_64_THRESHOLD = 1 << 24;\n\n/**\n * The FNV-1a offset basis for 32-bit hash values.\n * @type {number}\n */\nconst FNV_OFFSET_32 = 2166136261;\n/**\n * The FNV-1a prime for 32-bit hash values.\n * @type {number}\n */\nconst FNV_PRIME_32 = 16777619;\n/**\n * The mask for a positive 32-bit signed integer.\n * @type {number}\n */\nconst MASK_31 = 0x7fffffff;\n\n/**\n * The FNV-1a offset basis for 64-bit hash values.\n * @type {bigint}\n */\nconst FNV_OFFSET_64 = BigInt(\"0xCBF29CE484222325\");\n/**\n * The FNV-1a prime for 64-bit hash values.\n * @type {bigint}\n */\nconst FNV_PRIME_64 = BigInt(\"0x100000001B3\");\n\n/**\n * Computes a 32-bit FNV-1a hash value for the given string.\n * See https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\n * @param {string} str The input string to hash\n * @returns {number} - The computed hash value.\n */\nfunction fnv1a32(str) {\n  let hash = FNV_OFFSET_32;\n  for (let i = 0, len = str.length; i < len; i++) {\n    hash ^= str.charCodeAt(i);\n    // Use Math.imul to do c-style 32-bit multiplication and keep only the 32 least significant bits\n    hash = Math.imul(hash, FNV_PRIME_32);\n  }\n  // Force the result to be positive\n  return hash & MASK_31;\n}\n\n/**\n * Computes a 64-bit FNV-1a hash value for the given string.\n * See https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\n * @param {string} str The input string to hash\n * @returns {bigint} - The computed hash value.\n */\nfunction fnv1a64(str) {\n  let hash = FNV_OFFSET_64;\n  for (let i = 0, len = str.length; i < len; i++) {\n    hash ^= BigInt(str.charCodeAt(i));\n    hash = BigInt.asUintN(64, hash * FNV_PRIME_64);\n  }\n  return hash;\n}\n\n/**\n * Computes a hash value for the given string and range. This hashing algorithm is a modified\n * version of the [FNV-1a algorithm](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function).\n * It is optimized for speed and does **not** generate a cryptographic hash value.\n *\n * We use `numberHash` in `lib/ids/IdHelpers.js` to generate hash values for the module identifier. The generated\n * hash is used as a prefix for the module id's to avoid collisions with other modules.\n *\n * @param {string} str The input string to hash.\n * @param {number} range The range of the hash value (0 to range-1).\n * @returns {number} - The computed hash value.\n *\n * @example\n *\n * ```js\n * const numberHash = require(\"webpack/lib/util/numberHash\");\n * numberHash(\"hello\", 1000); // 73\n * numberHash(\"hello world\"); // 72\n * ```\n *\n */\nmodule.exports = (str, range) => {\n  if (range < FNV_64_THRESHOLD) {\n    return fnv1a32(str) % range;\n  } else {\n    return Number(fnv1a64(str) % BigInt(range));\n  }\n};","map":{"version":3,"names":["FNV_64_THRESHOLD","FNV_OFFSET_32","FNV_PRIME_32","MASK_31","FNV_OFFSET_64","BigInt","FNV_PRIME_64","fnv1a32","str","hash","i","len","length","charCodeAt","Math","imul","fnv1a64","asUintN","module","exports","range","Number"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/util/numberHash.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/**\n * Threshold for switching from 32-bit to 64-bit hashing. This is selected to ensure that the bias towards lower modulo results when using 32-bit hashing is <0.5%.\n * @type {number}\n */\nconst FNV_64_THRESHOLD = 1 << 24;\n\n/**\n * The FNV-1a offset basis for 32-bit hash values.\n * @type {number}\n */\nconst FNV_OFFSET_32 = 2166136261;\n/**\n * The FNV-1a prime for 32-bit hash values.\n * @type {number}\n */\nconst FNV_PRIME_32 = 16777619;\n/**\n * The mask for a positive 32-bit signed integer.\n * @type {number}\n */\nconst MASK_31 = 0x7fffffff;\n\n/**\n * The FNV-1a offset basis for 64-bit hash values.\n * @type {bigint}\n */\nconst FNV_OFFSET_64 = BigInt(\"0xCBF29CE484222325\");\n/**\n * The FNV-1a prime for 64-bit hash values.\n * @type {bigint}\n */\nconst FNV_PRIME_64 = BigInt(\"0x100000001B3\");\n\n/**\n * Computes a 32-bit FNV-1a hash value for the given string.\n * See https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\n * @param {string} str The input string to hash\n * @returns {number} - The computed hash value.\n */\nfunction fnv1a32(str) {\n\tlet hash = FNV_OFFSET_32;\n\tfor (let i = 0, len = str.length; i < len; i++) {\n\t\thash ^= str.charCodeAt(i);\n\t\t// Use Math.imul to do c-style 32-bit multiplication and keep only the 32 least significant bits\n\t\thash = Math.imul(hash, FNV_PRIME_32);\n\t}\n\t// Force the result to be positive\n\treturn hash & MASK_31;\n}\n\n/**\n * Computes a 64-bit FNV-1a hash value for the given string.\n * See https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\n * @param {string} str The input string to hash\n * @returns {bigint} - The computed hash value.\n */\nfunction fnv1a64(str) {\n\tlet hash = FNV_OFFSET_64;\n\tfor (let i = 0, len = str.length; i < len; i++) {\n\t\thash ^= BigInt(str.charCodeAt(i));\n\t\thash = BigInt.asUintN(64, hash * FNV_PRIME_64);\n\t}\n\treturn hash;\n}\n\n/**\n * Computes a hash value for the given string and range. This hashing algorithm is a modified\n * version of the [FNV-1a algorithm](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function).\n * It is optimized for speed and does **not** generate a cryptographic hash value.\n *\n * We use `numberHash` in `lib/ids/IdHelpers.js` to generate hash values for the module identifier. The generated\n * hash is used as a prefix for the module id's to avoid collisions with other modules.\n *\n * @param {string} str The input string to hash.\n * @param {number} range The range of the hash value (0 to range-1).\n * @returns {number} - The computed hash value.\n *\n * @example\n *\n * ```js\n * const numberHash = require(\"webpack/lib/util/numberHash\");\n * numberHash(\"hello\", 1000); // 73\n * numberHash(\"hello world\"); // 72\n * ```\n *\n */\nmodule.exports = (str, range) => {\n\tif (range < FNV_64_THRESHOLD) {\n\t\treturn fnv1a32(str) % range;\n\t} else {\n\t\treturn Number(fnv1a64(str) % BigInt(range));\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA,MAAMA,gBAAgB,GAAG,CAAC,IAAI,EAAE;;AAEhC;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,UAAU;AAChC;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,QAAQ;AAC7B;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,UAAU;;AAE1B;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAGC,MAAM,CAAC,oBAAoB,CAAC;AAClD;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAGD,MAAM,CAAC,eAAe,CAAC;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,OAAOA,CAACC,GAAG,EAAE;EACrB,IAAIC,IAAI,GAAGR,aAAa;EACxB,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGH,GAAG,CAACI,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;IAC/CD,IAAI,IAAID,GAAG,CAACK,UAAU,CAACH,CAAC,CAAC;IACzB;IACAD,IAAI,GAAGK,IAAI,CAACC,IAAI,CAACN,IAAI,EAAEP,YAAY,CAAC;EACrC;EACA;EACA,OAAOO,IAAI,GAAGN,OAAO;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASa,OAAOA,CAACR,GAAG,EAAE;EACrB,IAAIC,IAAI,GAAGL,aAAa;EACxB,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGH,GAAG,CAACI,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;IAC/CD,IAAI,IAAIJ,MAAM,CAACG,GAAG,CAACK,UAAU,CAACH,CAAC,CAAC,CAAC;IACjCD,IAAI,GAAGJ,MAAM,CAACY,OAAO,CAAC,EAAE,EAAER,IAAI,GAAGH,YAAY,CAAC;EAC/C;EACA,OAAOG,IAAI;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAS,MAAM,CAACC,OAAO,GAAG,CAACX,GAAG,EAAEY,KAAK,KAAK;EAChC,IAAIA,KAAK,GAAGpB,gBAAgB,EAAE;IAC7B,OAAOO,OAAO,CAACC,GAAG,CAAC,GAAGY,KAAK;EAC5B,CAAC,MAAM;IACN,OAAOC,MAAM,CAACL,OAAO,CAACR,GAAG,CAAC,GAAGH,MAAM,CAACe,KAAK,CAAC,CAAC;EAC5C;AACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}