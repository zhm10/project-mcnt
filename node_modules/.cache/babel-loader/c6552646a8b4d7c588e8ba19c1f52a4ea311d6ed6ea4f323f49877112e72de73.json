{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst t = require(\"@webassemblyjs/ast\");\nconst {\n  decode\n} = require(\"@webassemblyjs/wasm-parser\");\nconst EnvironmentNotSupportAsyncWarning = require(\"../EnvironmentNotSupportAsyncWarning\");\nconst Parser = require(\"../Parser\");\nconst StaticExportsDependency = require(\"../dependencies/StaticExportsDependency\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\n/** @typedef {import(\"../Module\").BuildInfo} BuildInfo */\n/** @typedef {import(\"../Module\").BuildMeta} BuildMeta */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\nconst decoderOpts = {\n  ignoreCodeSection: true,\n  ignoreDataSection: true,\n  // this will avoid having to lookup with identifiers in the ModuleContext\n  ignoreCustomNameSection: true\n};\nclass WebAssemblyParser extends Parser {\n  /**\n   * @param {{}=} options parser options\n   */\n  constructor(options) {\n    super();\n    this.hooks = Object.freeze({});\n    this.options = options;\n  }\n\n  /**\n   * @param {string | Buffer | PreparsedAst} source the source to parse\n   * @param {ParserState} state the parser state\n   * @returns {ParserState} the parser state\n   */\n  parse(source, state) {\n    if (!Buffer.isBuffer(source)) {\n      throw new Error(\"WebAssemblyParser input must be a Buffer\");\n    }\n\n    // flag it as async module\n    const buildInfo = /** @type {BuildInfo} */state.module.buildInfo;\n    buildInfo.strict = true;\n    const BuildMeta = /** @type {BuildMeta} */state.module.buildMeta;\n    BuildMeta.exportsType = \"namespace\";\n    BuildMeta.async = true;\n    EnvironmentNotSupportAsyncWarning.check(state.module, state.compilation.runtimeTemplate, \"asyncWebAssembly\");\n\n    // parse it\n    const program = decode(source, decoderOpts);\n    const module = program.body[0];\n    /** @type {Array<string>} */\n    const exports = [];\n    t.traverse(module, {\n      ModuleExport({\n        node\n      }) {\n        exports.push(node.name);\n      },\n      ModuleImport({\n        node\n      }) {\n        const dep = new WebAssemblyImportDependency(node.module, node.name, node.descr, false);\n        state.module.addDependency(dep);\n      }\n    });\n    state.module.addDependency(new StaticExportsDependency(exports, false));\n    return state;\n  }\n}\nmodule.exports = WebAssemblyParser;","map":{"version":3,"names":["t","require","decode","EnvironmentNotSupportAsyncWarning","Parser","StaticExportsDependency","WebAssemblyImportDependency","decoderOpts","ignoreCodeSection","ignoreDataSection","ignoreCustomNameSection","WebAssemblyParser","constructor","options","hooks","Object","freeze","parse","source","state","Buffer","isBuffer","Error","buildInfo","module","strict","BuildMeta","buildMeta","exportsType","async","check","compilation","runtimeTemplate","program","body","exports","traverse","ModuleExport","node","push","name","ModuleImport","dep","descr","addDependency"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/wasm-async/AsyncWebAssemblyParser.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst t = require(\"@webassemblyjs/ast\");\nconst { decode } = require(\"@webassemblyjs/wasm-parser\");\nconst EnvironmentNotSupportAsyncWarning = require(\"../EnvironmentNotSupportAsyncWarning\");\nconst Parser = require(\"../Parser\");\nconst StaticExportsDependency = require(\"../dependencies/StaticExportsDependency\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\n/** @typedef {import(\"../Module\").BuildInfo} BuildInfo */\n/** @typedef {import(\"../Module\").BuildMeta} BuildMeta */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\nconst decoderOpts = {\n\tignoreCodeSection: true,\n\tignoreDataSection: true,\n\n\t// this will avoid having to lookup with identifiers in the ModuleContext\n\tignoreCustomNameSection: true\n};\n\nclass WebAssemblyParser extends Parser {\n\t/**\n\t * @param {{}=} options parser options\n\t */\n\tconstructor(options) {\n\t\tsuper();\n\t\tthis.hooks = Object.freeze({});\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * @param {string | Buffer | PreparsedAst} source the source to parse\n\t * @param {ParserState} state the parser state\n\t * @returns {ParserState} the parser state\n\t */\n\tparse(source, state) {\n\t\tif (!Buffer.isBuffer(source)) {\n\t\t\tthrow new Error(\"WebAssemblyParser input must be a Buffer\");\n\t\t}\n\n\t\t// flag it as async module\n\t\tconst buildInfo = /** @type {BuildInfo} */ (state.module.buildInfo);\n\t\tbuildInfo.strict = true;\n\t\tconst BuildMeta = /** @type {BuildMeta} */ (state.module.buildMeta);\n\t\tBuildMeta.exportsType = \"namespace\";\n\t\tBuildMeta.async = true;\n\t\tEnvironmentNotSupportAsyncWarning.check(\n\t\t\tstate.module,\n\t\t\tstate.compilation.runtimeTemplate,\n\t\t\t\"asyncWebAssembly\"\n\t\t);\n\n\t\t// parse it\n\t\tconst program = decode(source, decoderOpts);\n\t\tconst module = program.body[0];\n\t\t/** @type {Array<string>} */\n\t\tconst exports = [];\n\t\tt.traverse(module, {\n\t\t\tModuleExport({ node }) {\n\t\t\t\texports.push(node.name);\n\t\t\t},\n\n\t\t\tModuleImport({ node }) {\n\t\t\t\tconst dep = new WebAssemblyImportDependency(\n\t\t\t\t\tnode.module,\n\t\t\t\t\tnode.name,\n\t\t\t\t\tnode.descr,\n\t\t\t\t\tfalse\n\t\t\t\t);\n\n\t\t\t\tstate.module.addDependency(dep);\n\t\t\t}\n\t\t});\n\n\t\tstate.module.addDependency(new StaticExportsDependency(exports, false));\n\n\t\treturn state;\n\t}\n}\n\nmodule.exports = WebAssemblyParser;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,CAAC,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACvC,MAAM;EAAEC;AAAO,CAAC,GAAGD,OAAO,CAAC,4BAA4B,CAAC;AACxD,MAAME,iCAAiC,GAAGF,OAAO,CAAC,sCAAsC,CAAC;AACzF,MAAMG,MAAM,GAAGH,OAAO,CAAC,WAAW,CAAC;AACnC,MAAMI,uBAAuB,GAAGJ,OAAO,CAAC,yCAAyC,CAAC;AAClF,MAAMK,2BAA2B,GAAGL,OAAO,CAAC,6CAA6C,CAAC;;AAE1F;AACA;AACA;AACA;;AAEA,MAAMM,WAAW,GAAG;EACnBC,iBAAiB,EAAE,IAAI;EACvBC,iBAAiB,EAAE,IAAI;EAEvB;EACAC,uBAAuB,EAAE;AAC1B,CAAC;AAED,MAAMC,iBAAiB,SAASP,MAAM,CAAC;EACtC;AACD;AACA;EACCQ,WAAWA,CAACC,OAAO,EAAE;IACpB,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9B,IAAI,CAACH,OAAO,GAAGA,OAAO;EACvB;;EAEA;AACD;AACA;AACA;AACA;EACCI,KAAKA,CAACC,MAAM,EAAEC,KAAK,EAAE;IACpB,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACH,MAAM,CAAC,EAAE;MAC7B,MAAM,IAAII,KAAK,CAAC,0CAA0C,CAAC;IAC5D;;IAEA;IACA,MAAMC,SAAS,GAAG,wBAA0BJ,KAAK,CAACK,MAAM,CAACD,SAAU;IACnEA,SAAS,CAACE,MAAM,GAAG,IAAI;IACvB,MAAMC,SAAS,GAAG,wBAA0BP,KAAK,CAACK,MAAM,CAACG,SAAU;IACnED,SAAS,CAACE,WAAW,GAAG,WAAW;IACnCF,SAAS,CAACG,KAAK,GAAG,IAAI;IACtB1B,iCAAiC,CAAC2B,KAAK,CACtCX,KAAK,CAACK,MAAM,EACZL,KAAK,CAACY,WAAW,CAACC,eAAe,EACjC,kBACD,CAAC;;IAED;IACA,MAAMC,OAAO,GAAG/B,MAAM,CAACgB,MAAM,EAAEX,WAAW,CAAC;IAC3C,MAAMiB,MAAM,GAAGS,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;IAC9B;IACA,MAAMC,OAAO,GAAG,EAAE;IAClBnC,CAAC,CAACoC,QAAQ,CAACZ,MAAM,EAAE;MAClBa,YAAYA,CAAC;QAAEC;MAAK,CAAC,EAAE;QACtBH,OAAO,CAACI,IAAI,CAACD,IAAI,CAACE,IAAI,CAAC;MACxB,CAAC;MAEDC,YAAYA,CAAC;QAAEH;MAAK,CAAC,EAAE;QACtB,MAAMI,GAAG,GAAG,IAAIpC,2BAA2B,CAC1CgC,IAAI,CAACd,MAAM,EACXc,IAAI,CAACE,IAAI,EACTF,IAAI,CAACK,KAAK,EACV,KACD,CAAC;QAEDxB,KAAK,CAACK,MAAM,CAACoB,aAAa,CAACF,GAAG,CAAC;MAChC;IACD,CAAC,CAAC;IAEFvB,KAAK,CAACK,MAAM,CAACoB,aAAa,CAAC,IAAIvC,uBAAuB,CAAC8B,OAAO,EAAE,KAAK,CAAC,CAAC;IAEvE,OAAOhB,KAAK;EACb;AACD;AAEAK,MAAM,CAACW,OAAO,GAAGxB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}