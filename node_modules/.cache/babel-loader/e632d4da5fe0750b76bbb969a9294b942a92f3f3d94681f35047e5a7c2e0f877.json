{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst asyncLib = require(\"neo-async\");\nconst EntryDependency = require(\"./dependencies/EntryDependency\");\nconst {\n  someInIterable\n} = require(\"./util/IterableHelpers\");\nconst {\n  compareModulesById\n} = require(\"./util/comparators\");\nconst {\n  dirname,\n  mkdirp\n} = require(\"./util/fs\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Compiler\").IntermediateFileSystem} IntermediateFileSystem */\n/** @typedef {import(\"./Module\").BuildMeta} BuildMeta */\n\n/**\n * @typedef {Object} ManifestModuleData\n * @property {string | number} id\n * @property {BuildMeta} buildMeta\n * @property {boolean | string[] | undefined} exports\n */\n\n/**\n * @typedef {Object} LibManifestPluginOptions\n * @property {string=} context Context of requests in the manifest file (defaults to the webpack context).\n * @property {boolean=} entryOnly If true, only entry points will be exposed (default: true).\n * @property {boolean=} format If true, manifest json file (output) will be formatted.\n * @property {string=} name Name of the exposed dll function (external name, use value of 'output.library').\n * @property {string} path Absolute path to the manifest json file (output).\n * @property {string=} type Type of the dll bundle (external type, use value of 'output.libraryTarget').\n */\n\nclass LibManifestPlugin {\n  /**\n   * @param {LibManifestPluginOptions} options the options\n   */\n  constructor(options) {\n    this.options = options;\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.emit.tapAsync({\n      name: \"LibManifestPlugin\",\n      stage: 110\n    }, (compilation, callback) => {\n      const moduleGraph = compilation.moduleGraph;\n      // store used paths to detect issue and output an error. #18200\n      const usedPaths = new Set();\n      asyncLib.forEach(Array.from(compilation.chunks), (chunk, callback) => {\n        if (!chunk.canBeInitial()) {\n          callback();\n          return;\n        }\n        const chunkGraph = compilation.chunkGraph;\n        const targetPath = compilation.getPath(this.options.path, {\n          chunk\n        });\n        if (usedPaths.has(targetPath)) {\n          callback(new Error(`each chunk must have a unique path`));\n          return;\n        }\n        usedPaths.add(targetPath);\n        const name = this.options.name && compilation.getPath(this.options.name, {\n          chunk,\n          contentHashType: \"javascript\"\n        });\n        const content = Object.create(null);\n        for (const module of chunkGraph.getOrderedChunkModulesIterable(chunk, compareModulesById(chunkGraph))) {\n          if (this.options.entryOnly && !someInIterable(moduleGraph.getIncomingConnections(module), c => c.dependency instanceof EntryDependency)) {\n            continue;\n          }\n          const ident = module.libIdent({\n            context: this.options.context || ( /** @type {string} */compiler.options.context),\n            associatedObjectForCache: compiler.root\n          });\n          if (ident) {\n            const exportsInfo = moduleGraph.getExportsInfo(module);\n            const providedExports = exportsInfo.getProvidedExports();\n            /** @type {ManifestModuleData} */\n            const data = {\n              id: chunkGraph.getModuleId(module),\n              buildMeta: ( /** @type {BuildMeta} */module.buildMeta),\n              exports: Array.isArray(providedExports) ? providedExports : undefined\n            };\n            content[ident] = data;\n          }\n        }\n        const manifest = {\n          name,\n          type: this.options.type,\n          content\n        };\n        // Apply formatting to content if format flag is true;\n        const manifestContent = this.options.format ? JSON.stringify(manifest, null, 2) : JSON.stringify(manifest);\n        const buffer = Buffer.from(manifestContent, \"utf8\");\n        const intermediateFileSystem = /** @type {IntermediateFileSystem} */\n        compiler.intermediateFileSystem;\n        mkdirp(intermediateFileSystem, dirname(intermediateFileSystem, targetPath), err => {\n          if (err) return callback(err);\n          intermediateFileSystem.writeFile(targetPath, buffer, callback);\n        });\n      }, callback);\n    });\n  }\n}\nmodule.exports = LibManifestPlugin;","map":{"version":3,"names":["asyncLib","require","EntryDependency","someInIterable","compareModulesById","dirname","mkdirp","LibManifestPlugin","constructor","options","apply","compiler","hooks","emit","tapAsync","name","stage","compilation","callback","moduleGraph","usedPaths","Set","forEach","Array","from","chunks","chunk","canBeInitial","chunkGraph","targetPath","getPath","path","has","Error","add","contentHashType","content","Object","create","module","getOrderedChunkModulesIterable","entryOnly","getIncomingConnections","c","dependency","ident","libIdent","context","associatedObjectForCache","root","exportsInfo","getExportsInfo","providedExports","getProvidedExports","data","id","getModuleId","buildMeta","exports","isArray","undefined","manifest","type","manifestContent","format","JSON","stringify","buffer","Buffer","intermediateFileSystem","err","writeFile"],"sources":["/Volumes/storage/projects/project-mcnt/node_modules/webpack/lib/LibManifestPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst asyncLib = require(\"neo-async\");\nconst EntryDependency = require(\"./dependencies/EntryDependency\");\nconst { someInIterable } = require(\"./util/IterableHelpers\");\nconst { compareModulesById } = require(\"./util/comparators\");\nconst { dirname, mkdirp } = require(\"./util/fs\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Compiler\").IntermediateFileSystem} IntermediateFileSystem */\n/** @typedef {import(\"./Module\").BuildMeta} BuildMeta */\n\n/**\n * @typedef {Object} ManifestModuleData\n * @property {string | number} id\n * @property {BuildMeta} buildMeta\n * @property {boolean | string[] | undefined} exports\n */\n\n/**\n * @typedef {Object} LibManifestPluginOptions\n * @property {string=} context Context of requests in the manifest file (defaults to the webpack context).\n * @property {boolean=} entryOnly If true, only entry points will be exposed (default: true).\n * @property {boolean=} format If true, manifest json file (output) will be formatted.\n * @property {string=} name Name of the exposed dll function (external name, use value of 'output.library').\n * @property {string} path Absolute path to the manifest json file (output).\n * @property {string=} type Type of the dll bundle (external type, use value of 'output.libraryTarget').\n */\n\nclass LibManifestPlugin {\n\t/**\n\t * @param {LibManifestPluginOptions} options the options\n\t */\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.emit.tapAsync(\n\t\t\t{\n\t\t\t\tname: \"LibManifestPlugin\",\n\t\t\t\tstage: 110\n\t\t\t},\n\t\t\t(compilation, callback) => {\n\t\t\t\tconst moduleGraph = compilation.moduleGraph;\n\t\t\t\t// store used paths to detect issue and output an error. #18200\n\t\t\t\tconst usedPaths = new Set();\n\t\t\t\tasyncLib.forEach(\n\t\t\t\t\tArray.from(compilation.chunks),\n\t\t\t\t\t(chunk, callback) => {\n\t\t\t\t\t\tif (!chunk.canBeInitial()) {\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tconst targetPath = compilation.getPath(this.options.path, {\n\t\t\t\t\t\t\tchunk\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (usedPaths.has(targetPath)) {\n\t\t\t\t\t\t\tcallback(new Error(`each chunk must have a unique path`));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tusedPaths.add(targetPath);\n\t\t\t\t\t\tconst name =\n\t\t\t\t\t\t\tthis.options.name &&\n\t\t\t\t\t\t\tcompilation.getPath(this.options.name, {\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tcontentHashType: \"javascript\"\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tconst content = Object.create(null);\n\t\t\t\t\t\tfor (const module of chunkGraph.getOrderedChunkModulesIterable(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tcompareModulesById(chunkGraph)\n\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tthis.options.entryOnly &&\n\t\t\t\t\t\t\t\t!someInIterable(\n\t\t\t\t\t\t\t\t\tmoduleGraph.getIncomingConnections(module),\n\t\t\t\t\t\t\t\t\tc => c.dependency instanceof EntryDependency\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst ident = module.libIdent({\n\t\t\t\t\t\t\t\tcontext:\n\t\t\t\t\t\t\t\t\tthis.options.context ||\n\t\t\t\t\t\t\t\t\t/** @type {string} */ (compiler.options.context),\n\t\t\t\t\t\t\t\tassociatedObjectForCache: compiler.root\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (ident) {\n\t\t\t\t\t\t\t\tconst exportsInfo = moduleGraph.getExportsInfo(module);\n\t\t\t\t\t\t\t\tconst providedExports = exportsInfo.getProvidedExports();\n\t\t\t\t\t\t\t\t/** @type {ManifestModuleData} */\n\t\t\t\t\t\t\t\tconst data = {\n\t\t\t\t\t\t\t\t\tid: chunkGraph.getModuleId(module),\n\t\t\t\t\t\t\t\t\tbuildMeta: /** @type {BuildMeta} */ (module.buildMeta),\n\t\t\t\t\t\t\t\t\texports: Array.isArray(providedExports)\n\t\t\t\t\t\t\t\t\t\t? providedExports\n\t\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tcontent[ident] = data;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst manifest = {\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\ttype: this.options.type,\n\t\t\t\t\t\t\tcontent\n\t\t\t\t\t\t};\n\t\t\t\t\t\t// Apply formatting to content if format flag is true;\n\t\t\t\t\t\tconst manifestContent = this.options.format\n\t\t\t\t\t\t\t? JSON.stringify(manifest, null, 2)\n\t\t\t\t\t\t\t: JSON.stringify(manifest);\n\t\t\t\t\t\tconst buffer = Buffer.from(manifestContent, \"utf8\");\n\t\t\t\t\t\tconst intermediateFileSystem =\n\t\t\t\t\t\t\t/** @type {IntermediateFileSystem} */ (\n\t\t\t\t\t\t\t\tcompiler.intermediateFileSystem\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tmkdirp(\n\t\t\t\t\t\t\tintermediateFileSystem,\n\t\t\t\t\t\t\tdirname(intermediateFileSystem, targetPath),\n\t\t\t\t\t\t\terr => {\n\t\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t\tintermediateFileSystem.writeFile(targetPath, buffer, callback);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\nmodule.exports = LibManifestPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}